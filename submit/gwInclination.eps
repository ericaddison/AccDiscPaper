%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: gwInclination.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: shane
%%CreationDate: 6/5/09
%%BoundingBox: 0 0 505 341
%%HiResBoundingBox: 0 0 504.8194 340.1680
%%CropBox: 0 0 504.8194 340.1680
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default"/>
            </rdf:Alt>
         </dc:description>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>shane</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">gwInclination</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-06-05T10:26:33-06:00</xap:CreateDate>
         <xap:ModifyDate>2009-06-05T10:26:33-06:00</xap:ModifyDate>
         <xap:MetadataDate>2009-06-05T10:26:33-06:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>176</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqxHz9pmk6nfe&#xA;U7TVreC7sH1hzLbXcaSwuRpd9wDJICpo9CKjriqJT8tPy+S4eYeW9Mq6JH6f1O34ARliCq8KAnnu&#xA;e9B4YqsP5Xfl6bOa1/w9p/Cf1eUgtYPUX1mZjwfhVePL4adNsVVJvy1/L+X06+XNMX03DjhZ261K&#xA;9mom49sVd/yrX8v/AKx6/wDhzTOXDhw+p2/Cla148KV98VU7P8s/Itv6/qaBpc3qzPKnKxt/gVqU&#xA;QVU7DFXD8rvy9FnDa/4e0/hB6XGQ2sHqN6LKw5vwq3Lj8Veu+Kqjflr+X7XKT/4c0wNGjxhBZ24Q&#xA;hypJK8KEjhse2/jirovy1/L+OSZx5c0xjM4kYNZ25CkIqUQFPhHwVoO9T3xVDzflZ5DNhBZw6Fp0&#xA;foPbkTNZwPIyW8iOys3EE+oqcWJ8e+Kohvy1/L9rlJ/8OaYGjR4wgs7cIQ5UkleFCRw2PbfxxV0X&#xA;5a/l/HJM48uaYxmcSMGs7chSEVKICnwj4K0Hep74qpj8rvy9Fgln/h7T+CIkYl+qweqQlKEvwqSa&#xA;bnviqo/5a/l+80Up8uaYDFyoos7cKeQp8Q4b+2Kqafln5FXUJ7o+X9LaKWGKJbf6jb8UaJpGZx8N&#xA;KuJADt+z9yrj+V35emzmtf8AD2n8J/V5SC1g9RfWZmPB+FV48vhp02xVUl/LX8v5JIXPlzTFMLmR&#xA;QtnbgMSjJRwE+IfHWh70PbFXL+Wv5frcvP8A4c0wtIiRlDZ25QBCxBC8KAnnue+3hiqHuvys8hya&#xA;Xd2UGhadDJcpOEuTZwO8bzljyX4VPwF/hFRQADFURL+Wv5fySQufLmmKYXMihbO3AYlGSjgJ8Q+O&#xA;tD3oe2KuX8tfy/W5ef8Aw5phaREjKGztygCFiCF4UBPPc99vDFVq/ll+XyxzR/4d00icszE2kBK8&#xA;xT4Dw+EDtTFXN+WX5fNHDH/h3TQICrKRaQAtwFPjPD4ge9cVWv8Aln5FbUILoeX9LWKKGWJrf6jb&#xA;8XaVo2Vz8NKoIyBt+196qpF+Wv5fxyTOPLmmMZnEjBrO3IUhFSiAp8I+CtB3qe+KqY/K78vRZw2v&#xA;+HtP4QelxkNrB6jeiysOb8Kty4/FXrviqo35a/l+1yk/+HNMDRo8YQWduEIcqSSvChI4bHtv44qs&#xA;P5a/lzGLiSXy3pTRyN6snq2dsyJxRU+HklFWiV+dTiqp+WyCP8uvKyA1CaRYKD40toxirI8VQmsa&#xA;kmmaRfalIjSR2NvLcvGv2mEKFyo67njirzzQ/wA5mk8l6/5g1/T47GfQ/qrfV7eZpYphqNrBdWUa&#xA;zSxwBXb64kT1FFbevE4qp2/m2DzZ5T8h+Yb66g0s3upO9xNBJC8cEqaffLxV51kj+0tPiX8cEhfW&#xA;mzFMRNmIl5G/0EH7WbW+h3zFriPzLqEsc4DIaWDJxIqClLWlDlfhn+cfs/U5h1uMgDwce3/DP+qi&#xA;jceVNUk5MnmjVY3Y1FPqXEV/yRbDInCf50vs/U2Q7RxjngxH/lZ/xajJ5Z83lX9LzhdKx/u+dnYu&#xA;B86QqT9+A4p/zz8g2R1+l66eP+nyf8Uh08tfmNG3Iec0mHZJtLgp8iY5Izg8LL/P/wBi2nXaA/8A&#xA;IYj3ZZfpBc3/ACtyBhxOhXsSAVFLu3lenUdZkBP3Y/vh/NPzUfyXIf5eB/zJD/elYfO3myxJOseT&#xA;b1Ieiy6ZNDqBJ8fTX0nA+jB48x9UD8N0/wAlabJ/damF90xLH9u4R2i/mP5M1eX6vb6kkF7UA2d2&#xA;DbTBj+yElCcj/q1ycNTCWwO7j6rsPV4BxSgTD+dH1D5i6+LJcvdS7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYqh7+70+1tmkv5ooLY/A7zsqRnltxJcgb4qk/5dkH8v8AywV+z+ibGlOl&#xA;PqyYqyDFVskccsbRyKHjcFXRgCrKRQgg9QcVY9pX5c+RdJa3bTdDtLU2rTtB6cYAU3QjExp0PJYI&#xA;xv0CqBsBiqD1bT9K0KfybY6fbC1sINWkSG3t42YLz02+6KgY05NUnt1O2KsvxV2KuxV2KuxV2Kpb&#xA;rflvQddt/Q1ewhvYx9gyqCy1/kf7S/7E5XPFGY9Qty9Jrs2nlxYpmB8v0jkfixZvKHmryyPV8nai&#xA;13p6bny7qbmSPiP2ba4PxxbfZU/DXcnKPBnj+g2O4/oLuB2lptXtqocMz/lYbH/Ojyl5nn3Jv5Y8&#xA;9abrdxLp08Uml6/bf71aPdfDMtP2ozsJU7hl7b98sxZxI1yl3OFr+yMmniMgIyYZcpx5fH+afIsk&#xA;y91LsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiq2aVYonlYMVjUswRWdqAV+FVBZj7AVxVI&#xA;fy7Nfy/8snx0mx67f8eyYqyDFXYq7FWNecLj6vqflWb0pJuOrSfu4l5Oa6XfDYbYqyON+cavxK8g&#xA;DxYUYVFaEeOKrsVdirsVdirsVdirsVSLzV5N0jzJbot2Ggvrc8rHUoDwuLdwaho3Hv1B2+nKcuGM&#xA;xvz73Y9ndqZdLI8O8JfVE7xkPMJN5c81atpuqReVvN9F1N6jS9XA4wX6r2HZJgCKr3P0Vrx5TE8E&#xA;+fQ97n67s7FlxnU6X+7/AI4fxY/1x7j+BNsynn3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;o3l19WhMvoyT0IHCFeb7+22KpL+XZr+X/lk9K6TY7H/mGTFWQYq7FXYqxzzZI8er+UmSJpj+l3HB&#xA;CoNDpd8C3xsgovU718KnFWR4q7FXYq7FXYq7FXYq7FXYqlXmfyzpnmTSJdM1BCY3o8MybSQyr9iW&#xA;Nv2WX+w7HK8uITjRc3Qa/JpcoyY+fUdCOoPkkPk3zFqlvqUvlDzM4bW7SP1LG96Lf2oqBKK1/eLT&#xA;4x9PjlOHIQeCf1D7Q7HtPRY5YxqtOP3UjUo/6nLu93cWZ5lOhdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVWzOyRO6xtKyqWWJOIZiBXivIqtT7kDFUh/Ls1/L/AMsmlP8AcTY7H/mGTFWQYqgddXUX&#xA;0TUE0w8dSa2mFkx6Ccxn0z2/bpirxLQbrzrp35e65Yappnmq4a8EbaZHC0j6issFpZreIbqRp5IY&#xA;7m9eXgQD8HNkptirJfKcfmS28peQY74T3WtR6rdeqmqG4t3XlY6iwj5zrPcFIkYIjuCzBQTSuyr1&#xA;SMyGNTIoWQgc1UllDU3AYhaj3oMVXYq7FXYq7FXYq7FXYq7FXYqx7zr5UGv6fG9rL9U1vT2+saRq&#xA;A2aKYdiaH929KOPw2yjPh4xttIci7TsrtH8tMiQ4sU9px7x+sdHeSfNJ1/S3N1F9V1iwkNrq9l3i&#xA;uE2NP8h/tKforthwZeMb/UOa9q9n/lsnpPFimOKEu+J/SORZDlzq3Yq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqo3j3qQk2cUc09RRJpGhSnf4lSU/8LiqS/l3X/lX/lmux/RNjUD/AJhkxVkGKuxV2Ksc&#xA;82LOdX8pCB1R/wBLvVnUuOI0u+5CgZNyuwNdvfpirI8VdirsVdirsVdirsVdirsVdirsVYJ52tLj&#xA;y7q0fnrS4nkSFRD5js4us9mNhMF6GSDrX+XuAMxM4MD4g/zvd+x6PsrJHVYjo8hq98Uj/DP+b7pf&#xA;f5s3tbq3u7aK6tpFlt50WSGVDVWRxVWB8CDmUCCLDz+THKEjGQqQNFUwsHYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FVswlMTiFlSUqRG7qXUNTYsoKEivbkPniqQ/l3X/lX/lmu5/RNjUj/AJhkxV5tr3mm&#xA;9tvz20+x/wAf2FpaemLV9Aa2DyiS4ntGSzYCccpbhQxScr+7G3E8sVe04q7FWNecFu21PyqtpJHD&#xA;OdWk4SSxtKg/3F31aorxE7f5WKsjjEgjUSMGkAHNlBVS1NyFJag9qnFV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxVbLFHLG8UqCSKQFXRgCrKRQgg7EEYkWmMiDY2IYL5Skl8reY5fJV27Nptyr3flmd9/3QJaa0&#xA;LHq0R+Jf8n6BmHhPhy8M8v4f1PRdpRGswDVxH7yPpyjz/hn/AJ3I+bPMzHnHYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FVG8S9eEizljhnqKPNG0yU7/AAq8R/4bFUl/Luv/ACr/AMs13P6Jsakf8wyYq808&#xA;g6L5KbzLJLp3n/zHFrs91Fe6n5f1WW3tLi4liCpxntZbOGV1ZIgjGPqP2u+Kva8VSrzL5o0Ty1pb&#xA;aprE7QWgdIlKRyTSPLK3FI0ihV5HZj0CriqT6xf2esy+SNR0y852V7qX1m1u4eJEkT6VeutPUVtn&#xA;XY7V+RxVluKuxV2KuxV2KuxV2KuxV2KuxV2KuxVjvnry1PrmkKbBxBrWnSreaRc9OE8e4Un+WQfC&#xA;w6fdlGfFxx2+obh2nZGvGny+sXimOGY/on9I5hEeT/MsPmLQYNRVPRuAWhvrU7NDcxHjLEw6ih3F&#xA;d6UyWHLxxtq7T0B0uY47uPOJ/nRPI/jqnWWuA7FXYq7FXYq7FXYq7FXYq7FXYq7FVsyM8TosjRMy&#xA;lVlTiWUkU5LyDLUe4IxVIfy7FPy/8sitf9xNjuf+YZMVeceZ/wAzZ5PzGt/K155Tt9Qs7PXNOtrX&#xA;zPcRTSWlpJP6cgXkYG4XgY0i4Pxqy1I3xV7PirHPPXlGXzNplpBbX50zUNOvYNR069EQnWO4tyeB&#xA;eIsgdaMQV5DFUmbyjYaHpXkDyxDLM9ppt4LVZ1keCV/S0m9HPnEyMpYipAPtirOo41jjWNSSqAKC&#xA;zFmoBTdmJJPucVXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWBakR5N86Lq4+Dy75kdINT6BLe/6RXB7&#xA;Kso+Fz47k9Mw5fusnF/DLn7+96TB/h2k8L/L4BcP6UOsffHmPLYM9zMebdirsVdirsVdirsVdirs&#xA;VdirsVdiqjeWcV3CYZWkVCQawyyQPt/lxMjfjiqS/l2Kfl/5ZHhpNj13/wCPZMVeZ6f5G/Na78+n&#xA;zD5gsoGtpdQtbmOG21/UEitIIfTDotqkUcE4rGZOLAciaHFXtmKuxVjnmyCKfV/KSSryUau7UqRu&#xA;ul3zDp7jFWR4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgdd0Wy1vR7vSb5eVreRmKSlKiv2WWtfiV&#xA;qMvuMhkgJxMT1cnSaqenyxyw+qJv8e/kWPfl7rV+9vc+W9aflr2gsIJ3Nf8ASLc/3FytdyHSgY+P&#xA;XrlOnmaMJfVH8W7PtrSwEo6jCP3Obcf0ZfxR+B5eXuZfmS6N2KuxV2KuxV2KuxV2KuxV2KuxVbNF&#xA;HNE8Ug5RyKUddxUMKEbYqkP5dgD8v/LIHQaTY0/6RkxVkGKuxV2KsW87x6bLqHlSPUlhe0fV2Vku&#xA;QhjZjpl6EBD/AAklqU98VZPHHHFGscahI0AVEUAKqgUAAHQDFV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KsL8/6Ze2U9r500eMyanoylb22U0+taexrNEfFk+2ngexNMxdREgjJHnH7Q7/sbPDIJaTKa&#xA;x5fpP83J/CfjyLKdJ1Sx1bTbbUrGQTWl0gkhkHcHxHYjoR45kQmJCxydNqNPPDkOOYqUTRReSaXY&#xA;q7FXYq7FXYq7FXYq7FXYqhtRt9Nns5BqUUMtnGPUlFyqNEoQV5Nz+EcfHFUn/Lrj/wAq+8scacf0&#xA;TY8adKfVk6YqyHFUn8zebNH8t20E+pNKPrUot7VIYJ7gvMwJVT6KScAafaeijucVef8Ak783te1z&#xA;yrrmo3VrptvqOn2dpqFmWuHhszFf2i3ipNLICVa3RqSkfhXFUZpHm7UtY0fyZruv2y2EkmtXSoyR&#xA;zRpNAthqCQXCQygzRrMlGCvvQ4q9KjkSSNZENUcBlPSoIqOuKrsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirz6zZvIvmr9HSfD5S8wTFtPc7JZXz7vAT2jm6p2B2p1OYUf3M6/gly8i9NlH8o6bxB/j&#xA;OEervnDpL3x6/wBgeg5mvMuxV2KuxV2KuxV2KuxV2KuxVRvL22s4TNcv6cQIBahO59lBOKpL+XZB&#xA;/L/yyR0Ok2NP+kZMVZBirsVY2/5afl69r9VPlzTltuUrmFLaJELXAAmJCqBVwoDewpiqX3+ieX/L&#xA;M/lGx0fT49P08azKVtbOEhQ8umXoLcIgep6mm3U4qzTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FUv1/QtO13SLnStRj9S1uV4t/Mp6q6nsyncHIZMYnGi5Oj1eTT5Y5MZqUfxXuLGfJev6jYag3k&#xA;zzJIW1i0Utpt++wv7RT8Lgk7yqPtr12rvvmPgyEHw5/UOXmHb9qaPHkh+b04/dS+qP8Aqcu7+qeh&#xA;+HczbMt592KuxV2KuxV2KuxV2KuxVbNKsUTysGKxqWYIrO1AK/Cqgsx9gK4qkP5dmv5f+WT46TY9&#xA;dv8Aj2TFWQYq7FXYqxrzhPLBqflWSK3kunXVpKQRGMOa6XfDYytGm3XdsVZHGzPGrMhjZgCY2pyU&#xA;kdDxLCo9jiq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi84eUrPzHp6xO7WuoWretpmoxHj&#xA;LbzjdWUjehIHId/nQinNhEx5jkXZdmdpS0s7A4oS2nE8pR7v1JZ5U85XUmoN5Z8zItl5nt1qhG0F&#xA;9EOk9sxABrT4k6jfwIWGHOb4J7T+/wBzldo9lxEPzGnPHp5fOB/my/Qf2XMMyXRuxV2KuxV2KuxV&#xA;2KuxVRvLiWCEyRW0l29QPRhMYffv+9eJdv8AWxVJfy7Nfy/8smlP9xNjsf8AmGTFWQYq7FXYqxzz&#xA;Y041fykYEV3/AEu9Vdig4nS77kahX3C7gU39uuKsjxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxVJvNHlPSPMlklvfoyzQN6llewtwnt5e0kTjcEEA+GVZcMZii5/Z/aOXSz4ocjtKJ3jIdxD&#xA;GIPNfmLyeVsvOiNfaUpC2/me1jLLQmii8iWpjb/KFa+5qcoGWWLbJuP5363bz7Owa716Q8GTrikf&#xA;9weo8v7Gc2V9ZX1sl1ZTx3NtKKxzwsHRh7MpIzLjIEWHncuGeORjMGMh0OxV8LW7FXYq7FXYq7FV&#xA;sxlETmFVeUKTGjsUUtTYMwDkCvfifliqQ/l3X/lX/lmux/RNjUD/AJhkxVkGKpV5ij8zyW0SeX5b&#xA;OGcyUuHvUlcCIg19P0mX460pyqMVeRfl3o35raV5Z1jTYtPvLLVtVht4rK61S6WeG31CCzSPUL2W&#xA;QS3circ3HN4eEbcmFWUKcVTTyLpHm/QvJvkXTNXth+mrXXNRAiurtpWaJ7fU3jaS4ETmvpuOPwmo&#xA;pXjWiqvXIzIY1MihZCBzVSWUNTcBiFqPegxVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirTokiMjqHRwVZWFQQdiCDikEg2GG3f5aWlvdvf+VtQn8tXshrIlqFks5D0rJaP+7O3TjTMU6UA&#xA;3A8J+z5O9x9vSlEQ1MI54D+dtMe6Y3+9Ymsfmfo6BdU0a216BftXelzejMEXqWt5wObnwRsHHljz&#xA;Al7v1Mjpuzs5/d5JYT3ZBY/00eQ94Xj82PK0Cj9MRX+hyn7MWo2U8bEVpUGNZEp/ssP5uA+q4+8M&#xA;f9Dmpl/dHHmHfCcT95B+xNrbz55JuVVode09uXRTcxK3/AswYfdlg1GM/wAQ+bhZOyNXDniyf6U/&#xA;qTe1vLO7j9W1njuIunOJ1da0r1UnLRIHk4OTFKBqQMT57K2Fg7FVG8e9SEmzijmnqKJNI0KU7/Eq&#xA;Sn/hcVSX8u6/8q/8s12P6Jsagf8AMMmKsgxV2KuxVjfm0TnV/KQhdI5Dq77upccRpd8WFAybla0N&#xA;duu/TFWSYq7FXYq7FWldGrxYNxNDQ1oR2xVvFXYq7FWmdEFWYKCQKk03Y0A+knFW8VdirsVdirQd&#xA;C5QMOYAJWu4BqAae9DireKuxV2KtO6IjO7BUUEsxNAANySTireKuxV2KuxVKr3yz5WvZq3ulWNzM&#xA;9XrNbwyMdxyb4lJ/a3ys4oHmB8nLxdoajGKhknEeUiP0pZcflf8Al9Ozl9BtAX3Ppp6Y+gIV4/Rl&#xA;Z0uM/wAIc2HtBro8ss/ib+9S/wCVUfl+JTKmkrG5FCY5riPbb+SRfDB+Uxd33s/9EWtqjkv3iJ+8&#xA;Iu0/L/yvZzetaRXNvJSnKK+vU2PbaYZIaeA5X8z+toyds6iYqRiR5wh/xKp/gvSY5J7m1ku4r2dQ&#xA;DO9/fuCyiiF1+sLyC+FRhGCN3v8AM/rYS7UzSiIng4Ry/d4/+JW/l3v+X/lg1B/3E2O46H/Rky51&#xA;zIMVdirsVY55ytNIuTpH17XW0C7t771tKuY5LSOSS4e3mtvSVbyOeOTlHcP8ISvhirl8p6yszS/4&#xA;v1gsyKhBTS+PwFjUL9R4gnluQN9vAYqsPk7VzbS2/wDjDWuMvqcnA031B6pJPF/qXJacvhofh2p0&#xA;xVfL5U1iThXzdrC8GDjimlrUjsaWO49jiqjd6Be2SS6jeeddUtraCImeab9FRwJGvxF35WQRad2P&#xA;bFUv0620znbpY/mFcyvrDSXNkqSaK5ue0jwAWZ9QCm/CtMVTMeTtXFtFb/4w1rjF6fFyNN9Q+kQR&#xA;yf6lyavH4qn4t69cVXnyprBnSb/F2sckVkChNLCEOVJJX6jQkcNj238Tiro/KmsI8rDzdrBMrB2D&#xA;JpbAEKFooNj8I+GtB3qe+KpXfaLbQSWOh3/n2/jvJjHJY2lxJpAuZzausisoez9SXiyAsd/fFUTp&#xA;ulvqyi/0zz3qF9BGZIDJatpEsPPkvNW9OzZC6lab7rv4nFUXH5U1hHlYebtYJlYOwZNLYAhQtFBs&#xA;fhHw1oO9T3xVYPJ2r/VFtf8AGGtcEVUElNN9QhaUJk+pciTTc13xVdJ5V1cukzeb9XX0uRoE0tVo&#xA;RvyH1Ghp74qlEMekGSPVIvzEnYaiyWEFwJdFMc0kDyEQxn6nxaRWkeqrviqanydq5tpbf/GGtcZf&#xA;U5OBpvqD1SSeL/UuS05fDQ/DtTpiq+TyprDvEx83awDExdQqaWoJKlaMBY/EPirQ96Htirh5U1gT&#xA;vN/i7WOTqqFSmllAELEEL9RoCee577eAxVLr7QIxHc6NfeedRV7i2uLie2mfSRN9VduM0lGs+YiQ&#xA;y8eX2V2G22KrIhYXsmmm3/Ma6ma+LS6YsM2jEXQVSjemEs/3yry3pUA0PUYqmg8qawJ3m/xdrHJ1&#xA;VCpTSygCFiCF+o0BPPc99vAYqtHlHWAkqf4v1mkpYsSumEjl/KfqVV9qdMVc3lLV/TjU+b9YCwlW&#xA;DcdMBPEftn6l8Q8a9cVSV5dAbUtMlb8yZfrt9E8ekp6+icrmOZ0Degn1T97V4QKrXcUxVMdJ0ttR&#xA;S4udL896hqERmKTSQNpE6JLGqo0YK2bKhHHdfGp6nFUQPJ2ri2it/wDGGtcYvT4uRpvqH0iCOT/U&#xA;uTV4/FU/FvXriq8+VNYM6Tf4u1jkisgUJpYQhypJK/UaEjhse2/icVQs+hXVrcx283nrU7e61GRv&#xA;qsMn6IDyPHFydIEksTXjHGXZUHi3icVVvLut+RtJ8taXYWHmCyn0yxWHSLS7e7t39SW3RYliLoVR&#xA;pqAVVQN+2KsnxV2KuxV5p+cH5Y6z50udMk06e1jWC3urK5+tl6wpdy20n1m34I9Zo/qtADxry+0K&#xA;bqvS8VdirsVSnzbpl5qfly/sLOCyubq4j4xQapG0tm7VB4zIu/HbqK0O9DSmKvGvLf5B+bbDVtDv&#xA;Lu7sHjtbq3vLxvUlluIPqup3WoLFBKYY/WMwvAkjsI+h2NcVe94q7FXYq8i/Mn8nvMPmfz/aeYdO&#xA;1CK2tDa29pdmWST1Ilgknd/ShCPHJ6iz0HJlMbDkKnoqnn5P+QNY8oWOprqptEnvpLQR21gztbql&#xA;lYw2Qk+OOI85jAZHFNq0qeuKvQcVdiqG1Sxj1DTLuwk/u7uGSB9yNpEKHcUPftir54j/AOca/Oa6&#xA;aY21GykuLoS2c0M0jOlpbtFZwRz28kdtCHmRLDasSbMKsSCWVfSGKuxV2KvOPOX5a6hqPm3UfMWk&#xA;2mkyS33l650iSK/VuM93JcQSQPchIn9SKOOAjck9BSnRVhWhfkR5ztNZ0O/vJdM5QXFrdazOk00s&#xA;vrWupS6i8lr/AKNbov1lp+DpxUKoH2sVe+Yq7FVG9sbK/tJrK+t47uzuEMdxbToskUiMKMrowKsD&#xA;3BGKvDrP8jfPFrD5Rgg1C0tZNJ06HTtVvre5uQTFHPNJLHHAYxHMsqzUDPxKEV32xVmn5Ofl/rnk&#xA;/T7+PWGshPdfU4o4dOMhhEdhZRWayn1FjPqTejzYU26VPXFXoeKuxVg/nj8v59e81eXNdsls4bjS&#xA;V1CK6up05TtDd2E1tEi0Q80WafmyMwFK98VeQWv/ADjT57i0ZbN73TXkdZbR1mmnm9KGWytLT61F&#xA;L6EbGVPqXKKMqAitx5dTir6XxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVKPN/mBPLnlfVdee&#xA;NZV0y2kumjd2jVhEpahdEmZRt1CN8sVYvD+eX5eNqVxp097Lbz2YuvrU8ltcC2WSwh+sXUSTmMI7&#xA;xw/HxXfj8xiqNT81fLNx5K1nzXZLcSWuixyNcWk8EtrcF0jEsaCOdUb96rpwalDX54qx+L82/NNr&#xA;5gttO1/ypJpthJqNtpU2pCSUxia7MkUTRmSGGOVGmjTeN2ojjlRgVxV6lirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVS3zLoFj5i8v6hoV+XFlqcD21wY&#xA;iFfhIvFuLEMAae2KsQl/I3yNMk8U4upobm8v9QmiaUUaXVLL6hcD4VUhfR+xQ1Db1xVGSflfYr5F&#xA;1jyqmqX92dVjdf0jqM5upo5OCpCwqFQLGY1IVVANN9yTiqJ8y+VNV8x2/liG/lgiXTNQtdU1hY+T&#xA;CWWzQukcNQPgNzxYlqfCOm+KssxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:1B12C47C4D53DE1187EEB95D8195209D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:1C12C47C4D53DE1187EEB95D8195209D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:1A12C47C4D53DE1187EEB95D8195209D</stRef:instanceID>
            <stRef:documentID>uuid:ABBAA6E64C53DE1187EEB95D8195209D</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Keywords/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -340.168 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 340.168 li
504.819 340.168 li
504.819 0 li
cp
clp
[1 0 0 1 0 0 ]ct
489.312 289.5 mo
58.3115 289.5 li
58.3115 0.5 li
489.312 0.5 li
489.312 289.5 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
489.312 289.5 mo
58.3115 289.5 li
58.3115 0.5 li
489.312 0.5 li
489.312 289.5 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
10 ml
57.3916 20.2798 mo
61.7114 20.2798 li
0 0.933333 1 0 cmyk
@
59.6714 20.2798 mo
64.1113 20.2798 li
@
62.0713 20.2798 mo
66.6313 20.2798 li
@
64.5913 20.2798 mo
68.9116 20.2798 li
@
66.8716 19.2598 mo
68.9116 19.2598 li
71.4316 19.3799 li
71.4316 21.4199 li
69.3916 21.4199 li
66.8716 21.2998 li
f
69.3916 20.3999 mo
73.7114 20.3999 li
@
71.6714 20.3999 mo
76.1113 20.3999 li
@
74.0713 20.3999 mo
78.6313 20.3999 li
@
76.5913 20.3999 mo
80.9116 20.3999 li
@
78.8716 20.3999 mo
83.4316 20.3999 li
@
81.3916 19.3799 mo
83.4316 19.3799 li
85.7114 19.5 li
85.7114 21.54 li
83.6714 21.54 li
81.3916 21.4199 li
f
83.6714 20.52 mo
88.1113 20.52 li
@
86.0713 19.5 mo
88.1113 19.5 li
90.6313 19.6201 li
90.6313 21.6602 li
88.5913 21.6602 li
86.0713 21.54 li
f
88.5913 20.6396 mo
92.9116 20.6396 li
@
90.8716 19.6201 mo
92.9116 19.6201 li
95.4316 19.7397 li
95.4316 21.7798 li
93.3916 21.7798 li
90.8716 21.6602 li
f
93.3916 20.7598 mo
97.7114 20.7598 li
@
95.6714 19.7397 mo
97.7114 19.7397 li
100.111 19.8599 li
100.111 21.8999 li
98.0713 21.8999 li
95.6714 21.7798 li
f
98.0713 19.8599 mo
100.111 19.8599 li
102.631 19.98 li
102.631 22.02 li
100.591 22.02 li
98.0713 21.8999 li
f
100.591 19.98 mo
102.631 19.98 li
104.912 20.1001 li
104.912 22.1401 li
102.872 22.1401 li
100.591 22.02 li
f
102.872 21.1201 mo
107.432 21.1201 li
@
105.392 20.1001 mo
107.432 20.1001 li
109.711 20.3398 li
109.711 22.3799 li
107.671 22.3799 li
105.392 22.1401 li
f
107.671 20.3398 mo
109.711 20.3398 li
112.111 20.46 li
112.111 22.5 li
110.071 22.5 li
107.671 22.3799 li
f
110.071 20.46 mo
112.111 20.46 li
114.631 20.5801 li
114.631 22.6201 li
112.591 22.6201 li
110.071 22.5 li
f
112.591 20.5801 mo
114.631 20.5801 li
116.912 20.7002 li
116.912 22.7397 li
114.872 22.7397 li
112.591 22.6201 li
f
114.872 20.7002 mo
116.912 20.7002 li
119.432 20.9399 li
119.432 22.98 li
117.392 22.98 li
114.872 22.7397 li
f
117.392 20.9399 mo
119.432 20.9399 li
121.711 21.0601 li
121.711 23.1001 li
119.671 23.1001 li
117.392 22.98 li
f
119.671 21.0601 mo
121.711 21.0601 li
124.111 21.2998 li
124.111 23.3398 li
122.071 23.3398 li
119.671 23.1001 li
f
122.071 21.2998 mo
124.111 21.2998 li
126.631 21.54 li
126.631 23.5801 li
124.591 23.5801 li
122.071 23.3398 li
f
124.591 21.54 mo
126.631 21.54 li
128.912 21.7798 li
128.912 23.8198 li
126.872 23.8198 li
124.591 23.5801 li
f
126.872 21.7798 mo
128.912 21.7798 li
131.432 22.02 li
131.432 24.0601 li
129.392 24.0601 li
126.872 23.8198 li
f
129.392 22.02 mo
131.432 22.02 li
133.711 22.3799 li
133.711 24.4199 li
131.671 24.4199 li
129.392 24.0601 li
f
131.671 22.3799 mo
133.711 22.3799 li
136.111 22.7397 li
136.111 24.7798 li
134.071 24.7798 li
131.671 24.4199 li
f
134.071 22.7397 mo
136.111 22.7397 li
138.631 22.98 li
138.631 25.02 li
136.591 25.02 li
134.071 24.7798 li
f
136.591 22.98 mo
138.631 22.98 li
140.912 23.3398 li
140.912 25.3799 li
138.872 25.3799 li
136.591 25.02 li
f
138.872 23.3398 mo
140.912 23.3398 li
143.432 23.8198 li
143.432 25.8599 li
141.392 25.8599 li
138.872 25.3799 li
f
141.392 23.8198 mo
143.432 23.8198 li
145.711 24.1797 li
145.711 26.2197 li
143.671 26.2197 li
141.392 25.8599 li
f
143.671 24.1797 mo
145.711 24.1797 li
148.111 24.6602 li
148.111 26.7002 li
146.071 26.7002 li
143.671 26.2197 li
f
146.071 24.6602 mo
148.111 24.6602 li
150.631 25.1401 li
150.631 27.1797 li
148.591 27.1797 li
146.071 26.7002 li
f
148.591 25.1401 mo
150.631 25.1401 li
152.912 25.7397 li
152.912 27.7798 li
150.872 27.7798 li
148.591 27.1797 li
f
150.872 25.7397 mo
152.912 25.7397 li
155.432 26.2197 li
155.432 28.2598 li
153.392 28.2598 li
150.872 27.7798 li
f
153.392 26.2197 mo
155.432 26.2197 li
157.711 26.9399 li
157.711 28.98 li
155.671 28.98 li
153.392 28.2598 li
f
155.671 26.9399 mo
157.711 26.9399 li
160.111 27.54 li
160.111 29.5801 li
158.071 29.5801 li
155.671 28.98 li
f
158.071 27.54 mo
160.111 27.54 li
162.631 28.2598 li
162.631 30.2998 li
160.591 30.2998 li
158.071 29.5801 li
f
160.591 28.2598 mo
162.631 28.2598 li
164.912 28.98 li
164.912 31.02 li
162.872 31.02 li
160.591 30.2998 li
f
162.872 28.98 mo
164.912 28.98 li
167.432 29.7002 li
167.432 31.7397 li
165.392 31.7397 li
162.872 31.02 li
f
165.392 29.7002 mo
167.432 29.7002 li
169.711 30.6602 li
169.711 32.7002 li
167.671 32.7002 li
165.392 31.7397 li
f
167.671 30.6602 mo
169.711 30.6602 li
172.111 31.5 li
172.111 33.54 li
170.071 33.54 li
167.671 32.7002 li
f
170.071 31.5 mo
172.111 31.5 li
174.631 32.46 li
174.631 34.5 li
172.591 34.5 li
170.071 33.54 li
f
172.591 32.46 mo
174.631 32.46 li
176.912 33.4199 li
176.912 35.46 li
174.872 35.46 li
172.591 34.5 li
f
174.872 33.4199 mo
176.912 33.4199 li
179.432 34.5 li
179.432 36.54 li
177.392 36.54 li
174.872 35.46 li
f
177.392 34.5 mo
179.432 34.5 li
181.711 35.7002 li
181.711 37.7397 li
179.671 37.7397 li
177.392 36.54 li
f
179.671 35.7002 mo
181.711 35.7002 li
184.111 36.8999 li
184.111 38.9399 li
182.071 38.9399 li
179.671 37.7397 li
f
182.071 36.8999 mo
184.111 36.8999 li
186.631 38.1001 li
186.631 40.1401 li
184.591 40.1401 li
182.071 38.9399 li
f
184.591 38.1001 mo
186.631 38.1001 li
188.912 39.54 li
188.912 41.5801 li
186.872 41.5801 li
184.591 40.1401 li
f
186.872 39.54 mo
188.912 39.54 li
191.432 40.98 li
191.432 43.02 li
189.392 43.02 li
186.872 41.5801 li
f
189.392 40.98 mo
191.432 40.98 li
193.711 42.4199 li
193.711 44.46 li
191.671 44.46 li
189.392 43.02 li
f
191.671 42.4199 mo
193.711 42.4199 li
196.111 44.1001 li
196.111 46.1401 li
194.071 46.1401 li
191.671 44.46 li
f
194.071 44.1001 mo
196.111 44.1001 li
198.631 45.6602 li
198.631 47.7002 li
196.591 47.7002 li
194.071 46.1401 li
f
196.591 45.6602 mo
198.631 45.6602 li
200.912 47.46 li
200.912 49.5 li
198.872 49.5 li
196.591 47.7002 li
f
198.872 47.46 mo
200.912 47.46 li
203.432 49.2598 li
203.432 51.2998 li
201.392 51.2998 li
198.872 49.5 li
f
201.392 49.2598 mo
203.432 49.2598 li
205.711 51.1797 li
205.711 53.2197 li
203.671 53.2197 li
201.392 51.2998 li
f
203.671 51.1797 mo
205.711 51.1797 li
208.111 53.2197 li
208.111 55.2598 li
206.071 55.2598 li
203.671 53.2197 li
f
206.071 53.2197 mo
208.111 53.2197 li
210.631 55.3799 li
210.631 57.4199 li
208.591 57.4199 li
206.071 55.2598 li
f
208.591 55.3799 mo
210.631 55.3799 li
212.912 57.54 li
212.912 59.5801 li
210.872 59.5801 li
208.591 57.4199 li
f
210.872 57.54 mo
212.912 57.54 li
215.432 59.8198 li
215.432 61.8599 li
213.392 61.8599 li
210.872 59.5801 li
f
213.392 59.8198 mo
215.432 59.8198 li
217.711 62.2197 li
217.711 64.2598 li
215.671 64.2598 li
213.392 61.8599 li
f
215.671 62.2197 mo
217.711 62.2197 li
220.111 64.7397 li
220.111 66.7798 li
218.071 66.7798 li
215.671 64.2598 li
f
218.071 64.7397 mo
220.111 64.7397 li
222.631 67.2598 li
222.631 69.2998 li
220.591 69.2998 li
218.071 66.7798 li
f
220.591 67.2598 mo
222.631 67.2598 li
224.912 70.02 li
224.912 72.0601 li
222.872 72.0601 li
220.591 69.2998 li
f
222.872 70.02 mo
224.912 70.02 li
227.432 72.6602 li
227.432 74.6997 li
225.392 74.6997 li
222.872 72.0601 li
f
225.392 72.6602 mo
227.432 72.6602 li
229.711 75.6602 li
229.711 77.6997 li
227.671 77.6997 li
225.392 74.6997 li
f
227.671 75.6602 mo
229.711 75.6602 li
232.111 78.54 li
232.111 80.5801 li
230.071 80.5801 li
227.671 77.6997 li
f
230.071 78.54 mo
232.111 78.54 li
234.631 81.6602 li
234.631 83.6997 li
232.591 83.6997 li
230.071 80.5801 li
f
232.591 81.6602 mo
234.631 81.6602 li
236.912 84.7798 li
236.912 86.8198 li
234.872 86.8198 li
232.591 83.6997 li
f
234.872 84.7798 mo
236.912 84.7798 li
239.432 88.02 li
239.432 90.0601 li
237.392 90.0601 li
234.872 86.8198 li
f
237.392 88.02 mo
239.432 88.02 li
241.711 91.3799 li
241.711 93.4199 li
239.671 93.4199 li
237.392 90.0601 li
f
239.671 91.3799 mo
241.711 91.3799 li
244.111 94.7397 li
244.111 96.7798 li
242.071 96.7798 li
239.671 93.4199 li
f
242.071 94.7397 mo
244.111 94.7397 li
246.631 98.2197 li
246.631 100.26 li
244.591 100.26 li
242.071 96.7798 li
f
244.591 98.2197 mo
246.631 98.2197 li
248.912 101.82 li
248.912 103.86 li
246.872 103.86 li
244.591 100.26 li
f
246.872 101.82 mo
248.912 101.82 li
251.432 105.42 li
251.432 107.46 li
249.392 107.46 li
246.872 103.86 li
f
249.392 105.42 mo
251.432 105.42 li
253.712 109.14 li
253.712 111.18 li
251.672 111.18 li
249.392 107.46 li
f
251.672 109.14 mo
253.712 109.14 li
256.111 112.86 li
256.111 114.9 li
254.071 114.9 li
251.672 111.18 li
f
254.071 112.86 mo
256.111 112.86 li
258.632 116.7 li
258.632 118.74 li
256.592 118.74 li
254.071 114.9 li
f
256.592 116.7 mo
258.632 116.7 li
260.911 120.66 li
260.911 122.7 li
258.871 122.7 li
256.592 118.74 li
f
258.871 120.66 mo
260.911 120.66 li
263.432 124.5 li
263.432 126.54 li
261.392 126.54 li
258.871 122.7 li
f
261.392 124.5 mo
263.432 124.5 li
265.712 128.46 li
265.712 130.5 li
263.672 130.5 li
261.392 126.54 li
f
263.672 128.46 mo
265.712 128.46 li
268.111 132.42 li
268.111 134.46 li
266.071 134.46 li
263.672 130.5 li
f
266.071 132.42 mo
268.111 132.42 li
270.632 136.38 li
270.632 138.42 li
268.592 138.42 li
266.071 134.46 li
f
268.592 136.38 mo
270.632 136.38 li
272.911 140.46 li
272.911 142.5 li
270.871 142.5 li
268.592 138.42 li
f
270.871 140.46 mo
272.911 140.46 li
275.432 144.54 li
275.432 146.58 li
273.392 146.58 li
270.871 142.5 li
f
273.392 144.54 mo
275.432 144.54 li
277.712 148.5 li
277.712 150.54 li
275.672 150.54 li
273.392 146.58 li
f
275.672 148.5 mo
277.712 148.5 li
280.111 152.58 li
280.111 154.62 li
278.071 154.62 li
275.672 150.54 li
f
278.071 152.58 mo
280.111 152.58 li
282.632 156.54 li
282.632 158.58 li
280.592 158.58 li
278.071 154.62 li
f
280.592 156.54 mo
282.632 156.54 li
284.911 160.5 li
284.911 162.54 li
282.871 162.54 li
280.592 158.58 li
f
282.871 160.5 mo
284.911 160.5 li
287.432 164.46 li
287.432 166.5 li
285.392 166.5 li
282.871 162.54 li
f
285.392 164.46 mo
287.432 164.46 li
289.712 168.3 li
289.712 170.34 li
287.672 170.34 li
285.392 166.5 li
f
287.672 168.3 mo
289.712 168.3 li
292.111 172.26 li
292.111 174.3 li
290.071 174.3 li
287.672 170.34 li
f
290.071 172.26 mo
292.111 172.26 li
294.632 176.1 li
294.632 178.14 li
292.592 178.14 li
290.071 174.3 li
f
292.592 176.1 mo
294.632 176.1 li
296.911 179.82 li
296.911 181.86 li
294.871 181.86 li
292.592 178.14 li
f
294.871 179.82 mo
296.911 179.82 li
299.432 183.54 li
299.432 185.58 li
297.392 185.58 li
294.871 181.86 li
f
297.392 183.54 mo
299.432 183.54 li
301.712 187.14 li
301.712 189.18 li
299.672 189.18 li
297.392 185.58 li
f
299.672 187.14 mo
301.712 187.14 li
304.111 190.74 li
304.111 192.78 li
302.071 192.78 li
299.672 189.18 li
f
302.071 190.74 mo
304.111 190.74 li
306.632 194.22 li
306.632 196.26 li
304.592 196.26 li
302.071 192.78 li
f
304.592 194.22 mo
306.632 194.22 li
308.911 197.58 li
308.911 199.62 li
306.871 199.62 li
304.592 196.26 li
f
306.871 197.58 mo
308.911 197.58 li
311.432 200.939 li
311.432 202.979 li
309.392 202.979 li
306.871 199.62 li
f
309.392 200.939 mo
311.432 200.939 li
313.712 204.18 li
313.712 206.22 li
311.672 206.22 li
309.392 202.979 li
f
311.672 204.18 mo
313.712 204.18 li
316.111 207.3 li
316.111 209.34 li
314.071 209.34 li
311.672 206.22 li
f
314.071 207.3 mo
316.111 207.3 li
318.632 210.42 li
318.632 212.46 li
316.592 212.46 li
314.071 209.34 li
f
316.592 210.42 mo
318.632 210.42 li
320.911 213.3 li
320.911 215.34 li
318.871 215.34 li
316.592 212.46 li
f
318.871 213.3 mo
320.911 213.3 li
323.432 216.3 li
323.432 218.34 li
321.392 218.34 li
318.871 215.34 li
f
321.392 216.3 mo
323.432 216.3 li
325.712 218.939 li
325.712 220.979 li
323.672 220.979 li
321.392 218.34 li
f
323.672 218.939 mo
325.712 218.939 li
328.111 221.7 li
328.111 223.74 li
326.071 223.74 li
323.672 220.979 li
f
326.071 221.7 mo
328.111 221.7 li
330.632 224.22 li
330.632 226.26 li
328.592 226.26 li
326.071 223.74 li
f
328.592 224.22 mo
330.632 224.22 li
332.911 226.86 li
332.911 228.9 li
330.871 228.9 li
328.592 226.26 li
f
330.871 226.86 mo
332.911 226.86 li
335.432 229.14 li
335.432 231.18 li
333.392 231.18 li
330.871 228.9 li
f
333.392 229.14 mo
335.432 229.14 li
337.712 231.42 li
337.712 233.46 li
335.672 233.46 li
333.392 231.18 li
f
335.672 231.42 mo
337.712 231.42 li
340.111 233.58 li
340.111 235.62 li
338.071 235.62 li
335.672 233.46 li
f
338.071 233.58 mo
340.111 233.58 li
342.632 235.74 li
342.632 237.78 li
340.592 237.78 li
338.071 235.62 li
f
340.592 235.74 mo
342.632 235.74 li
344.911 237.78 li
344.911 239.82 li
342.871 239.82 li
340.592 237.78 li
f
342.871 237.78 mo
344.911 237.78 li
347.432 239.7 li
347.432 241.74 li
345.392 241.74 li
342.871 239.82 li
f
345.392 239.7 mo
347.432 239.7 li
349.712 241.5 li
349.712 243.54 li
347.672 243.54 li
345.392 241.74 li
f
347.672 241.5 mo
349.712 241.5 li
352.111 243.3 li
352.111 245.34 li
350.071 245.34 li
347.672 243.54 li
f
350.071 243.3 mo
352.111 243.3 li
354.632 244.86 li
354.632 246.9 li
352.592 246.9 li
350.071 245.34 li
f
352.592 244.86 mo
354.632 244.86 li
356.911 246.54 li
356.911 248.58 li
354.871 248.58 li
352.592 246.9 li
f
354.871 246.54 mo
356.911 246.54 li
359.432 247.979 li
359.432 250.02 li
357.392 250.02 li
354.871 248.58 li
f
357.392 247.979 mo
359.432 247.979 li
361.712 249.42 li
361.712 251.46 li
359.672 251.46 li
357.392 250.02 li
f
359.672 249.42 mo
361.712 249.42 li
364.111 250.86 li
364.111 252.9 li
362.071 252.9 li
359.672 251.46 li
f
362.071 250.86 mo
364.111 250.86 li
366.632 252.06 li
366.632 254.1 li
364.592 254.1 li
362.071 252.9 li
f
364.592 252.06 mo
366.632 252.06 li
368.911 253.26 li
368.911 255.3 li
366.871 255.3 li
364.592 254.1 li
f
366.871 253.26 mo
368.911 253.26 li
371.432 254.46 li
371.432 256.5 li
369.392 256.5 li
366.871 255.3 li
f
369.392 254.46 mo
371.432 254.46 li
373.712 255.54 li
373.712 257.58 li
371.672 257.58 li
369.392 256.5 li
f
371.672 255.54 mo
373.712 255.54 li
376.111 256.5 li
376.111 258.54 li
374.071 258.54 li
371.672 257.58 li
f
374.071 256.5 mo
376.111 256.5 li
378.632 257.46 li
378.632 259.5 li
376.592 259.5 li
374.071 258.54 li
f
376.592 257.46 mo
378.632 257.46 li
380.911 258.3 li
380.911 260.34 li
378.871 260.34 li
376.592 259.5 li
f
378.871 258.3 mo
380.911 258.3 li
383.432 259.26 li
383.432 261.3 li
381.392 261.3 li
378.871 260.34 li
f
381.392 259.26 mo
383.432 259.26 li
385.712 259.979 li
385.712 262.02 li
383.672 262.02 li
381.392 261.3 li
f
383.672 259.979 mo
385.712 259.979 li
388.111 260.7 li
388.111 262.74 li
386.071 262.74 li
383.672 262.02 li
f
386.071 260.7 mo
388.111 260.7 li
390.632 261.42 li
390.632 263.46 li
388.592 263.46 li
386.071 262.74 li
f
388.592 261.42 mo
390.632 261.42 li
392.911 262.14 li
392.911 264.18 li
390.871 264.18 li
388.592 263.46 li
f
390.871 262.14 mo
392.911 262.14 li
395.432 262.74 li
395.432 264.78 li
393.392 264.78 li
390.871 264.18 li
f
393.392 262.74 mo
395.432 262.74 li
397.712 263.22 li
397.712 265.26 li
395.672 265.26 li
393.392 264.78 li
f
395.672 263.22 mo
397.712 263.22 li
400.111 263.82 li
400.111 265.86 li
398.071 265.86 li
395.672 265.26 li
f
398.071 263.82 mo
400.111 263.82 li
402.632 264.3 li
402.632 266.34 li
400.592 266.34 li
398.071 265.86 li
f
400.592 264.3 mo
402.632 264.3 li
404.911 264.78 li
404.911 266.82 li
402.871 266.82 li
400.592 266.34 li
f
402.871 264.78 mo
404.911 264.78 li
407.432 265.14 li
407.432 267.18 li
405.392 267.18 li
402.871 266.82 li
f
405.392 265.14 mo
407.432 265.14 li
409.712 265.62 li
409.712 267.66 li
407.672 267.66 li
405.392 267.18 li
f
407.672 265.62 mo
409.712 265.62 li
412.111 265.979 li
412.111 268.02 li
410.071 268.02 li
407.672 267.66 li
f
410.071 265.979 mo
412.111 265.979 li
414.632 266.22 li
414.632 268.26 li
412.592 268.26 li
410.071 268.02 li
f
412.592 266.22 mo
414.632 266.22 li
416.911 266.58 li
416.911 268.62 li
414.871 268.62 li
412.592 268.26 li
f
414.871 266.58 mo
416.911 266.58 li
419.432 266.939 li
419.432 268.979 li
417.392 268.979 li
414.871 268.62 li
f
417.392 266.939 mo
419.432 266.939 li
421.712 267.18 li
421.712 269.22 li
419.672 269.22 li
417.392 268.979 li
f
419.672 267.18 mo
421.712 267.18 li
424.111 267.42 li
424.111 269.46 li
422.071 269.46 li
419.672 269.22 li
f
422.071 267.42 mo
424.111 267.42 li
426.632 267.66 li
426.632 269.7 li
424.592 269.7 li
422.071 269.46 li
f
424.592 267.66 mo
426.632 267.66 li
428.911 267.9 li
428.911 269.939 li
426.871 269.939 li
424.592 269.7 li
f
426.871 267.9 mo
428.911 267.9 li
431.432 268.14 li
431.432 270.18 li
429.392 270.18 li
426.871 269.939 li
f
429.392 268.14 mo
431.432 268.14 li
433.712 268.26 li
433.712 270.3 li
431.672 270.3 li
429.392 270.18 li
f
431.672 268.26 mo
433.712 268.26 li
436.111 268.38 li
436.111 270.42 li
434.071 270.42 li
431.672 270.3 li
f
434.071 268.38 mo
436.111 268.38 li
438.632 268.5 li
438.632 270.54 li
436.592 270.54 li
434.071 270.42 li
f
436.592 268.5 mo
438.632 268.5 li
440.911 268.62 li
440.911 270.66 li
438.871 270.66 li
436.592 270.54 li
f
438.871 268.62 mo
440.911 268.62 li
443.432 268.86 li
443.432 270.9 li
441.392 270.9 li
438.871 270.66 li
f
441.392 269.88 mo
445.712 269.88 li
@
443.672 268.86 mo
445.712 268.86 li
448.111 268.979 li
448.111 271.02 li
446.071 271.02 li
443.672 270.9 li
f
446.071 268.979 mo
448.111 268.979 li
450.632 269.1 li
450.632 271.14 li
448.592 271.14 li
446.071 271.02 li
f
448.592 269.1 mo
450.632 269.1 li
452.911 269.22 li
452.911 271.26 li
450.871 271.26 li
448.592 271.14 li
f
450.871 270.24 mo
455.432 270.24 li
@
453.392 269.22 mo
455.432 269.22 li
457.712 269.34 li
457.712 271.38 li
455.672 271.38 li
453.392 271.26 li
f
455.672 270.359 mo
460.111 270.359 li
@
458.071 269.34 mo
460.111 269.34 li
462.632 269.46 li
462.632 271.5 li
460.592 271.5 li
458.071 271.38 li
f
460.592 270.479 mo
464.911 270.479 li
@
462.871 269.46 mo
464.911 269.46 li
467.432 269.58 li
467.432 271.62 li
465.392 271.62 li
462.871 271.5 li
f
465.392 270.6 mo
469.712 270.6 li
@
467.672 270.6 mo
472.111 270.6 li
@
470.071 270.6 mo
474.632 270.6 li
@
472.592 270.6 mo
476.911 270.6 li
@
474.871 270.6 mo
479.432 270.6 li
@
477.392 269.58 mo
479.432 269.58 li
481.712 269.7 li
481.712 271.74 li
479.672 271.74 li
477.392 271.62 li
f
479.672 270.72 mo
484.111 270.72 li
@
482.071 270.72 mo
486.632 270.72 li
@
484.592 270.72 mo
488.911 270.72 li
@
58.2314 289.38 mo
64.4717 289.38 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
58.2314 260.7 mo
64.4717 260.7 li
@
58.2314 231.899 mo
64.4717 231.899 li
@
58.2314 202.979 mo
64.4717 202.979 li
@
58.2314 174.18 mo
64.4717 174.18 li
@
58.2314 145.38 mo
64.4717 145.38 li
@
58.2314 116.7 mo
64.4717 116.7 li
@
58.2314 87.8999 mo
64.4717 87.8999 li
@
58.2314 58.98 mo
64.4717 58.98 li
@
58.2314 30.1797 mo
64.4717 30.1797 li
@
58.2314 1.37988 mo
64.4717 1.37988 li
@
58.2314 275.1 mo
61.4717 275.1 li
@
58.2314 246.18 mo
61.4717 246.18 li
@
58.2314 217.38 mo
61.4717 217.38 li
@
58.2314 188.7 mo
61.4717 188.7 li
@
58.2314 159.9 mo
61.4717 159.9 li
@
58.2314 130.98 mo
61.4717 130.98 li
@
58.2314 102.18 mo
61.4717 102.18 li
@
58.2314 73.3799 mo
61.4717 73.3799 li
@
58.2314 44.6997 mo
61.4717 44.6997 li
@
58.2314 15.8999 mo
61.4717 15.8999 li
@
484.231 289.38 mo
490.472 289.38 li
@
484.231 260.7 mo
490.472 260.7 li
@
484.231 231.899 mo
490.472 231.899 li
@
484.231 202.979 mo
490.472 202.979 li
@
484.231 174.18 mo
490.472 174.18 li
@
484.231 145.38 mo
490.472 145.38 li
@
484.231 116.7 mo
490.472 116.7 li
@
484.231 87.8999 mo
490.472 87.8999 li
@
484.231 58.98 mo
490.472 58.98 li
@
484.231 30.1797 mo
490.472 30.1797 li
@
484.231 1.37988 mo
490.472 1.37988 li
@
487.231 275.1 mo
490.472 275.1 li
@
487.231 246.18 mo
490.472 246.18 li
@
487.231 217.38 mo
490.472 217.38 li
@
487.231 188.7 mo
490.472 188.7 li
@
487.231 159.9 mo
490.472 159.9 li
@
487.231 130.98 mo
490.472 130.98 li
@
487.231 102.18 mo
490.472 102.18 li
@
487.231 73.3799 mo
490.472 73.3799 li
@
487.231 44.6997 mo
490.472 44.6997 li
@
487.231 15.8999 mo
490.472 15.8999 li
@
58.3516 283.26 mo
58.3516 289.5 li
@
130.352 283.26 mo
130.352 289.5 li
@
202.352 283.26 mo
202.352 289.5 li
@
274.352 283.26 mo
274.352 289.5 li
@
346.352 283.26 mo
346.352 289.5 li
@
418.352 283.26 mo
418.352 289.5 li
@
490.352 283.26 mo
490.352 289.5 li
@
70.3516 286.26 mo
70.3516 289.5 li
@
82.3516 286.26 mo
82.3516 289.5 li
@
94.3516 286.26 mo
94.3516 289.5 li
@
106.352 286.26 mo
106.352 289.5 li
@
118.352 286.26 mo
118.352 289.5 li
@
142.352 286.26 mo
142.352 289.5 li
@
154.352 286.26 mo
154.352 289.5 li
@
166.352 286.26 mo
166.352 289.5 li
@
178.352 286.26 mo
178.352 289.5 li
@
190.352 286.26 mo
190.352 289.5 li
@
214.352 286.26 mo
214.352 289.5 li
@
226.352 286.26 mo
226.352 289.5 li
@
238.352 286.26 mo
238.352 289.5 li
@
250.352 286.26 mo
250.352 289.5 li
@
262.352 286.26 mo
262.352 289.5 li
@
286.352 286.26 mo
286.352 289.5 li
@
298.352 286.26 mo
298.352 289.5 li
@
310.352 286.26 mo
310.352 289.5 li
@
322.352 286.26 mo
322.352 289.5 li
@
334.352 286.26 mo
334.352 289.5 li
@
358.352 286.26 mo
358.352 289.5 li
@
370.352 286.26 mo
370.352 289.5 li
@
382.352 286.26 mo
382.352 289.5 li
@
394.352 286.26 mo
394.352 289.5 li
@
406.352 286.26 mo
406.352 289.5 li
@
430.352 286.26 mo
430.352 289.5 li
@
442.352 286.26 mo
442.352 289.5 li
@
454.352 286.26 mo
454.352 289.5 li
@
466.352 286.26 mo
466.352 289.5 li
@
478.352 286.26 mo
478.352 289.5 li
@
58.3516 1.25977 mo
58.3516 7.5 li
@
130.352 1.25977 mo
130.352 7.5 li
@
202.352 1.25977 mo
202.352 7.5 li
@
274.352 1.25977 mo
274.352 7.5 li
@
346.352 1.25977 mo
346.352 7.5 li
@
418.352 1.25977 mo
418.352 7.5 li
@
490.352 1.25977 mo
490.352 7.5 li
@
70.3516 1.25977 mo
70.3516 4.5 li
@
82.3516 1.25977 mo
82.3516 4.5 li
@
94.3516 1.25977 mo
94.3516 4.5 li
@
106.352 1.25977 mo
106.352 4.5 li
@
118.352 1.25977 mo
118.352 4.5 li
@
142.352 1.25977 mo
142.352 4.5 li
@
154.352 1.25977 mo
154.352 4.5 li
@
166.352 1.25977 mo
166.352 4.5 li
@
178.352 1.25977 mo
178.352 4.5 li
@
190.352 1.25977 mo
190.352 4.5 li
@
214.352 1.25977 mo
214.352 4.5 li
@
226.352 1.25977 mo
226.352 4.5 li
@
238.352 1.25977 mo
238.352 4.5 li
@
250.352 1.25977 mo
250.352 4.5 li
@
262.352 1.25977 mo
262.352 4.5 li
@
286.352 1.25977 mo
286.352 4.5 li
@
298.352 1.25977 mo
298.352 4.5 li
@
310.352 1.25977 mo
310.352 4.5 li
@
322.352 1.25977 mo
322.352 4.5 li
@
334.352 1.25977 mo
334.352 4.5 li
@
358.352 1.25977 mo
358.352 4.5 li
@
370.352 1.25977 mo
370.352 4.5 li
@
382.352 1.25977 mo
382.352 4.5 li
@
394.352 1.25977 mo
394.352 4.5 li
@
406.352 1.25977 mo
406.352 4.5 li
@
430.352 1.25977 mo
430.352 4.5 li
@
442.352 1.25977 mo
442.352 4.5 li
@
454.352 1.25977 mo
454.352 4.5 li
@
466.352 1.25977 mo
466.352 4.5 li
@
478.352 1.25977 mo
478.352 4.5 li
@
58.3516 1.25977 mo
58.3516 289.5 li
@
490.352 1.25977 mo
490.352 289.5 li
@
58.2314 289.38 mo
490.472 289.38 li
@
58.2314 1.37988 mo
490.472 1.37988 li
@
58.3516 20.0996 mo
58.3516 20.3398 li
0 0.933333 1 0 cmyk
@
60.6313 20.0996 mo
60.6313 20.3398 li
@
63.0317 20.0996 mo
63.0317 20.3398 li
@
65.5518 20.0996 mo
65.5518 20.3398 li
@
67.8315 20.0996 mo
67.8315 20.3398 li
@
70.3516 20.2197 mo
70.3516 20.46 li
@
72.6313 20.2197 mo
72.6313 20.46 li
@
75.0317 20.2197 mo
75.0317 20.46 li
@
77.5518 20.2197 mo
77.5518 20.46 li
@
79.8315 20.2197 mo
79.8315 20.46 li
@
82.3516 20.2197 mo
82.3516 20.46 li
@
84.6313 20.3398 mo
84.6313 20.5801 li
@
87.0317 20.3398 mo
87.0317 20.5801 li
@
89.5518 20.46 mo
89.5518 20.6997 li
@
91.8315 20.46 mo
91.8315 20.6997 li
@
94.3516 20.5801 mo
94.3516 20.8198 li
@
96.6313 20.5801 mo
96.6313 20.8198 li
@
99.0317 20.6997 mo
99.0317 20.9399 li
@
101.552 20.8198 mo
101.552 21.0601 li
@
103.832 20.9399 mo
103.832 21.1797 li
@
106.352 20.9399 mo
106.352 21.1797 li
@
108.631 21.1797 mo
108.631 21.4199 li
@
111.032 21.2998 mo
111.032 21.54 li
@
113.552 21.4199 mo
113.552 21.6597 li
@
115.832 21.54 mo
115.832 21.7798 li
@
118.352 21.7798 mo
118.352 22.02 li
@
120.631 21.8999 mo
120.631 22.1396 li
@
123.032 22.1396 mo
123.032 22.3799 li
@
125.552 22.3799 mo
125.552 22.6201 li
@
127.832 22.6201 mo
127.832 22.8599 li
@
130.352 22.8599 mo
130.352 23.0996 li
@
132.631 23.2197 mo
132.631 23.46 li
@
135.032 23.5801 mo
135.032 23.8198 li
@
137.552 23.8198 mo
137.552 24.0601 li
@
139.832 24.1797 mo
139.832 24.4199 li
@
142.352 24.6597 mo
142.352 24.8999 li
@
144.631 25.02 mo
144.631 25.2598 li
@
147.032 25.5 mo
147.032 25.7397 li
@
149.552 25.98 mo
149.552 26.2197 li
@
151.832 26.5801 mo
151.832 26.8198 li
@
154.352 27.0601 mo
154.352 27.2998 li
@
156.631 27.7798 mo
156.631 28.02 li
@
159.032 28.3799 mo
159.032 28.6201 li
@
161.552 29.0996 mo
161.552 29.3398 li
@
163.832 29.8198 mo
163.832 30.0601 li
@
166.352 30.54 mo
166.352 30.7798 li
@
168.631 31.5 mo
168.631 31.7397 li
@
171.032 32.3398 mo
171.032 32.5801 li
@
173.552 33.2998 mo
173.552 33.54 li
@
175.832 34.2598 mo
175.832 34.5 li
@
178.352 35.3398 mo
178.352 35.5801 li
@
180.631 36.54 mo
180.631 36.7798 li
@
183.032 37.7397 mo
183.032 37.98 li
@
185.552 38.9399 mo
185.552 39.1797 li
@
187.832 40.3799 mo
187.832 40.6201 li
@
190.352 41.8198 mo
190.352 42.0601 li
@
192.631 43.2598 mo
192.631 43.5 li
@
195.032 44.9399 mo
195.032 45.1797 li
@
197.552 46.5 mo
197.552 46.7397 li
@
199.832 48.2998 mo
199.832 48.54 li
@
202.352 50.0996 mo
202.352 50.3398 li
@
204.631 52.02 mo
204.631 52.2598 li
@
207.032 54.0601 mo
207.032 54.2998 li
@
209.552 56.2197 mo
209.552 56.46 li
@
211.832 58.3799 mo
211.832 58.6201 li
@
214.352 60.6597 mo
214.352 60.8999 li
@
216.631 63.0601 mo
216.631 63.2998 li
@
219.032 65.5801 mo
219.032 65.8198 li
@
221.552 68.1001 mo
221.552 68.3398 li
@
223.832 70.8599 mo
223.832 71.1001 li
@
226.352 73.5 mo
226.352 73.7397 li
@
228.631 76.5 mo
228.631 76.7397 li
@
231.032 79.3799 mo
231.032 79.6201 li
@
233.552 82.5 mo
233.552 82.7397 li
@
235.832 85.6201 mo
235.832 85.8599 li
@
238.352 88.8599 mo
238.352 89.1001 li
@
240.631 92.2197 mo
240.631 92.46 li
@
243.032 95.5801 mo
243.032 95.8198 li
@
245.552 99.0601 mo
245.552 99.2998 li
@
247.832 102.66 mo
247.832 102.9 li
@
250.352 106.26 mo
250.352 106.5 li
@
252.632 109.98 mo
252.632 110.22 li
@
255.031 113.7 mo
255.031 113.94 li
@
257.552 117.54 mo
257.552 117.78 li
@
259.831 121.5 mo
259.831 121.74 li
@
262.352 125.34 mo
262.352 125.58 li
@
264.632 129.3 mo
264.632 129.54 li
@
267.031 133.26 mo
267.031 133.5 li
@
269.552 137.22 mo
269.552 137.46 li
@
271.831 141.3 mo
271.831 141.54 li
@
274.352 145.38 mo
274.352 145.62 li
@
276.632 149.34 mo
276.632 149.58 li
@
279.031 153.42 mo
279.031 153.66 li
@
281.552 157.38 mo
281.552 157.62 li
@
283.831 161.34 mo
283.831 161.58 li
@
286.352 165.3 mo
286.352 165.54 li
@
288.632 169.14 mo
288.632 169.38 li
@
291.031 173.1 mo
291.031 173.34 li
@
293.552 176.939 mo
293.552 177.18 li
@
295.831 180.66 mo
295.831 180.899 li
@
298.352 184.38 mo
298.352 184.62 li
@
300.632 187.979 mo
300.632 188.22 li
@
303.031 191.58 mo
303.031 191.82 li
@
305.552 195.06 mo
305.552 195.3 li
@
307.831 198.42 mo
307.831 198.66 li
@
310.352 201.78 mo
310.352 202.02 li
@
312.632 205.02 mo
312.632 205.26 li
@
315.031 208.14 mo
315.031 208.38 li
@
317.552 211.26 mo
317.552 211.5 li
@
319.831 214.14 mo
319.831 214.38 li
@
322.352 217.14 mo
322.352 217.38 li
@
324.632 219.78 mo
324.632 220.02 li
@
327.031 222.54 mo
327.031 222.78 li
@
329.552 225.06 mo
329.552 225.3 li
@
331.831 227.7 mo
331.831 227.939 li
@
334.352 229.979 mo
334.352 230.22 li
@
336.632 232.26 mo
336.632 232.5 li
@
339.031 234.42 mo
339.031 234.66 li
@
341.552 236.58 mo
341.552 236.82 li
@
343.831 238.62 mo
343.831 238.859 li
@
346.352 240.54 mo
346.352 240.78 li
@
348.632 242.34 mo
348.632 242.58 li
@
351.031 244.14 mo
351.031 244.38 li
@
353.552 245.7 mo
353.552 245.939 li
@
355.831 247.38 mo
355.831 247.62 li
@
358.352 248.82 mo
358.352 249.06 li
@
360.632 250.26 mo
360.632 250.5 li
@
363.031 251.7 mo
363.031 251.939 li
@
365.552 252.899 mo
365.552 253.14 li
@
367.831 254.1 mo
367.831 254.34 li
@
370.352 255.3 mo
370.352 255.54 li
@
372.632 256.38 mo
372.632 256.62 li
@
375.031 257.34 mo
375.031 257.58 li
@
377.552 258.3 mo
377.552 258.54 li
@
379.831 259.14 mo
379.831 259.38 li
@
382.352 260.1 mo
382.352 260.34 li
@
384.632 260.82 mo
384.632 261.06 li
@
387.031 261.54 mo
387.031 261.78 li
@
389.552 262.26 mo
389.552 262.5 li
@
391.831 262.979 mo
391.831 263.22 li
@
394.352 263.58 mo
394.352 263.82 li
@
396.632 264.06 mo
396.632 264.3 li
@
399.031 264.66 mo
399.031 264.899 li
@
401.552 265.14 mo
401.552 265.38 li
@
403.831 265.62 mo
403.831 265.859 li
@
406.352 265.979 mo
406.352 266.22 li
@
408.632 266.46 mo
408.632 266.7 li
@
411.031 266.82 mo
411.031 267.06 li
@
413.552 267.06 mo
413.552 267.3 li
@
415.831 267.42 mo
415.831 267.66 li
@
418.352 267.78 mo
418.352 268.02 li
@
420.632 268.02 mo
420.632 268.26 li
@
423.031 268.26 mo
423.031 268.5 li
@
425.552 268.5 mo
425.552 268.74 li
@
427.831 268.74 mo
427.831 268.979 li
@
430.352 268.979 mo
430.352 269.22 li
@
432.632 269.1 mo
432.632 269.34 li
@
435.031 269.22 mo
435.031 269.46 li
@
437.552 269.34 mo
437.552 269.58 li
@
439.831 269.46 mo
439.831 269.7 li
@
442.352 269.7 mo
442.352 269.939 li
@
444.632 269.7 mo
444.632 269.939 li
@
447.031 269.82 mo
447.031 270.06 li
@
449.552 269.939 mo
449.552 270.18 li
@
451.831 270.06 mo
451.831 270.3 li
@
454.352 270.06 mo
454.352 270.3 li
@
456.632 270.18 mo
456.632 270.42 li
@
459.031 270.18 mo
459.031 270.42 li
@
461.552 270.3 mo
461.552 270.54 li
@
463.831 270.3 mo
463.831 270.54 li
@
466.352 270.42 mo
466.352 270.66 li
@
468.632 270.42 mo
468.632 270.66 li
@
471.031 270.42 mo
471.031 270.66 li
@
473.552 270.42 mo
473.552 270.66 li
@
475.831 270.42 mo
475.831 270.66 li
@
478.352 270.42 mo
478.352 270.66 li
@
480.632 270.54 mo
480.632 270.78 li
@
483.031 270.54 mo
483.031 270.78 li
@
485.552 270.54 mo
485.552 270.78 li
@
487.831 270.54 mo
487.831 270.78 li
@
25.4775 259.144 mo
29.8369 259.144 li
29.8369 261.253 li
25.4775 261.253 li
25.4775 259.144 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
f
33.5322 262.093 mo
33.7456 262.783 34.1831 263.128 34.8447 263.128 cv
35.5059 263.128 35.9395 262.783 36.1455 262.093 cv
36.3511 261.402 36.4541 260.406 36.4541 259.104 cv
36.4541 257.74 36.3511 256.729 36.1455 256.073 cv
35.9395 255.417 35.5059 255.089 34.8447 255.089 cv
34.1831 255.089 33.7456 255.417 33.5322 256.073 cv
33.3184 256.729 33.2119 257.74 33.2119 259.104 cv
33.2119 260.406 33.3184 261.402 33.5322 262.093 cv
cp
37.8799 254.776 mo
38.4604 255.792 38.751 257.234 38.751 259.104 cv
38.751 260.975 38.4604 262.414 37.8799 263.425 cv
37.2988 264.436 36.2871 264.94 34.8447 264.94 cv
33.4019 264.94 32.3901 264.436 31.8096 263.425 cv
31.2285 262.414 30.9385 260.975 30.9385 259.104 cv
30.9385 257.234 31.2285 255.792 31.8096 254.776 cv
32.3901 253.761 33.4019 253.253 34.8447 253.253 cv
36.2871 253.253 37.2988 253.761 37.8799 254.776 cv
cp
f
40.3369 262.323 mo
42.7041 262.323 li
42.7041 264.659 li
40.3369 264.659 li
40.3369 262.323 li
cp
f
48.6885 260.479 mo
48.6885 255.601 li
45.8608 260.479 li
48.6885 260.479 li
cp
52.1494 262.222 mo
50.8682 262.222 li
50.8682 264.659 li
48.6885 264.659 li
48.6885 262.222 li
44.2041 262.222 li
44.2041 260.276 li
48.3682 253.401 li
50.8682 253.401 li
50.8682 260.479 li
52.1494 260.479 li
52.1494 262.222 li
cp
f
25.4775 201.543 mo
29.8369 201.543 li
29.8369 203.652 li
25.4775 203.652 li
25.4775 201.543 li
cp
f
33.5322 204.492 mo
33.7456 205.183 34.1831 205.527 34.8447 205.527 cv
35.5059 205.527 35.9395 205.183 36.1455 204.492 cv
36.3511 203.802 36.4541 202.806 36.4541 201.504 cv
36.4541 200.14 36.3511 199.129 36.1455 198.473 cv
35.9395 197.816 35.5059 197.488 34.8447 197.488 cv
34.1831 197.488 33.7456 197.816 33.5322 198.473 cv
33.3184 199.129 33.2119 200.14 33.2119 201.504 cv
33.2119 202.806 33.3184 203.802 33.5322 204.492 cv
cp
37.8799 197.176 mo
38.4604 198.191 38.751 199.634 38.751 201.504 cv
38.751 203.374 38.4604 204.813 37.8799 205.824 cv
37.2988 206.835 36.2871 207.34 34.8447 207.34 cv
33.4019 207.34 32.3901 206.835 31.8096 205.824 cv
31.2285 204.813 30.9385 203.374 30.9385 201.504 cv
30.9385 199.634 31.2285 198.191 31.8096 197.176 cv
32.3901 196.16 33.4019 195.652 34.8447 195.652 cv
36.2871 195.652 37.2988 196.16 37.8799 197.176 cv
cp
f
40.3369 204.723 mo
42.7041 204.723 li
42.7041 207.059 li
40.3369 207.059 li
40.3369 204.723 li
cp
f
44.8057 204.832 mo
45.123 204.077 45.873 203.277 47.0557 202.434 cv
48.0815 201.699 48.7456 201.173 49.0479 200.855 cv
49.5112 200.36 49.7432 199.819 49.7432 199.23 cv
49.7432 198.751 49.6104 198.353 49.3447 198.035 cv
49.0791 197.718 48.6987 197.559 48.2041 197.559 cv
47.5269 197.559 47.0659 197.812 46.8213 198.316 cv
46.6807 198.608 46.5972 199.071 46.5713 199.707 cv
44.4072 199.707 li
44.4434 198.743 44.6182 197.965 44.9312 197.371 cv
45.5254 196.241 46.5811 195.676 48.0986 195.676 cv
49.2979 195.676 50.252 196.008 50.9609 196.672 cv
51.6699 197.336 52.0244 198.215 52.0244 199.309 cv
52.0244 200.147 51.7739 200.892 51.2729 201.543 cv
50.9443 201.976 50.4043 202.457 49.6528 202.988 cv
48.7603 203.621 li
48.2021 204.017 47.8198 204.304 47.6143 204.48 cv
47.4082 204.657 47.2354 204.863 47.0947 205.098 cv
52.04 205.098 li
52.04 207.059 li
44.2822 207.059 li
44.3027 206.246 44.4775 205.504 44.8057 204.832 cv
cp
f
44.644 146.773 mo
44.8574 147.463 45.2949 147.808 45.9565 147.808 cv
46.6177 147.808 47.0513 147.463 47.2573 146.773 cv
47.4629 146.083 47.5659 145.087 47.5659 143.785 cv
47.5659 142.42 47.4629 141.41 47.2573 140.753 cv
47.0513 140.097 46.6177 139.769 45.9565 139.769 cv
45.2949 139.769 44.8574 140.097 44.644 140.753 cv
44.4302 141.41 44.3237 142.42 44.3237 143.785 cv
44.3237 145.087 44.4302 146.083 44.644 146.773 cv
cp
48.9917 139.457 mo
49.5723 140.472 49.8628 141.915 49.8628 143.785 cv
49.8628 145.655 49.5723 147.095 48.9917 148.105 cv
48.4106 149.116 47.3989 149.621 45.9565 149.621 cv
44.5137 149.621 43.502 149.116 42.9214 148.105 cv
42.3403 147.095 42.0503 145.655 42.0503 143.785 cv
42.0503 141.915 42.3403 140.472 42.9214 139.457 cv
43.502 138.441 44.5137 137.933 45.9565 137.933 cv
47.3989 137.933 48.4106 138.441 48.9917 139.457 cv
cp
f
32.8838 89.292 mo
33.0972 89.9824 33.5347 90.3271 34.1963 90.3271 cv
34.8574 90.3271 35.291 89.9824 35.4971 89.292 cv
35.7026 88.6021 35.8057 87.606 35.8057 86.3037 cv
35.8057 84.9395 35.7026 83.9287 35.4971 83.2725 cv
35.291 82.6162 34.8574 82.2881 34.1963 82.2881 cv
33.5347 82.2881 33.0972 82.6162 32.8838 83.2725 cv
32.6699 83.9287 32.5635 84.9395 32.5635 86.3037 cv
32.5635 87.606 32.6699 88.6021 32.8838 89.292 cv
cp
37.2314 81.9756 mo
37.812 82.9912 38.1025 84.4341 38.1025 86.3037 cv
38.1025 88.1738 37.812 89.6138 37.2314 90.624 cv
36.6504 91.6348 35.6387 92.1396 34.1963 92.1396 cv
32.7534 92.1396 31.7417 91.6348 31.1611 90.624 cv
30.5801 89.6138 30.29 88.1738 30.29 86.3037 cv
30.29 84.4341 30.5801 82.9912 31.1611 81.9756 cv
31.7417 80.96 32.7534 80.4521 34.1963 80.4521 cv
35.6387 80.4521 36.6504 80.96 37.2314 81.9756 cv
cp
f
39.6885 89.5225 mo
42.0557 89.5225 li
42.0557 91.8584 li
39.6885 91.8584 li
39.6885 89.5225 li
cp
f
44.1572 89.6318 mo
44.4746 88.877 45.2246 88.0771 46.4072 87.2334 cv
47.4331 86.499 48.0972 85.9731 48.3994 85.6553 cv
48.8628 85.1606 49.0947 84.6191 49.0947 84.0303 cv
49.0947 83.5513 48.9619 83.1528 48.6963 82.835 cv
48.4307 82.5176 48.0503 82.3584 47.5557 82.3584 cv
46.8784 82.3584 46.4175 82.6113 46.1729 83.1162 cv
46.0322 83.4082 45.9487 83.8716 45.9229 84.5068 cv
43.7588 84.5068 li
43.7949 83.5435 43.9697 82.7646 44.2827 82.1709 cv
44.877 81.041 45.9326 80.4756 47.4502 80.4756 cv
48.6494 80.4756 49.6035 80.8076 50.3125 81.4717 cv
51.0215 82.1357 51.376 83.0146 51.376 84.1084 cv
51.376 84.9473 51.1255 85.6919 50.6245 86.3428 cv
50.2959 86.7754 49.7559 87.2568 49.0044 87.7881 cv
48.1118 88.4209 li
47.5537 88.8169 47.1714 89.1035 46.9658 89.2803 cv
46.7598 89.4575 46.5869 89.6631 46.4463 89.8975 cv
51.3916 89.8975 li
51.3916 91.8584 li
43.6338 91.8584 li
43.6543 91.0459 43.8291 90.3037 44.1572 89.6318 cv
cp
f
32.8838 31.6924 mo
33.0972 32.3828 33.5347 32.7275 34.1963 32.7275 cv
34.8574 32.7275 35.291 32.3828 35.4971 31.6924 cv
35.7026 31.0024 35.8057 30.0063 35.8057 28.7041 cv
35.8057 27.3398 35.7026 26.3291 35.4971 25.6729 cv
35.291 25.0166 34.8574 24.6885 34.1963 24.6885 cv
33.5347 24.6885 33.0972 25.0166 32.8838 25.6729 cv
32.6699 26.3291 32.5635 27.3398 32.5635 28.7041 cv
32.5635 30.0063 32.6699 31.0024 32.8838 31.6924 cv
cp
37.2314 24.376 mo
37.812 25.3916 38.1025 26.8345 38.1025 28.7041 cv
38.1025 30.5742 37.812 32.0142 37.2314 33.0244 cv
36.6504 34.0352 35.6387 34.54 34.1963 34.54 cv
32.7534 34.54 31.7417 34.0352 31.1611 33.0244 cv
30.5801 32.0142 30.29 30.5742 30.29 28.7041 cv
30.29 26.8345 30.5801 25.3916 31.1611 24.376 cv
31.7417 23.3604 32.7534 22.8525 34.1963 22.8525 cv
35.6387 22.8525 36.6504 23.3604 37.2314 24.376 cv
cp
f
39.6885 31.9229 mo
42.0557 31.9229 li
42.0557 34.2588 li
39.6885 34.2588 li
39.6885 31.9229 li
cp
f
48.04 30.0791 mo
48.04 25.1997 li
45.2124 30.0791 li
48.04 30.0791 li
cp
51.501 31.8213 mo
50.2197 31.8213 li
50.2197 34.2588 li
48.04 34.2588 li
48.04 31.8213 li
43.5557 31.8213 li
43.5557 29.876 li
47.7197 23.001 li
50.2197 23.001 li
50.2197 30.0791 li
51.501 30.0791 li
51.501 31.8213 li
cp
f
57.604 306.853 mo
57.8174 307.543 58.2549 307.888 58.9165 307.888 cv
59.5776 307.888 60.0112 307.543 60.2173 306.853 cv
60.4229 306.162 60.5259 305.166 60.5259 303.864 cv
60.5259 302.5 60.4229 301.489 60.2173 300.833 cv
60.0112 300.177 59.5776 299.849 58.9165 299.849 cv
58.2549 299.849 57.8174 300.177 57.604 300.833 cv
57.3901 301.489 57.2837 302.5 57.2837 303.864 cv
57.2837 305.166 57.3901 306.162 57.604 306.853 cv
cp
61.9517 299.536 mo
62.5322 300.552 62.8228 301.994 62.8228 303.864 cv
62.8228 305.734 62.5322 307.174 61.9517 308.185 cv
61.3706 309.195 60.3589 309.7 58.9165 309.7 cv
57.4736 309.7 56.4619 309.195 55.8813 308.185 cv
55.3003 307.174 55.0103 305.734 55.0103 303.864 cv
55.0103 301.994 55.3003 300.552 55.8813 299.536 cv
56.4619 298.521 57.4736 298.013 58.9165 298.013 cv
60.3589 298.013 61.3706 298.521 61.9517 299.536 cv
cp
f
125.16 305.942 mo
125.16 306.396 125.232 306.771 125.378 307.067 cv
125.648 307.614 126.139 307.888 126.851 307.888 cv
127.288 307.888 127.668 307.738 127.993 307.438 cv
128.317 307.139 128.48 306.708 128.48 306.146 cv
128.48 305.4 128.179 304.903 127.577 304.653 cv
127.234 304.513 126.694 304.442 125.957 304.442 cv
125.957 302.849 li
126.678 302.838 127.181 302.768 127.467 302.638 cv
127.96 302.419 128.207 301.977 128.207 301.31 cv
128.207 300.877 128.081 300.525 127.829 300.255 cv
127.577 299.984 127.222 299.849 126.765 299.849 cv
126.24 299.849 125.854 300.016 125.608 300.349 cv
125.361 300.682 125.243 301.127 125.253 301.685 cv
123.175 301.685 li
123.196 301.122 123.292 300.588 123.464 300.083 cv
123.646 299.641 123.932 299.231 124.323 298.856 cv
124.614 298.591 124.959 298.388 125.36 298.247 cv
125.761 298.106 126.252 298.036 126.835 298.036 cv
127.917 298.036 128.791 298.316 129.454 298.876 cv
130.117 299.436 130.449 300.188 130.449 301.13 cv
130.449 301.797 130.25 302.359 129.855 302.817 cv
129.605 303.104 129.344 303.299 129.074 303.403 cv
129.277 303.403 129.568 303.578 129.949 303.927 cv
130.516 304.453 130.8 305.172 130.8 306.083 cv
130.8 307.041 130.468 307.884 129.805 308.61 cv
129.142 309.337 128.16 309.7 126.859 309.7 cv
125.256 309.7 124.143 309.177 123.519 308.13 cv
123.191 307.572 123.008 306.844 122.972 305.942 cv
125.16 305.942 li
cp
f
134.542 306.853 mo
134.756 307.543 135.193 307.888 135.855 307.888 cv
136.516 307.888 136.95 307.543 137.156 306.853 cv
137.361 306.162 137.464 305.166 137.464 303.864 cv
137.464 302.5 137.361 301.489 137.156 300.833 cv
136.95 300.177 136.516 299.849 135.855 299.849 cv
135.193 299.849 134.756 300.177 134.542 300.833 cv
134.329 301.489 134.222 302.5 134.222 303.864 cv
134.222 305.166 134.329 306.162 134.542 306.853 cv
cp
138.89 299.536 mo
139.471 300.552 139.761 301.994 139.761 303.864 cv
139.761 305.734 139.471 307.174 138.89 308.185 cv
138.309 309.195 137.297 309.7 135.855 309.7 cv
134.412 309.7 133.4 309.195 132.82 308.185 cv
132.239 307.174 131.949 305.734 131.949 303.864 cv
131.949 301.994 132.239 300.552 132.82 299.536 cv
133.4 298.521 134.412 298.013 135.855 298.013 cv
137.297 298.013 138.309 298.521 138.89 299.536 cv
cp
f
197.777 307.325 mo
198.105 307.711 198.521 307.903 199.027 307.903 cv
199.521 307.903 199.911 307.717 200.195 307.345 cv
200.479 306.973 200.621 306.489 200.621 305.896 cv
200.621 305.234 200.459 304.728 200.136 304.376 cv
199.813 304.024 199.417 303.849 198.949 303.849 cv
198.568 303.849 198.232 303.963 197.941 304.192 cv
197.503 304.531 197.285 305.078 197.285 305.833 cv
197.285 306.442 197.449 306.939 197.777 307.325 cv
cp
200.417 300.942 mo
200.417 300.76 200.347 300.56 200.207 300.341 cv
199.967 299.986 199.605 299.81 199.121 299.81 cv
198.396 299.81 197.881 300.216 197.574 301.028 cv
197.407 301.477 197.292 302.138 197.23 303.013 cv
197.506 302.685 197.826 302.445 198.191 302.294 cv
198.555 302.143 198.972 302.067 199.441 302.067 cv
200.446 302.067 201.27 302.408 201.914 303.091 cv
202.557 303.773 202.878 304.646 202.878 305.708 cv
202.878 306.766 202.563 307.697 201.933 308.505 cv
201.303 309.313 200.324 309.716 198.996 309.716 cv
197.568 309.716 196.516 309.119 195.839 307.927 cv
195.313 306.994 195.05 305.791 195.05 304.317 cv
195.05 303.453 195.086 302.75 195.16 302.208 cv
195.29 301.244 195.542 300.442 195.917 299.802 cv
196.24 299.255 196.664 298.814 197.187 298.481 cv
197.71 298.148 198.336 297.981 199.066 297.981 cv
200.118 297.981 200.957 298.251 201.582 298.79 cv
202.207 299.329 202.558 300.047 202.636 300.942 cv
200.417 300.942 li
cp
f
206.542 306.853 mo
206.756 307.543 207.193 307.888 207.855 307.888 cv
208.516 307.888 208.95 307.543 209.156 306.853 cv
209.361 306.162 209.464 305.166 209.464 303.864 cv
209.464 302.5 209.361 301.489 209.156 300.833 cv
208.95 300.177 208.516 299.849 207.855 299.849 cv
207.193 299.849 206.756 300.177 206.542 300.833 cv
206.329 301.489 206.222 302.5 206.222 303.864 cv
206.222 305.166 206.329 306.162 206.542 306.853 cv
cp
210.89 299.536 mo
211.471 300.552 211.761 301.994 211.761 303.864 cv
211.761 305.734 211.471 307.174 210.89 308.185 cv
210.309 309.195 209.297 309.7 207.855 309.7 cv
206.412 309.7 205.4 309.195 204.82 308.185 cv
204.239 307.174 203.949 305.734 203.949 303.864 cv
203.949 301.994 204.239 300.552 204.82 299.536 cv
205.4 298.521 206.412 298.013 207.855 298.013 cv
209.297 298.013 210.309 298.521 210.89 299.536 cv
cp
f
271.823 303.622 mo
272.328 303.299 272.581 302.739 272.581 301.942 cv
272.581 301.302 272.432 300.794 272.132 300.419 cv
271.832 300.044 271.422 299.856 270.901 299.856 cv
270.521 299.856 270.195 299.963 269.925 300.177 cv
269.498 300.51 269.284 301.075 269.284 301.872 cv
269.284 302.544 269.421 303.048 269.694 303.384 cv
269.968 303.72 270.389 303.888 270.956 303.888 cv
271.264 303.888 271.553 303.799 271.823 303.622 cv
cp
268.077 299.126 mo
268.777 298.373 269.688 297.997 270.808 297.997 cv
272.531 297.997 273.714 298.76 274.354 300.286 cv
274.719 301.15 274.901 302.289 274.901 303.7 cv
274.901 305.07 274.727 306.213 274.378 307.13 cv
273.711 308.875 272.487 309.747 270.706 309.747 cv
269.857 309.747 269.094 309.496 268.417 308.993 cv
267.74 308.49 267.352 307.758 267.253 306.794 cv
269.472 306.794 li
269.523 307.127 269.664 307.398 269.894 307.606 cv
270.123 307.814 270.428 307.919 270.808 307.919 cv
271.542 307.919 272.058 307.513 272.354 306.7 cv
272.516 306.252 272.617 305.599 272.659 304.739 cv
272.456 304.994 272.24 305.189 272.011 305.325 cv
271.594 305.575 271.081 305.7 270.472 305.7 cv
269.57 305.7 268.771 305.389 268.073 304.767 cv
267.375 304.145 267.026 303.247 267.026 302.075 cv
267.026 300.861 267.377 299.879 268.077 299.126 cv
cp
f
278.542 306.853 mo
278.756 307.543 279.193 307.888 279.854 307.888 cv
280.516 307.888 280.949 307.543 281.155 306.853 cv
281.361 306.162 281.464 305.166 281.464 303.864 cv
281.464 302.5 281.361 301.489 281.155 300.833 cv
280.949 300.177 280.516 299.849 279.854 299.849 cv
279.193 299.849 278.756 300.177 278.542 300.833 cv
278.328 301.489 278.222 302.5 278.222 303.864 cv
278.222 305.166 278.328 306.162 278.542 306.853 cv
cp
282.89 299.536 mo
283.471 300.552 283.761 301.994 283.761 303.864 cv
283.761 305.734 283.471 307.174 282.89 308.185 cv
282.309 309.195 281.297 309.7 279.854 309.7 cv
278.412 309.7 277.4 309.195 276.819 308.185 cv
276.238 307.174 275.948 305.734 275.948 303.864 cv
275.948 301.994 276.238 300.552 276.819 299.536 cv
277.4 298.521 278.412 298.013 279.854 298.013 cv
281.297 298.013 282.309 298.521 282.89 299.536 cv
cp
f
335.819 301.606 mo
335.819 300.091 li
336.521 300.06 337.012 300.013 337.292 299.95 cv
337.739 299.852 338.103 299.653 338.383 299.356 cv
338.575 299.153 338.721 298.883 338.819 298.544 cv
338.877 298.341 338.905 298.189 338.905 298.091 cv
340.765 298.091 li
340.765 309.419 li
338.483 309.419 li
338.483 301.606 li
335.819 301.606 li
cp
f
344.632 307.192 mo
344.949 306.438 345.699 305.638 346.882 304.794 cv
347.908 304.06 348.572 303.533 348.874 303.216 cv
349.338 302.721 349.569 302.18 349.569 301.591 cv
349.569 301.111 349.437 300.713 349.171 300.396 cv
348.905 300.078 348.525 299.919 348.03 299.919 cv
347.354 299.919 346.893 300.172 346.647 300.677 cv
346.507 300.969 346.424 301.432 346.397 302.067 cv
344.233 302.067 li
344.27 301.104 344.444 300.325 344.757 299.731 cv
345.352 298.602 346.407 298.036 347.925 298.036 cv
349.124 298.036 350.078 298.368 350.787 299.032 cv
351.496 299.696 351.851 300.575 351.851 301.669 cv
351.851 302.508 351.601 303.252 351.099 303.903 cv
350.771 304.336 350.23 304.817 349.479 305.349 cv
348.587 305.981 li
348.028 306.377 347.646 306.664 347.44 306.841 cv
347.234 307.018 347.062 307.224 346.921 307.458 cv
351.866 307.458 li
351.866 309.419 li
344.108 309.419 li
344.129 308.606 344.304 307.864 344.632 307.192 cv
cp
f
355.601 306.853 mo
355.814 307.543 356.252 307.888 356.913 307.888 cv
357.574 307.888 358.008 307.543 358.214 306.853 cv
358.42 306.162 358.522 305.166 358.522 303.864 cv
358.522 302.5 358.42 301.489 358.214 300.833 cv
358.008 300.177 357.574 299.849 356.913 299.849 cv
356.252 299.849 355.814 300.177 355.601 300.833 cv
355.387 301.489 355.28 302.5 355.28 303.864 cv
355.28 305.166 355.387 306.162 355.601 306.853 cv
cp
359.948 299.536 mo
360.529 300.552 360.819 301.994 360.819 303.864 cv
360.819 305.734 360.529 307.174 359.948 308.185 cv
359.367 309.195 358.355 309.7 356.913 309.7 cv
355.471 309.7 354.459 309.195 353.878 308.185 cv
353.297 307.174 353.007 305.734 353.007 303.864 cv
353.007 301.994 353.297 300.552 353.878 299.536 cv
354.459 298.521 355.471 298.013 356.913 298.013 cv
358.355 298.013 359.367 298.521 359.948 299.536 cv
cp
f
407.819 301.606 mo
407.819 300.091 li
408.521 300.06 409.012 300.013 409.292 299.95 cv
409.739 299.852 410.103 299.653 410.383 299.356 cv
410.575 299.153 410.721 298.883 410.819 298.544 cv
410.877 298.341 410.905 298.189 410.905 298.091 cv
412.765 298.091 li
412.765 309.419 li
410.483 309.419 li
410.483 301.606 li
407.819 301.606 li
cp
f
418.249 306.388 mo
418.337 306.872 418.506 307.246 418.756 307.509 cv
419.005 307.771 419.369 307.903 419.847 307.903 cv
420.397 307.903 420.817 307.709 421.105 307.321 cv
421.394 306.934 421.538 306.445 421.538 305.856 cv
421.538 305.278 421.403 304.79 421.133 304.392 cv
420.862 303.993 420.441 303.794 419.87 303.794 cv
419.6 303.794 419.366 303.828 419.169 303.896 cv
418.82 304.021 418.558 304.252 418.382 304.591 cv
416.386 304.497 li
417.181 298.239 li
423.413 298.239 li
423.413 300.13 li
418.787 300.13 li
418.382 302.606 li
418.725 302.383 418.992 302.234 419.185 302.161 cv
419.508 302.041 419.9 301.981 420.363 301.981 cv
421.3 301.981 422.116 302.297 422.813 302.927 cv
423.51 303.557 423.858 304.474 423.858 305.677 cv
423.858 306.724 423.522 307.658 422.852 308.481 cv
422.181 309.305 421.176 309.716 419.839 309.716 cv
418.762 309.716 417.877 309.427 417.186 308.849 cv
416.493 308.271 416.108 307.45 416.03 306.388 cv
418.249 306.388 li
cp
f
427.601 306.853 mo
427.814 307.543 428.252 307.888 428.913 307.888 cv
429.574 307.888 430.008 307.543 430.214 306.853 cv
430.42 306.162 430.522 305.166 430.522 303.864 cv
430.522 302.5 430.42 301.489 430.214 300.833 cv
430.008 300.177 429.574 299.849 428.913 299.849 cv
428.252 299.849 427.814 300.177 427.601 300.833 cv
427.387 301.489 427.28 302.5 427.28 303.864 cv
427.28 305.166 427.387 306.162 427.601 306.853 cv
cp
431.948 299.536 mo
432.529 300.552 432.819 301.994 432.819 303.864 cv
432.819 305.734 432.529 307.174 431.948 308.185 cv
431.367 309.195 430.355 309.7 428.913 309.7 cv
427.471 309.7 426.459 309.195 425.878 308.185 cv
425.297 307.174 425.007 305.734 425.007 303.864 cv
425.007 301.994 425.297 300.552 425.878 299.536 cv
426.459 298.521 427.471 298.013 428.913 298.013 cv
430.355 298.013 431.367 298.521 431.948 299.536 cv
cp
f
479.819 301.606 mo
479.819 300.091 li
480.521 300.06 481.012 300.013 481.292 299.95 cv
481.739 299.852 482.103 299.653 482.383 299.356 cv
482.575 299.153 482.721 298.883 482.819 298.544 cv
482.877 298.341 482.905 298.189 482.905 298.091 cv
484.765 298.091 li
484.765 309.419 li
482.483 309.419 li
482.483 301.606 li
479.819 301.606 li
cp
f
490.918 302.271 mo
491.171 302.531 491.522 302.661 491.972 302.661 cv
492.426 302.661 492.777 302.531 493.025 302.271 cv
493.273 302.01 493.397 301.674 493.397 301.263 cv
493.397 300.814 493.273 300.465 493.025 300.212 cv
492.777 299.959 492.426 299.833 491.972 299.833 cv
491.522 299.833 491.171 299.959 490.918 300.212 cv
490.665 300.465 490.538 300.814 490.538 301.263 cv
490.538 301.674 490.665 302.01 490.918 302.271 cv
cp
490.776 307.427 mo
491.065 307.734 491.465 307.888 491.976 307.888 cv
492.486 307.888 492.886 307.734 493.175 307.427 cv
493.464 307.119 493.608 306.688 493.608 306.13 cv
493.608 305.552 493.461 305.113 493.167 304.813 cv
492.873 304.514 492.476 304.364 491.976 304.364 cv
491.476 304.364 491.078 304.514 490.784 304.813 cv
490.49 305.113 490.343 305.552 490.343 306.13 cv
490.343 306.688 490.487 307.119 490.776 307.427 cv
cp
488.461 304.552 mo
488.748 304.036 489.169 303.648 489.723 303.388 cv
489.174 303.023 488.817 302.629 488.652 302.204 cv
488.487 301.779 488.405 301.383 488.405 301.013 cv
488.405 300.189 488.716 299.488 489.337 298.907 cv
489.958 298.326 490.835 298.036 491.968 298.036 cv
493.101 298.036 493.978 298.326 494.599 298.907 cv
495.22 299.488 495.53 300.189 495.53 301.013 cv
495.53 301.383 495.448 301.779 495.284 302.204 cv
495.12 302.629 494.765 302.997 494.218 303.31 cv
494.777 303.622 495.199 304.036 495.481 304.552 cv
495.764 305.067 495.905 305.643 495.905 306.278 cv
495.905 307.231 495.552 308.043 494.846 308.712 cv
494.14 309.381 493.152 309.716 491.886 309.716 cv
490.619 309.716 489.659 309.381 489.008 308.712 cv
488.356 308.043 488.03 307.231 488.03 306.278 cv
488.03 305.643 488.174 305.067 488.461 304.552 cv
cp
f
499.601 306.853 mo
499.814 307.543 500.252 307.888 500.913 307.888 cv
501.574 307.888 502.008 307.543 502.214 306.853 cv
502.42 306.162 502.522 305.166 502.522 303.864 cv
502.522 302.5 502.42 301.489 502.214 300.833 cv
502.008 300.177 501.574 299.849 500.913 299.849 cv
500.252 299.849 499.814 300.177 499.601 300.833 cv
499.387 301.489 499.28 302.5 499.28 303.864 cv
499.28 305.166 499.387 306.162 499.601 306.853 cv
cp
503.948 299.536 mo
504.529 300.552 504.819 301.994 504.819 303.864 cv
504.819 305.734 504.529 307.174 503.948 308.185 cv
503.367 309.195 502.355 309.7 500.913 309.7 cv
499.471 309.7 498.459 309.195 497.878 308.185 cv
497.297 307.174 497.007 305.734 497.007 303.864 cv
497.007 301.994 497.297 300.552 497.878 299.536 cv
498.459 298.521 499.471 298.013 500.913 298.013 cv
502.355 298.013 503.367 298.521 503.948 299.536 cv
cp
f
3.82373 161.085 mo
4.02881 160.604 4.34277 160.208 4.76465 159.899 cv
5.12256 159.637 5.49072 159.477 5.86914 159.418 cv
6.24707 159.36 6.86426 159.331 7.7207 159.331 cv
13.3506 159.331 li
13.3506 161.888 li
7.5166 161.888 li
7.00049 161.888 6.58398 161.976 6.26758 162.15 cv
5.82178 162.377 5.59863 162.807 5.59863 163.441 cv
5.59863 164.098 5.82031 164.597 6.26318 164.938 cv
6.70605 165.278 7.33789 165.448 8.15918 165.448 cv
13.3506 165.448 li
13.3506 167.953 li
0.439453 167.953 li
0.439453 165.448 li
5.00977 165.448 li
4.45313 165.086 4.06494 164.667 3.84521 164.192 cv
3.62549 163.717 3.51563 163.216 3.51563 162.691 cv
3.51563 162.102 3.61816 161.566 3.82373 161.085 cv
cp
f
13.3506 157.929 mo
8.49902 154.659 li
3.78809 157.788 li
3.78809 154.721 li
6.56299 153.12 li
3.78809 151.557 li
3.78809 148.577 li
8.45508 151.724 li
13.3506 148.454 li
13.3506 151.574 li
10.4702 153.223 li
13.3506 154.888 li
13.3506 157.929 li
cp
f
0 139.096 mo
0 137.012 li
13.3506 142.055 li
13.3506 144.121 li
0 139.096 li
cp
f
3.82373 125.077 mo
4.02881 124.595 4.34277 124.2 4.76465 123.891 cv
5.12256 123.628 5.49072 123.468 5.86914 123.409 cv
6.24707 123.351 6.86426 123.322 7.7207 123.322 cv
13.3506 123.322 li
13.3506 125.879 li
7.5166 125.879 li
7.00049 125.879 6.58398 125.967 6.26758 126.141 cv
5.82178 126.368 5.59863 126.798 5.59863 127.432 cv
5.59863 128.089 5.82031 128.588 6.26318 128.929 cv
6.70605 129.269 7.33789 129.439 8.15918 129.439 cv
13.3506 129.439 li
13.3506 131.944 li
0.439453 131.944 li
0.439453 129.439 li
5.00977 129.439 li
4.45313 129.077 4.06494 128.659 3.84521 128.183 cv
3.62549 127.708 3.51563 127.208 3.51563 126.682 cv
3.51563 126.093 3.61816 125.558 3.82373 125.077 cv
cp
f
9.72949 121.494 mo
7.43555 121.494 li
7.43555 117.89 li
3.83203 117.89 li
3.83203 115.579 li
7.43555 115.579 li
7.43555 111.975 li
9.72949 111.975 li
9.72949 115.579 li
13.3506 115.579 li
13.3506 117.89 li
9.72949 117.89 li
9.72949 121.494 li
cp
f
250.354 326.958 mo
252.895 326.958 li
252.895 336.538 li
250.354 336.538 li
250.354 326.958 li
cp
252.895 325.815 mo
250.354 325.815 li
250.354 323.504 li
252.895 323.504 li
252.895 325.815 li
cp
f
263.046 327.507 mo
263.673 328.026 263.986 328.886 263.986 330.087 cv
263.986 336.538 li
261.42 336.538 li
261.42 330.711 li
261.42 330.207 261.354 329.82 261.22 329.551 cv
260.975 329.059 260.51 328.813 259.823 328.813 cv
258.979 328.813 258.401 329.173 258.087 329.894 cv
257.924 330.274 257.843 330.761 257.843 331.353 cv
257.843 336.538 li
255.338 336.538 li
255.338 326.976 li
257.764 326.976 li
257.764 328.373 li
258.085 327.881 258.388 327.526 258.674 327.31 cv
259.188 326.923 259.838 326.729 260.626 326.729 cv
261.611 326.729 262.418 326.989 263.046 327.507 cv
cp
f
272.046 330.395 mo
271.999 330.037 271.879 329.715 271.685 329.428 cv
271.402 329.041 270.965 328.848 270.372 328.848 cv
269.526 328.848 268.947 329.267 268.637 330.104 cv
268.472 330.549 268.39 331.139 268.39 331.875 cv
268.39 332.577 268.472 333.141 268.637 333.567 cv
268.936 334.364 269.5 334.763 270.328 334.763 cv
270.915 334.763 271.332 334.604 271.579 334.288 cv
271.825 333.972 271.976 333.562 272.028 333.058 cv
274.586 333.058 li
274.527 333.819 274.252 334.54 273.759 335.22 cv
272.973 336.315 271.809 336.863 270.267 336.863 cv
268.724 336.863 267.589 336.406 266.861 335.492 cv
266.134 334.578 265.771 333.393 265.771 331.937 cv
265.771 330.294 266.172 329.015 266.976 328.101 cv
267.779 327.187 268.888 326.729 270.302 326.729 cv
271.504 326.729 272.487 326.999 273.253 327.538 cv
274.019 328.077 274.472 329.029 274.612 330.395 cv
272.046 330.395 li
cp
f
282.118 326.703 mo
282.54 325.73 282.994 324.907 283.48 324.233 cv
284.104 323.372 li
285.546 323.39 li
284.731 324.878 284.178 326.053 283.885 326.914 cv
283.398 328.355 283.155 329.967 283.155 331.748 cv
283.155 332.896 283.249 333.954 283.437 334.921 cv
283.724 336.403 284.236 337.824 284.975 339.184 cv
285.511 340.168 li
284.025 340.168 li
283.076 338.867 282.353 337.587 281.854 336.327 cv
281.269 334.862 280.976 333.389 280.976 331.906 cv
280.976 330.195 281.356 328.461 282.118 326.703 cv
cp
f
289.457 328.057 mo
289.955 328.057 290.322 327.894 290.561 327.565 cv
290.797 327.238 290.916 326.803 290.916 326.259 cv
290.916 325.716 290.797 325.28 290.561 324.953 cv
290.322 324.626 289.955 324.462 289.457 324.462 cv
288.959 324.462 288.585 324.626 288.336 324.953 cv
288.087 325.28 287.963 325.716 287.963 326.259 cv
287.963 326.803 288.087 327.238 288.336 327.565 cv
288.585 327.894 288.959 328.057 289.457 328.057 cv
cp
292.639 326.259 mo
292.639 327.184 292.357 327.927 291.795 328.488 cv
291.232 329.05 290.453 329.331 289.457 329.331 cv
288.461 329.331 287.682 329.05 287.119 328.488 cv
286.557 327.927 286.275 327.184 286.275 326.259 cv
286.275 325.335 286.557 324.592 287.119 324.03 cv
287.682 323.469 288.461 323.188 289.457 323.188 cv
290.453 323.188 291.232 323.469 291.795 324.03 cv
292.357 324.592 292.639 325.335 292.639 326.259 cv
cp
f
296.868 326.853 mo
297.553 328.435 297.895 330.028 297.895 331.634 cv
297.895 333.397 297.488 335.19 296.675 337.013 cv
296.219 338.032 295.789 338.8 295.385 339.315 cv
294.763 340.168 li
292.911 340.168 li
293.682 338.773 294.219 337.631 294.522 336.74 cv
295.042 335.234 295.302 333.585 295.302 331.792 cv
295.302 330.644 295.208 329.583 295.021 328.61 cv
294.735 327.128 294.225 325.71 293.489 324.356 cv
292.955 323.372 li
294.841 323.372 li
295.73 324.614 296.406 325.774 296.868 326.853 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (shane) ()%%Title: (gwInclination.eps)%%CreationDate: 6/5/09 10:26 AM%AI9_DataStream%Gb!Q;q0qnGY3:97h>u>.B#js\BVC@c$>jLNo0A_tdP@(rXo7WOcEgm4E=sX=65\;0qqSN,q`@5D,[$FE=gheK4$R"FqSUEfIep74%1DY1T>g+'!Gjmr6iHA:W2hQeo,qL;S0o-Y.Gn/bPi><5(J3RN%(jMl:mB+B\ag*Xnp'-FD@60k&(Fa"U:M8\"k^7t0*TuHj1n+F2%b`=fu+,;pZNO?aaBHU(5j3H)@$o8I7Ep`d>39jkR`neHnjc&b-#j0ltip?f/!`\.9'"C!eNE6!D"4/%[X(1XD!?]87kjRYA\HGV,%K!7M[_Sp#EPV;-/_XV<&iP>I0ie])0U-G#I+p%[612KirS_iP!_<5dBS9L::l/^ABZ#'riZVb?q5g&%'+WPRoaVaqWr>T6u-6b!!%iJ]P;=>K0#a)RSJV%*DB%fT3(:%a7)j`L#=27G=,8UAP(Qd+L(6-BFtF2jE6"MIrt#4pTkE!b6R5Y:4JMeRYp6;>JgMPC[2!JCA]%eUJlu<bMCl=FqTdN`NBD.;+7KO$GAJ4+@J+"f@T%?d/e=f(9GD)bP-j-d+smJ/T4=P"mpT!YZ.WK,EX-a"T"ZZ,?,t$LiJ3E#eLD%"8(-oI/#^lUd@YmR:N*W/C0*"[0u#b1El^LKF]Gds!?e,8Q(-E0:.:tQ5\CTiBjBY0]@p:?s9#k$e$i[5;3t!*q]"+=N>+O.6UW/%7SghcX-qH;oXfN3"k]KS!):K[HBMr#7P!u,4J/cge]Gk]iQ_%nh1;o[=agCP+&)M=T+f,<T2+V[!3He3)G%)OB/oKcdVI+$R=%'!%]&/.s'"j/(l<hfdE&h#rW7cf<RQL-4e`+d*RSHA1I+h)JQl(dT&HBLt7g$FY\XH'X2KHY?H;7j]r7>ohf]F0h_uF?6L!F?gr1%tC%?c*qE!Tgl/8U@fG1GHi3"8.*7;uZeTbjs)i3unbHA(;J(8>@tJ%XXs:o?Ul+(pBi<*.39>N)1IFQ6q(j7ai4uU]TdSqTeu`HtGec%G14KNdK_!"NFu7Ne+!iAcHbQRB/W$70#'f-fsG2-UX#YkG9XO`'"T/m^VHIU?'5=hLrS/a0p8[m'XIFh)o%K!T"kYNq.BgWo13^R%rHj-F3)cIZP:;SFEnM<@S3]Z@3<\sC5^pj8Y8fHtFD2eDkW%YF&H);*I[l$T^&dG9B@M4cI"#XsI/n]*6$Nog7mp8%M8L23*=i(`%::=d8mAre#=).i%Go6O9Uq#)ClC;^j=VIcsQ9i!Y3aUQ<NQqf'T*$?cUMF4?IIMoYrU=`\+fK/J*0%TTLWjWL9;r#6A/?)OM%I*M%8X>J[8Ibfbq*,])#jHjd`3HCa]N=GN3t?Hr,6%k5!IkQ*:`Gu$+6iO;7K!ieEn#jl:@Gs;UBu/b!gCoWfNg'6+Lh\DeD,H.q0tb@%&+g10hA;"FkC\VE_`8rATGci?r+Gg1\i]]:HTYH<s6@fE-Xa#5!Heq`Bi+ipN)h\dKJ-$g-=E?9BNUFOk1BW2m/SLoYb@H3[.cB?%gX1t=)>qghX#i^B;V"=lJ8p+,r=UtsIJZS%4a$dbRU@^)@B9@E:3SP!A,'hdofkRcH`P,+3rZ%3qYqlqQMSdJiuk@M;uYtH0X^,[%&.$R,@#3Jna+&JA!*T;Z7/?jkPV,0!r\'k&s22`^0cKcb\,0Vub(Nn@iJcP#3[=6nILV%(?ZlX?K))&3_D*AU:9[<=?+^(Wp6T-0%RY;@R_l^cnq_aB0Q`ZDFT5KV#mBEHBJ*]#Sc[WM\^m3uY;i>70Vb7The-@'g.49#2<Q97^$g)p!oU=7Z]Ji*f8cS>&+&#Q3BbA@;%AZ$&JTj?bNmO6+a+"&/s=;QOI?@KU*oS9KP;r'9^3Nq2ZYQs$LWTC-2lVpb%BEQ512eE88B4F,-%$jY2ae^)3]H@aZ=f7=ISr>dR%`gt)0DDWqWe"mPT1E'_<O39nr59#>'OFSLfl"I4V1fnh^<m.K6VR'A7k/2ZZF;/fHUiY+T!VmPLnS3a*='E4d(nLK.4718hc5tc$%_p92i_-e/DLSBSb@MS`Tcs'9.c>I:ERIp-C6MF)j1n4U#0Wb8?F$B@%67`OsC>P>\QD<DLi*7hre";1cjQ5<,95?h*YS62L%@kn^%#4i^+Gu7,=:>'r`6XVO;jhTQ'4'cO?$;lj=E`YWq>mqKU8d?IJ'6[tZrb""Rr;c)QT2K\K"YG[fpsj+>!smK=3MJ0no?Ll$l[X!,%qZH$lqk3+`ZOgS#5%`O;:):3XAJb#\5*1PCN/M]_F'O_J],#N&Z?&%DZW:03PLXbC6T0]8YT.;T5?rBC_pNH!8*MmV!#Q\C]efIh%FZp&U`cNPOh$NGXhK7TroSjp/)7c7i235.7;/.prB-Tc]ObTrpJ5C?B9/_TI!d>d9BUXo#%@5.N]s(%hLcR1Z^8Kd@cnHF_H7uEk%RfQLi_u(KfS#&VZr![4Di)"lMQ;$HDTS:>b8k6HZe>%!Oi-a744%N-!,_I/7p7&*;l'tFIs54klOQW&bL2ne=AeSVl5qFRa%R[-/%TS"e'#C/ZtaEUB+\`=&@GEVjJCYUT-QR(qg][IrhX+_L;P,$J$%ZS5c?E-B9J=EV/,r@IN0<J<,A?@b4+<d4)_2(alE`,sORVcV-%kaQ<[H>C4*[MW5TffUg^&^<fS`9Bql8(\?Xb*#,Q8$)7?8Q.0\Ja4lt5![<fcL)ceEBa:.%Q/[UUjl_\_AF2LSk]o>,Z52BH4U^X%lEIMDZ9bC^Oj-F91_5Y`gK&pNqr-f;1MeL&`qbMuU?G^;?=u*VBs#AOb<g6&1`Q,eQs5H$e!hni<!mT1@.oeZ*3*"fNdnnR\3%5*%#6[_QrYh<`Hoa&"q.$]=pICZ)U#IV(?+ErtNRK(6!jfke6C('M4+ouM&nNin"L6Qc<pa4Da`+OR4'<=Y,8O$%SYa/pkjT?p*AG)7%<"DO=Jt_RBYg>Hs''io2YWbUUiP6;d>]>3ISb8jq&/H$U7gT(D-4;Tbldc/_hOammX<p)7%KU!^-51Y27ZUdceiGJ>)\\7LHQ-jW%SbIahR)hNpe9AWOS+g!D(SC:Pc<;DWAi?91%-=2%d92$^A2%!7[DW@]/(u+:)k\'>1]JBW0:!i.6:&GK**o[D-@?9_X*nOASQR%L%DD\UMe?!SX\C>B<)f3B-c5XWQ\%kR_/F?juAZl8u``ciseN#0%1S&S5>U^c'G4(lLHn5KFF_G,C1hmTX+"W/=PE'7;8ju-RgVrum%[>9JB>N0c@h;ND0Z1'ab<Pk.CQdaFj*;EkPVCZ.f`BmO[WPnO:GduLS;Ol$@9XmPh&Ffk4d')^3hq1%bYg?:"Uh(0-!!u/dg%o@a%j&nbUBXSpTi7=I4nKUcSBE5$FC$-M`A]s%1l2NFRUKTfK"[a1tnChQ;/im6"%`*I/%GI=3U9uWGJ9c]`B>1THXr>?2d7!a7)p!np%Y^nmf"M3p'8N.f[U5qD-T7p<\)p!od2K/u%D.)\"Rn9\?Rt"*Z<Wa.,=C^P((=lb"U8Ph*)]J7*8Ph1o3u>7XUg\`+EC2FCP.]/i%OMmjQ8L_qBJW4:6;M.7ark[pf`PS-$$8eQk=)\#Wb4hlke)_B/duopBM-PsdDRV%R<BkR5e(IW&cYN+tkL6U*8pWnd#3,0K-=K8N%23hui,X7Mpe@B1b>"uqm"6c<6_s#e(nT3X\54(Ap49X"+j/Z!?4"lZ0;P+WS\`aBH4b[;l]JpOA.ja..Q+\b^/u!!XqMXM\4(%[?%@Yq]f\CkQfOC8pDn)@uA3Qdr+L&K]Ri,"N]e@:=PSNWsajtbB\1B1LfY%LP*K4\PZcLd"QYijKNWnr4.r8L/mSVfXsQc8FFI.Sj%%b`/On7BY?LIK_LDiCYXjO7)Vs,L='@?2S*U]2W60n`34<meZ`*f.)IBbaFW=WRpM$O8,/</]-O51$Dr#hK&Y6iC:s&hqM55ilCA5%4?puK*`=*UY@ZZCrkrR$nU=a0Z1[#@l'^^@U'!ei'])%2VVnZ<hdX!#FlbuIn"X,DF?#CnGj+d$%X7Ku)sEQ5Z"n::/)!0Ic+3Z1%5lNP6*lo*Z[pidMnn7C9&&1kc^!7/dCD\IJeA!9S//.9dkJO(heF;k<T-(Vi4J@&YAX0;TO+3l$^?iu;([l;N-[2cIgna*N#LXD9%One\t4cIE+M[r!1moA&V:Pr.#p58$k4.s$lB+Vi@R=8mQLibo^Z574n-of;/if14mK#bGa>H",7hNri9fE1\<oiX8u`!b&'_!,/)%3Q6+O?P1u8`!mWL&c@Eg9:giaiHbRuPf`t#KFg&d]7-;Z?OnfIOj<3rkR'Gs+Vt/CGXGFAMSm\\&#rM!G9A-%ikJ7W9/R$h&1kLf%`4/=?$;C2F$"Pff+BL]&9Og-Xl-kjqpZ3@Z8O[#Pmj]Es>Q@\$>S5mo'nGtSD]mINMI8/?^=YoT/e/Y0;;k+Amc@Wkmm-Cf;Yr%g%3hE+Zd(R+VXVBNX>jJH"bVbE,(V(=%KAOqn?QTfp48l)*_u&+Z;3>Cs)Dcg=;2HSgiH[l[YfCJJUKQk,I0-\p?QaE7E\I(sV!N&e%g2,\"++6*bZh+"ED)?BTIti7t&KB"!d!>Uu+?rT7kuF^"32q+):K#5";@`Fm+MI?'`=\SPc=8<m:RN(mF>?1,RQY@:%s"fDjiXMo%>u))ZQTP1TmXhYYn705l@8=#(eP1',HB2^Q_O#65<9c6:ro.<L%l/c,qEto`;MV!*H9'S@B9BTmL>G?Y;JY6#ofM#m`kKrrM<=9:%QFhId?\jDso)ut^\p^j1+$Ut48a1kJIO(`X<SG<qSpng`>)-g_$k>4X@W5<us0r;aeb(B`0Kerh\t9n;e`6><?bp<!G0ir1""2Jh%SOQAS+Nu5B(IJ4LbKt<_o,Uj^C9()6WT,]MaYuCs?5J1bq9umuo^`7]0ciH"fDXfB]0FRuhp74C@G35("?np_+kO;mIV/%PeW*a(%>X(4'VZE[eU8VR&$;N67nQ8=FJ3I<d9>-tTA!m?9+JXtXR#dk&Fl4=iT%qS(jsT]%3u-]Q4ONrKQTq"@4Z4Yt2rVX8kO!(9IXG.o%s0c%SPi4hZIcNV0RQ9:q'\bh'(MX0D\W[%2;R*Cm.IMWZr'rQl&9%H^,[-e*Jur>tB^tp?%.&bE5UJ)Pk\71;bYAM_iH65#blpsJ%`EKAV&l2.T+*n:Ko')c;kcKcE4$Pc=_Q^58eaXMQS.5GEls2O_DcA?,f^@L2N^%\-PrR[K>Ce@Bl<3m`#+.B>Ad7)@)&r2`c4jC#%iRY^f@3QQdR>4PBJ6kW.Kk?mfL/6:^D1t7V_X\>=ghB<<a$R`aY5L1-6'P=+P9Dsi'GXYoLifWEOgmZ*=qXt,pl+d`#ss3k1lt7!%#1+,N-RX`PRjg33$3didK!5nV9]^jskZ%aSVD1M(Z,Rp*VH0,KSJ1c42<.A1V1]82PI*=F4LnKlcp[_0\==1K;*-F@fsS7M6IuYV%\#psOGG)6@g8Gl[:Khn:;6/3=Lm5ceXNKI?C\okS1HEW2O[MZg.BSc#W]qdKUDejrZ[g,>V,aOpk\X@8MlF#1;G5EYOk#RpgC04J%BM-g7</4[T@9V8V740N9M)27j"nc0n<6#^IM`U83Mp_037^ZEQ$oO0B%$_Jp_M7&4,U8T.+sK/oZ?B5BaC&^88EHN=TcOs&)4CXq%9iHf/AnHi[7+0_e_>q]&,:$CK(&CR$^XCQ?E#8KR%fDg:o3O12ak_>lej*>?S*;8Y>jJON&[O%cj)C@@jYkIWbUX70am.T..^kZq%J+eP0\,rM=LPe3ZKoUt.Jqsd+X!A;g=>F+u8DsrDJcis>N(nm-9._fA5j7BX2I0%r:S-i\NrM+#8*^.lK*#_;i,C'@k=iN&$@YC$%[Bna=aX,gcjDH<hgK\f&*L?j#LfaIq,\E8.RCoK.nYqF"M*^gFop`QCj;Te-_9pe8UDU3:Ki+5GV*qO"5O%"\jPhiU2oYC!s.)V%%(TY2LF1(m\&1:u0DV[P=`RS@V6bg3o#LiB>=BR_=Xk+'6.gHnsaD2#O/0;QS*Rorgf8F6OfQ[U/F6U.V`S3M!n8,cT10k5IguMp8%[8>L4BncMI]+U%Zp[,ie>DSesN8:*K^@eft-^j^Rr2)]4_M-M7#`#\0dAokH=>D5ss3o+Wn14<b9^sq"4-LLdo9je6W*OZU?\-6a%A=,rdE*m>PUfiWR!4*2ol9Z?_0sV<.'r6;oPWsiCK=YUbfJj1'bSCr6)9L1S!RRd(^rf!'s0^6=+_^FZ:b.&#o`O3#4-M4]+6+GN%3F:\^XrP.%PJ)/8??D)>ai6q.g\:$na).IXr3TSeI/T3b!msUTc2gMYEP7nas-SeH\G5d_586bSeN;qhNYAqs:P20"k<usa5L3[q%ZCie1j%I&#?TkuAf9a`DZ0:Ms%od&2*]*>Y<O]foCYbDi7b6`B\>LFq086SG="9:\\(e3"]nSf`L26UWMZ=%M)^"@49u0NH>Q0CN%]@7'X,(N8Xa!1d`,*u-\:MR<?XS=3VpWZiuPV1(O3t#C#cL*a.14rUiHW#2Q!6`D9Q^7>FY$(1BK76D<\a6FKM>@5F5h`j0#12Ep%ci`4HcFt&EeB,gJi)B`D[gjP.>*R_s[[TFjon8/I)&F54S:%CVhmq<Tk7KC=N>V13b6)H.+iQP/',V4'E[4CEbUeKK0O+,3-&L:p%]f_][ZlZsj-fg;Gh<:NBG4ZE!^sW#c/6VU&7OMY"p;@+iO0=!W72r:TJo$tp^%m!O$gA>s91CmJ'uN!/:c<IlrM*%`/`Asb'Q@du%(ggtM3uo(]%jtL_T:S@0C[h$-osqlTQ&BAC61<8W36cO?nPodB)2Sba/u/6C(&nD9IBt=*r5&[nA#XVV9h@<*r(U^#pV4V0O%T.&%RsGW;;Nf(df'^Y__i89pe)6ut6*uKZ)e1X0YYJR!5lX!<'F1tF3XR6f_g:qd_RO'WF`F([O5Gr^/MPSC*L5@&jL+d1.XjA4V;UuT%Q&B3pc_XrXjO8fU3&CBprW*KdGn==N0(3h_H57".AB61sWAcmL-!.Xs:#n/hHqSj;*l%H%INcQIBf\jVJAp%:+@(4_(#(*C&Ns&F%o/d/Ir9;B'T(N<Q"5$\U>bX=W%'u52+GPG"#4Yg]kVjc5Vb*NK&_jEh3L,7Q^I"&96i#,sq#L-Zo-@jE=-)$u=ctX#%HG9R!LWDq%p!do;KMYSFIeVHMne<Q/aX<-O(^N@:<jBR)7u>+d_ZbOFg!nRF#^%!C@161ip*\;%LM&;SMANgm<qb-Y)i'?g0R^4IVF5Vu3"m@U%L!.?hR1^MIG^bLA%XZO@C@A$^O5=qN6cZq^]"mCC>`7J1Z[/qJ+tdjHN&ra&%':kHe;ePk`QuHRBKS-[(I0r:oW+cae-ChY%&VD8%Skjc)mP_H?do&-q1t+qNP%9F#nPN5$+!*@,qZ8FI\*ml=jWKQZ/2'ZP]\i$oV_/&KF0=%SG%losXK%Aaj"(p'Mn7u&je"1Q##[Gq%$b9=M,%dkd^lK4_XdG8-Pb_%Qj@ZOZ4F-OdN5"JqTTON>'Eq57*Oo)>KdOX%&tXYS=R5DA-[V;Mh1N7Y1guCn,R4&dcgj1?I6>$A%UgKi;>:mg&Sq`+]quXG,<%l)YUGO:;SWKDZg$g!D3^Igsr#o/d4=*u?.5p.r'Rc%%AZkaJp'IV\g1A%O+")^%Sct5"$bZDfc_p&X%,ptg's,%C5<S>'I*,a\TqHa"iSr\b7s3R=<^X#]pgh:_Yd\/^K!PK#Qnktg.a@id=4,le))L(!GM'_l5/#I>G#BGUVH\(?u7>/%8%bN&j$/68iq7W*kY))Ze,2m50eQ\LF+l9PGq9C2^?%B^V1@[:0*6(^raU<=Wh_%QGW^6@WnaPl$m0K_u>A9krA-S6t2Xn\BuGEm;d%GMfV;:.0#CS4e=E>TSdA`^NgJc_A4cg^cTTI/YRpN^XolJ\T\7$glp7im#A-%fEMn4Um*n<%\aH\."S?0*%ui)opUi:G1qWhj1p5%mONB)XBo&R,5?h;!"@Z0UFDOA4jWpf>#Z-9kI_=lbdH6ulcN#+S?,1014+;cB5.-5o)0Hn!l2P0MOeATV<fhL-@if-X9dlu?$lgh%T05N7#hl&,EO(\>.#+q>:'muG#f3M(pB:^3#"@?U.?PXEc,Pr5Z?M)5i.U]+ZDD(=if"OHJd:QBhI'jSZp!`)Lu);q8Tlkpea&Ph%pgB>%G%VoFC69/>54dfe`&A8WALk)oGuUg8$fZ3QT6B3Af2mr:F*5YD-^<8r=<.ng@+rbaJV576I(sVJbp.b>eEIFhfL<Q(8FLFV%VFVu1O^>"KXb>9`[>s]_9:bhB6%0e5-73EZ`e`j=m.(2LoT7_7f+B7ISY;m!6MY;I:9=5?6-*?FP\4Of5/69P#P!$r)s!cp4BUiu%Pr>lo7jqkc!dN(2BpAYsDIe[Urq3RAme)HV)mh*^)s'P[0a`n4bN#Tqk'XlEdC:oUXj\Ir*6-87qp=b_\SH[6b`KLm9=j0TeWQmq%QVVba!Oi48.(r[Hnu]M:hqtpuZnYn?9Re6\.6Y`cmN7I18Io_$k8?r'&)Q<dna'(Ses:$T4UO\9>_[15:XC$gIm!B>BYs_@JA,B8%hh2486*ui6H9BY%HXD]l''7(F*ZG([?+'9c?2,HNMRE'-hr<Sdm6L%m'_B(0_%ci&"7G1q,,DeOa*-?pmj>m1W_sG`bL_iCoaG$7%S'gkp1deLI`q_?70>I#kDm`X[kZ?6Pc^8YO-A%SXOSSR9Yh=gq4?G"[89&(DpVQO0]\7$=#9</R2L\Ij-OQNRKm9pg4Y>!?hEksh%;X--Bj)=!K+gtC"G^>_k5H^>u2>'I_m-EpET"sig#n]TGdN5#'r3FEkE!oAP:10Vt+r!3hIRHNsciJB4PO@U#h&<[X'b:db0[[L;%1\M#()0GEoQrRAB/+)qTYR6E"<8AjMZJTfOmd[t;4UH9/ILl@mN*55/e&rVk5_[?Qk<5^cjtHRdOWIUNeag7=YR2g#%s9[aRHEVV%_8DuM$p3@i?.CDF\.ee=3^WTR1eFY3K2V/Xn9iZp#I-jroF2_,S.821%pufobX]*,6@K_gYF`KT]5,s9(EI?-)6T*g-dtshnAXr7%52S%XWEoggRI4i%.:.h%Z<KG;.YSoWT-/7=6U^An"&AWnFjADg`ISgb]i.th(57c5IF:jgUl2Foa$[_je:A"*+Q37>XB&kc!.S;L%b4\3AlDSZoS)uoIRaY)XG021QNMk^!BYPnW/\n+hSl0KL0SD6&XOM*P@d7:5L@\=F"=f[#=sJg";@4.(PM,j!^bI-DT*"W(G;(s9%F#Cm[mjeVJ_b9OTot_3V@G:+XPNl007S#\tG!T=:,0D=J^6bOmiLoP-q1M%e%kr57&M4_qLTe.H)o\!-5j9JS"J[R\7#<-Jmq4,#%f^84q.!]$C5"^:\c[fVl-sS788]PIoN;o)=cJ<3\_A,pR^5WIUmrNV.>+rj=e%'P770E$9@&#-Yj^MDF'<J,9F:4Y-<*).\b#tZU%/7hH;UX7!Eh\56I9SR:pNcqe`jCRsdm9Fib=7-@[?7i*'9P_O;Isns%DdBP-C'h.f6d,)HT5E>^I95<".tQZKVXdp'G;5X^HXHC/%GbFV-<CB&ZC\=jE]hqF.5mlcANS<Adm9AlOAbk.4<(J0aQZMc[hp_Bsh>0OIl$N5K#IdFb]NK=*g@W@MI%G]VC+G]!Y29E/V3AQl%-SQuSZi.uIUAS'l^5_S1:^c);qG,#@\'7-?@H1qaf.64_c<P9Om<4fDVrfR<is=6=O-)f!DG3PfX"$sA[>%XnL9;`I^UL)_6REuL%1#O0[T`E2?g+E9OdK&;$;*@U\%qlD:L@RWOWtq),f/0;r"a'$_hqVOe%@jq[bdkN]eT_#k24-?>S\LhBSV`Q#+!EXWB*#j6;0Mc1%*F\-u!g*WcC5MnWY+.:UAPQX;")6mbX<hnZS`'^#9RpLbF96'sX-3ROXHujVU,R$$d?b)!c;Ea8r'3ec2?Q[;#/ap#qh!g--Uh"O%V36tN9u*E*!U6I'.f82A\XNH3Y<Rg0FUfPMRh'/MC_X4E3oQS1DiSLoT:dq5<I%]mP$_;]VSU!O/dPNK&un=3kQ(X\HsLDKFi@FN%eL\hpXncoEM;JipeEpqjf?*;$lUW5WYqts?bKcp@R9PnXlWe[mpahBc95?bnA'.AXl-S_U*D.u9ft47`FD^1oLrt!A50[(DcAC#l%nck,FokdO>$Y%cn,S"bqaOjZac+IW?"]a8Z%U*5?EHfhKNbloI\mSPJ>-(4=H;-I@Xgpu2&VqCW2]EU^Cc8L0(Ma-&[B[+*Fb&47%DN=AN<aC)/pk7\ThKL(jHnI"Ob4WZ$1H,$'nUHA!Bh^MdO_A)EU(1uNhqSaRn7nEb9,h0\YP&0&<eBL4FB;:>I.B)26;mb#^\6FO%OH9%YGk_:Rq3_?T-R$uKX["6,*Y4dsFX'R*E8_=tI4]a>(Df6J:@ZJZCZR5Ai.O=1/b?rBAGN-DGa%P05FBKMnrsNXDhKd1O0>?b%TnqmOiH>A[5Gp-kj\sSBr#1/WmiPt>@$PK<Jenqd=,=EFQq7)$MqH'T"lFHE_(@9iE5eI5g!tG(cR8L@n0Esb:]U_l3iGiB8paBR%\EEHW\sj)Q0$gl3j<BedSDK%?ku75W1k0d[MGN5A92+Ns4k?6`:G<UakW2NGq/68J\mX)oWBjt,SihV(Hp(AU0qY'h>(B2Kb!_su%W>V^HMhJUQj5-Xta%ZN#7@^P\ZL_.0E=-A,<e3rtFc76!qPEs#N[th)B]AdI)uM7J^tXo=/^p'^lc%%)SS:+`(/%Zb_GmCN8!e@R%>K9cU.L^*(2kB34b<'(8mQ$hPK7/RtE%/QEeDXH]/j-t.O9sCgQac"#/CBkT+!2>^nR#+\*f,6\iBE.Vpb$8tA]3/Jd=eK<k\`4u%3A[Q$9_n2B<b7/G)\ogC:tAS4L**?$IeiC;QtaIudA`Hs=cW?7.Bpd/8_^/(^li'8o1R0UBC+1<F#8;B#QUaLWPOhU:.8*YZ-h+<%;Iuk3ZGa1-Ilhi2R4oA&_Sd\g<2PT/.rWG7!]2f`I[nj@H@"LTGiHbb)UnNISTXhBB@!b<VMplnAQ5OWMmc]JRWn?:3n*<Q.jMc/%DQ#-M&/Q_^T?(<%`misZb/)W)8R$m9cepU+A^XIXAA4EgNZ_986+tmEs"'aa>l^blRDZ.FCH\8=`(V7??6)t<=oZ$rR$M'-6qp=H%Z:t5-'VdC*\/,C8haRJ+n6/(noh7%:o:[V^lqb6T1L^.HA"'C5!\m+_T3;EM68,bG+Ln4&D77bc9UT5$<6k(lVU4p)T*rl6k93,k%n3R"lebne-'3(iQF`qNBoX5_gNt>6FS'ok+F#W-c-;;a5GAm6E3@`MTZ`]q?'_l4[[b]4\mnFMo&nPCQ>!>!rbH&tXLZ5;*b4Kfo%^.(fTr*jL.\.L]L0OlRfmH`Y.3n(.2DuQ82'Qd"L(W<cS*>2$[S>`sc0:BDiZu`H&CBr,;I!,H/KhMT'6$%0nid4mhgL+"SO4//u%>MoB<8!rO:d]]-SNgYgK(h1X51>[nSBm@Ae4?nKm6Rl$M"ZqNdf_'85Lk'2_@;poRe"jqSbZbG>eEb86=!!4_lS<Uc;6TFHE)K9"%""o+@`97PHfhf>1r!f$N.m;AWnB?ZUVQRhjQ<%npmc.6aPWud^f+Cs&7;D/Io-2b6DEt(X6,Ao0j+E-KFVQUl%,Q9$lV;="DZ5n"%1nOb3q=1omE__%slF9TWl:YN!o$ik34,_*%m4%6"1$EZ@O,EEUc,3Ml'-StLZ1,<?C^qq%1O1IF4e9gW=0ImVm]"Y3Q/sd;AtJ#S%\#[QPm+$OKg>qMhUfKWC>gT+oQrf'T*XK\b-I7D>AN$mcQoqL!1fEkU&G9bsnqiWE;D(Mf=IhHMqD)T/.NI>hSkBrbVl/C`_WcJL%pJfOB4n$-MRLf!:Dc_PXK$\h;5J>-phe=2$UHcH)!Aj<@U0S+n4Fd,Io8<lenoXdk%K-\JoV[bR%H4/tP2<$Km+)-;=L[hfp@"R=%%k1:9%p\rR(`1FR2L)_GQNpRoqV*+9l^-eHH9coD^;'*nH!QbL[&<M@\p`sbo@[o_(Hr?KT6'hneTH<LT,O6H4P(W->d'_Cp$(a)%jn65]?17!V6"Ahug?6f=q`F)tR@3McVQBQ)a@Ts+Q(r9Y]pQrhUS'0_ij>O"\[$2MCF?26=M21g"n1<`]!C.1\\-8&(&Y*5f:N4J%W7D0Xd)/XaH7b>PrW$Z$=i=+t*4\U64CC2GYX46gZqC0S<S/?^L?YiO7!Jq_YhY(KrT=$.o;!<K]\#65P#H>^OGE9(Hn6jm\jn\D%jLe9oNVZu*R3%0&+]G7sQkuo!QjSUVPr.Gqg+$;9e&OBTVI`iQS8#MrIoMf0_>o1)U2p#ZXBoG7jcNT[Y9_S1o8$B7FnUPtg-7bb%<1*e?-_oEhQ*!ftd+W)RVU<FSF/B3%-_hQE>./,3@)<VZ-GeE0CW<_kaqR>*AL;!B<YU[`1558>XdOKf.T7e-d'g?.XQrkE#\"7]%*rUdSic<SYKm.Z!d#EGeb_)t'b6HgNec'P%h?(,gnWrY,B=acEh@=i6q<?m:Z@;:E!QKUhU_m7@b(q]Xh#JI&"S"]h%$A7iq'!8N%N!=4An^KN&ma:W2^iFX:nj(RO1c+as>PbE5@%WL-%>o&uc_84kY=irqC_)Wj\]FX=h]bJJ,nd64b@F4_iZI(reT`#\Z3]O2nZRn'%S#bU&JB5r[bj@n"5\&.l1pCLl8dgN-9UDpo$7,7M^28Cma)L0Eq%5hJ?He+,k_.B@'H%shK'4:JT2NB-;,L$k+G7(h5?D3o=$$3@%L0Tp@g3:QflEp7Fgggf?5FmQRXU!DUj3R-s([LoNG_,5cY(r[0)-[BB4n2`,bC9JVi<N(8;jITl4*+nU\8@VFW\!;MoD;qIZ;eG6%1e(["PjKH9.N<*Y9^`SDP'>K)G@@UtLR#/eY3.N!dCZ!u94::F:g1&F4V%5?hKUQUV:S.=+i2VB=KW\)TSto]9.s@>96lV;&&Ngf%aeYt'G9sbNY0l%5q5EqR2N9p^WRWqBRW]I1<;gjI?Id*E(bubX)0FTAC9'lEe$R8AN*8YoUQ<6ZG+)O^+;58aH7=S+*_%$%)EVR9%NUX22<[YL.;h"O2C/OQDgF;80jaAnRV6:W/#niODYTQsP5MI;M-Nuu1-3p%)E`;qHlQ"E(D2^RB;26^5,:Z52I2OR>V13GkYnO]O%FSQ#BGJZmBgS+*Ylig6!Rpm>-K+$8[2BlMW5[#NOZK0N=M.GBpQ[_W!di01KHRVgZ^.U;08XZ3h9\1TKmG#1JYI3\BatOlPGXRaP%BjJr]Z,M/plW&dUal2*\It&*3c(cZ_fE]9;?.R/Mm>J%\.=#;U=/tiD#jD?(Y<t+.Z?Y`jm6T3_%QiA;b$u=\CO0r*88#^;k/pZB%bEfdKZ+d,7ZBi\m[S(Gm]#.,mc(6m=AnLY(2c>Y#p7O.BVqk3[>*$+s`c,Mt)]G&mGRS:&Xq`oq8t/>kWiRVp&*6r+ep%ZKTV_Oj%c\cF]m;O!GCjN0ZdBCK4(mU^.mWFeuD6Qj&G&rX+\NFr6]"ooec*_&2f`uVO@nVGtb)N[^1kJ;'1(2V]R#Mn$h.3q3dg73e8lS[=%Gl^!Yk[Vf<FL#f:bC[fNA.V?.W)H[pTcMs*9eL9s.Of8[)3X_.g*FEV;qp0gE\dnH8WBaW_cu!5I@(ESYRETI(!5Fk8>n*\J7<$,%OSc3KaT6qc*H/OG2f7GTlMAA$jURbP0.tdW_,``e'?QHK543R``U:dF^jpeXdLFY&@\)gA>EaP<R1K#Ld>!'1f(WQlBm5B&/pm(;%#q@I6K<f*bbBQf9FTWW[1%p!+A(A7V]6(1ti+<i>X'>^^PE2fA0ob'")%uos"VV(*(<&10ZKH!#/mIo/BbE\JCH&p-4[4?-3]BaU%>GO3tkKI?(F74(;j<X(Mk^6qd8*=!<V;mW"^JVV#0i\V@d[kB?"#8!N!:?08CUBC$pe=J[5oWG6UWJHQPcj7<Bs$qHDB$DKmXs$^%iKh'=j"X+Ho0''qOg%<!Z^Q%UjL&d.N@)NlocD+G9g8l#@HXV*(O@Ru=)OLek0Ir$]T!+UX=_,_S+O.0!4*U%U7:V[;iGk)cs`I0%9O_/'SbQggO:o`/nX+L"o6CGlo,F?&%o)A0B0GOeQ40;QcMJ8/q&[tlfruuA2dZ`F7I5sLai:FRXcOC+X%t>j5F,UBBWJ)`/>bO=%O)I0%m6YgqC",:c6tbZpLo@uMF7t8_hLs1/o,b0nV\%>F&8j=]CA%n[N80reQ]r&iY8mhSO0"gi[SFJ#=j8jQbkLnVJr#2J9iVhb%Vo)55T.:u-:[r,-RsQuu$jdaiHgk^,+8p)br<Su]b^@l0Sh"[G+@0JlmZCBJ/.n<U]8lhoRRc+Am,)^Kd:g&u6t^_)G.XB[=%&s'%\oj<M#0Ya,1*;9cB'W(<@4.#u$<jcY8<6W4fFj,%!=RhE?[&Hlm_K,IB<E<D9Gc.N\)]i!d[[D%J`"\r!b.WY=Z#hHh<a0<o@"6H%_>N9fNB5iV#:T)_6,9(I=\D7,aDE13BT#Psk9COo$8iGQm_#a"@m4p,6ZVI0![>']f$A(`%-$&rFuI"j-,.tJl,t`K$[5hF_%kOi%#u'l!lXrRMbg,e,F=u(E/-)rGF"RXC6\D/iB<h?Y;d.[Rm!b;r?:+nBKfdOgpU'^e7`F=m9?5V"BK[0S*i=!t_<iuslK1EX,Wr$N%Kp[eWm)rGMO^RJsBQKk.=-A?:e70>mYlKmOc#btG;'d-Geenk*=BH56g5'i^T+$P/)NZj$>sKmJ/urCECUG(M\F'!cj=O)-6k;2r%\^g*s(^_r][eRBlnac",e*0;q%oUN4D%&)R`"](B995t!P%d,5FCOMf//DqH-eHSoqiCT[oOb,10t>"k4TFn\]f*0CjK/DQrT^9r%U0fh4]n++f[Z,O6`pDcMc#s;u4UE]CF8XUPQq<*2#Y-EUhZA^d-WI?F6u3-?PnpeF>fr"aF$OKU+<:fen0>]mik7@0]7ODI9ir97%GD-['2Q_SViSI?>STP+,Tjh]Y)ER0k3be8uHOZNg"eAZ$i$L='eeN;\C;K:Qkc?;u*:EdTcrjGsl)ForY+`2)TQ@X;;aY2'6&/3Z%m%K0Z)@oh4m@f9[\q5sd_X15gB3dfYj0A87FP6i=jqVJa>-r-l#2[!*./UW=87n:H`pnH4_<l?rCSP3nM#)9W=kboBF!B+_VAJHq%Z,p-ho0'gBa8Dad7X?gjfbdMRq/$n""`,G][!R09`.C([%n3_g/*H9.0>)28fN,S$1M=Blk*;!CdU3h7),'+"G'(Wr3IAL&0h;^g%c.S]5$E,jB$6kIXZbmo(V>]c*8S:Pm`C-1QbqaBB:>N!'G13%9gak0.cS)nBN9+M-qR2B4Q*e!PD6'ES>&O]]A$N41/ksqM6QdhS%RR*D:2^G7`Jd'`,ja_Np7b"Q^.@#rPI9,Oh_>8riZ06=D^0t^=:slYkFJBII>fUKdKQ6tE?DQt"'ChGRFgaJR(bhgYqINh2d<7TP%57-quITdI'3icXl#PPg;%OX06j0S`,JaIN%rNbYoA+Ij/R^=h':!5*6c:p^4#c25QGT`7H)0i"DD"V0+B\aR$%I3^8f&%B*gn9[G%D,#u"0kb<H0sTkO5F//6I$e!4CdLfWX6cdiQSkh0NAP7]'s_g(Yt*PLA(nk>Hu:q-[*1(Cn^s-8LsO5t!_,<%:%OYdol>@s@7EM)%32Vt%/QV^\c0/K**SFQ53:&3i%&mNj`Lb11,.RR2_=9-'?l9`&eO$EFeXe\H$!AaeAIfZ&7a0IHjs=p2a8UC-Qu=_Ebhc;:`-2sI%WP^3+WE=Z@7/>Pn]f;1%?$+!<33p,u.TWPdZE3_].t&b6Ub*!J,rnl//<HWO*V5.:=q>EaNrbBuG1.4!4D(UkV:Y-S[4\fW37\@H%=&8Zu*3BOg'm@#Z?sR?6WCXUHA6@-c;+APl,_!(&bc8P*?:JP_l#[k5E>Bb_^YNnLShG1')?)$E>I135PE@k8CBqJD;EM@MO\tiI%egqc[kIY88[!)t`2:(\bUL[obdiJ/*co04k:oX\_^Y9e@-Mtq^Oh+hHhBj*XP<;'/bds#32N)X,D?O10D"!TVG%E'Y:L1T`T,Y6Q%/C/).W(B+`AZ\`:fNDlY=h*17OufOU[$.iM);.b&>2$I]+Z\BV199(h]!/Vj9QtTpXBKRK?/9+*)6"u_CNe%i=kD3'F.?g<nG352%W4:.N,?:NcgH2D?3$3Hga4::8COIC"Rck`,^[J^oH8t.ObaPp6cLl/2I",u(H8taMk^D(#m;t\FG!4WL'<6DZLI47Nk7P5,*fg(c%:t,#egXa:,:IE7YJ,?@'UO78"'&.IjS;j]Tm%GJ\kSNe\hk'/m-u1Q$D&o!8fli!C="bn()j'GCOh+<sS&^h<c9rRG8Sg?ZDg*k<%LJGqQ8]\;]XA/uShVj01FGo<VUf$,+6tb*iH\mW"h+U$8^YYaA=sh2[kFM.q[iC-eXZT_&AmL4f)2-0"5P.RO]i7C*/KMG.oJ3[5%o9!PBa%V7sl/coCE`-1"%eRGi@JDh:bL_7V*NNU^DtT"OlnAi>.UWhUpoPKlNqn,brG,T6a/gF=m3cMsI1;/]Ab]FRCgfSq_h,,#%TsW@%R]&cjha^-#bO6K&;?='$<M[A,m\(hi4c&L#,.2K2&[\EEY9F_.fu\.FojYAD.^E(nlLJZ<MH'JFJL6`%oQ,FoJ671UFji]I%n;B=VDpU0H;r0AP@5"g<9ArSCfNq50?p(mk7$"d=>Em!mouheWiHE@Jg+J*6CgFSg.@ffF7.'e7;@5q=.dXh_c7D1lF+"8T:HP^E%p\eW\_C+^OM9Wa?YE-^Fp\$m1=E#UbO0-/[BHr':M.o1B^-`=X?"cGX]\2G![MlgjNnE(&YrK;pX8EAd3g,D\ib"`P2D'O%N`)_Z%S,p3eDN1E[ZQ/h8$Sp`acQD]:PBb^'7[EjrC&XE9Vd%+^f&87B,Nng?_ngW)GSXu$daRr@!<+H,!2cY:5.l]"cBC7:8hhJ]pCd;_%4%cd4jV_3Z"UfM#:82"[G'Nc6+OaD\'!P'0nGHs#m.OgjFTudH@kB1sd'_RS9SGiYWV3AqZ.k]S],>P4'OIhWaqS0^rFo;jjjR8_%l&+:80ofYA/HJ4?9e/p1`GY0sb`Q%^?.<La@<Wi;_PU!EZ$+hT@1)J`F%7mAmq0OVD6%-T,Jfmaq>0SPASS`9c[@[`ka4*<Yu'n#%mEUqFn7/<CXf1X;,O'ganmD/M]9PT$Z%^47(`f2)?M'W/]0DRe5r"Ii/kbKZ$/5:oeH_i6.`k&G:^^<:maiMjeOQi/XYHGkO/QaP%J<R[pT![pd)S98NAc4&t_jN#rTaGS\P?OUM:facH]1J$+Nu[h^.QcH3[p^&tnBnSEX!+AN2m_X.inAI%QC#[p3S1a<9B8e$B6*I1%c*Ous79Y&iJ8M.;3(g1GQJ2',a4VOfdrjQkV]BuhG6-O29^h,oFPGqd2QN^MXTR'(gqKfQBXMsSn&+Ki9h3A5;T?n?eTA0%\fE7B%2qZ,.4__ZR24[JoqV(3t<R]>dXo1T-`mo1<7D6APH';u(g-,s#=73&VN`JfNgDS[32'"9pUAZ_"5-!j\\TW,g]!#j0Msjp<Z'p\R%9;ap7\rUSeg8'^SJ$7CE1m.E;2Vu-9Nn/[ipI=,@NG:LXs%uQZm8Qem,dm>@i@V(ob[\hE<mto]Z)t(kN25C@eFm0B\#mY.X/;Yo%YT/"nVP=_g[FKW+VP=`Bm(JjJ[Td3#"2An7*NbW&^O"_LRZ:E4VVN-C7l;<hQ;0ZZls<CV;hjGCXM%T^fr3uc6T#mdQHnJR^>0TU%BAVVf/HBqfMg_`70l.V]\TE.qgs'92nB&,JOJ7Y]hcE;]aYLH[lFo=&ke`p_f%t5D0iCG5qE"/HNPNE&#o&_@JV%Ud1L2E(8@DcS%XkVqqZ6u)3dcldlNI#o_HD2FUYjsI`H5bEV]p_PGm>?_*pH1Xk:'m.peeXZ6@MUc7k\c$A2>T1Sg@&;"$ct?Bk0Dc"SD2[<[X68i%74";6698?."LgReN%_csYsIP'TWqd\>ARPcB.'I!^A2n9VAVg\Msfr].M]%f\W^gd2E;"YRMFi.D?G[$2K/5YX'':XFV\VhCKnc]%l]3HFVPUpefCI.#[a&=^qc(k$dL5<j>Z\/d5&9pUruMO3et2h_fW$V^5K%!>.LdjsfZPGDRVD%_Dom0?fKqdM=ARE`Rne(tDaTr[%pV:gWn.lfikYFQ'pNIOU\^/`$9q/&Sef8LDN9q+h23j6:S[Uos(":K[45?=Qfl"s]XHF-c>t6$3U@[2QQ,;i_Fs1>\$Yq>3@+Q4G%.\A+97S`tCD*:PHs!f-:<`j5RiL.aaO;MWrA2l;fRB#h)i7FsV`dP$+5m3.tI/4N+!2dN,C!B9*oF1E[7\RH59mM)t_%=nWH`Pf3%S!k*JCbk]#5IN0_>$q)MinlV`-lB]s][^mWU9ducVo_)&L//M%gFE.bM&Td>UDk?,Ka\pgnA<i$D^]/cr3!.qYrN5:]&?DdYGC&q%\(*/hgi0b$^"&V-E+]cBUH@o;;>F<&m-1C[28dK.9mM)b9/=->DW=bp5OE<d9<rWdjMj.6Xh!mXBZsne^Z!K+=3]\IQ+[lTiStj=%X&o1P[@MsDRT`gKrPI:66'n#qYd"Ja<'K`DYkI1F<o(LSGHN2PRqB!?hhV8Sp/"j!WQ5=8XOgqIl'Qr:N]^K4HkXr8N9PedqKC#;%SnWC;hgHZj0RVM5Y=77DB)Z3V9c.95LoEPhXgPOBf\/)-6UdBUANS9mV@3-RSI]3BU[l6%RbCLK;gYZO]5PHeKS?"@MjT_jKoM*#%B_9U*0lIaC8en=6]4F[E!lI>aU^ISSQU5rA>[fKCHo)9@dCG00CL$HA?`%1FTRO4RqEhf.7G+&?Okh#s8RqTY)RiB_6W2Fpj>J`O%iV^^Lblu;&"a@`LZ+E8"Suo$UocEMJndAC-Wb8@N=*=-j&[<@NnWV/?#)2mNN-.c>HEFOKUVgAb&g(>sVp[\sWsGj!69a0T'_7A)%4N?'EaV0_^U_ODQQZVu+h9JL9[!F]e)]#>7>?l8oSSF7`UoB+WSFiu.MXY(^IeTgW9)<(8_3TB6hr6of7nf=+@Olq&A*S#+pTTc[%@X=p?<nH,\Op"^#Q.UJH$7q"gL&RgYkegL#`2*+q^h[,B2IF/(e07#J0r3aVP;.(?S?<8rGIsHTV9`2-Iq)6;K@STQ9j92JVT8AG%=5Su$JAtR&pFUB1rEuX5VKDW=2IW&QBJ(sf1VH7OM&H+#%8AARq?n*JV@:.6a#c#p_e6)_hCj"U'ViBsKSQJI\j-Q_jaeqb7Y\OI%/G$e_g2(DECbd,]>u#U%g%!S[q(\q\q73H[=5[n*8Ba_iIdN"<<BsXl[F%hgZbe'Qa7aV^lFCSSYY(C;[?4$qGk=MQCig]bAsVW>%Ak/mQ$Gc:@T%q%0D;>LmHk+_n4\^(=\aA(Ai[./Rf86:\:!.^cX`XH<Zqrs>WYEfB:V>Y2YrJYHQ/jZkNRbV@nC4[fr>6gJbG83[%flL55-+hou(-,Lhh71.G26I(/Io"TcDl#V`npmUNm%,;G/+)<-NM+U3>LjaBf6YWaZMs3(BceFjKf+C(lc%GX=s,Qk;d+A8A%G#P%?#H[GRdD*EXkR[D_fWH>^=L@`d_Ri*_4p1^3GCFgcLl;uAR1[Qm#%+76Q3;B<X*si6?@[M]`+r>qKTr#-/L:Z9TGSWOsQF[mnBul%8G8q\c@O]])qS2o$f3_n=BQnZrJN$d0`B:JNG+gra`(!hLJgC>^SdB<lFq=N?4+2@s(UaL4R'K)hMgDGXIJs.+r7F,QaXKVK%Sf#%IlGd-gA?<b2j2pn`qXss/8@f$:bHRC%b:*T9bj>W)F47XmO\daCb.a2YA0Ge=BfrbWs0./rq9?BqYi:O!@1F=DG^RN?,L+'(Yc5&%:hM8T.nnt`=L0(&j[MC)A(t#bC:_?X#1-1VAZCbrDU]o^aBMUERZ!udQ0@ol-$]p$dR?qN?cok*NGMg+b,;p)l^tbQO-Weus.t,/%De.VCV0p]0fs;b`R9n$kFqQaG!H3lhq.Np@rEm][GsClV0'0EdJ)q0,nnGB::oJ^4`C-Z*>?dr?-F`j=j4dE"?GF0QEp`8K:qPQL%Veqm:Y\B$E[a][&XKt6X)QU".p!['?mT.)>^C@$Sf?ZK.A@`E2n6S>C*l>D_R=-#hdsM%0=n9l4qH9F!+Ym+\h<S^KP%tU&qFQrW%B'EQ3IbF6t5O50an#tO7?9da[rO09<KQ=8gFbAm*<&_SDO4m=Z?T$a#?9d`hB-uMfenW6Cq2oC]&J=^'FK_>07#,r2p2I4-orWZ^%IY#Z6?9dbPY/r-VNUQP8SXNGpp"T:+^-0uYgV;@dRL8?Y4l#@9]qIc_khbQ15O60h8k&#Gp\N8r<9.9^FLO&BIBT:5(`[h%T6sCJ%lgba;YFi3YF6MbhD=@.mmaER-KX=A*rE__S"4u7aeEu_te'r:RDY5f5kA&1erN$_^hoN7l]mc8Wm1rmr548*MhAtJ25/&&Oih=&H%DtggJqQ549=*)aWos<L!2Eu&jftDjcOh=Zb^AGTmf!kMCV^cQ>q$`%*5PP"Wml0Q.&SuftTCo=845@lc_''8gqtP@6R#Z3fhd5a2%>J$30nb!+H]mcGU`M`;]]A;dc.(7LXlDISim<Gh,@U@PgrO/[tgH<\7[BU20os5!H?@K_:IkUQmmA')lrOm[Rl<\\Jf2&)Lo5=3f%me,?$bSB5G^[6s<Q!=2DpEPm68fQAE=l&@UnWgG?me&C+@lOlNb[Of5lXtXmacKHTnm4Peo!mmENS1L\8pTf`b+8"ogMC0+mCdre%a(;d2DjSq*jLp#n(?)KcjBZu5T64P?lm2"DYFfr'X?%TpG-@P2XaZLZCo_p]XF_QDL=sV\IWf4gh<ssbp8%[g5Ki?G%IWnqSfH<\%ESA.Yc['WIOV6HL$lc(!HIP8lBjNKbps=FjMEa`47&5+#8F<-W9[hs:IILQI[]&e-dGU"-pZ>R6m(Hmajb4\\EZk]<'9Gk[&nJ:P%It@r,KXnbA^6L2_nQ^bCHLaTrW\<LUDNT#95NgX\O?7U/hd=<B0d3drW^`kdNi+X',lMB%7o'AmlI+k<M)UQLa#>/ae@\!s\pl'O%\nCLi$T[!/Zi8^>s7GWLfq8#^YM,Y;9O>G4Id``lXS1'>\fQlLbE7_5?+]Ip[bHLdn,"j5I5PmF:-N9@VsJHlDL+J;3Ig*NQk#u*%2fnV6id7^"mK1MGKfAUM1p4a$n"(6Vo<VE6jaSjh\@DIe-udUmAf6^kb:mDk?=_36dn?QcFnmne&'mT6eQ9bsn,tDVYi.3>BpncK%"k&7NB@nL_<;+=rmc*X0iq*'ZNlnC'eKNn#61q(B`No7ak3?D:QgUhS5YCbVHLeg0FCgHaB_1Q`#fOjVlpS@*h-\_7['iRY?+l#S%r5\5\`_k`+P]o'Tj`AapZ^Qn$O"Z0:;B-%Tl(o)Of8m[t=Tl[^JQNAlk/18.afp<e##$UMF7"3%OMg8;4jrCl@5ri0Xa.<glKgn'%i@OD:!5k4FdF*IBpF[CfqMTo8Zl@,R\4ROP0$^dF\#mhY7<lQU,\-'p0mRli0>*ku<_uH"r*uBF%;W>OOt#:8iEtG,1$Dr#hFb2u%QJPN;%X2@6M6O4*-DfSFDj#r>r.MS'V&s4lS_k!Kj,`,TL_+qQ9UP)/%tAbL&4U2AhgXcTM]jD[Mu(drTX!htr(I:@:\<27RpQ0:%,!$c1E=bNfnOKLTmpb&G>[otSZCfg6\n_f:Y*";?RE<)3^e[-B\@]lcG]K0rFNaBC7q(u)BDOu@^^q#C8(B9g_5.[MPV(Jt3XREg%O<&3F^&/Z6.??duSan>N5Ze.b$*d,-(+bHuMGWKo:JRY?I<-pGY6,D0GK.M'FBjTWq;hl!M\k4\EugR.H9qY\\Rs3$j4Rc#$N7nR%HV_s=>,F!97kkRcB`@MZBe,"2E]tYCW215p\M1am"N-4fmSYb'Hcr!7G=SH#!gb>r<4'M!Y$SBr#8AC>H4KZZ'H)KH)`_/n#&[6!%6KU1PR>\iR^!^Tb4Z-LT2n%VaB.c-7eebmNrVa?C?CYras,ie"+&k=\.ot(P'"jR4Rk$[&=ip#g]rN"LCNRan^ORUH=3keuY]D*t%Veqgsi-\#Db,/fh@b<3+dWF-:5nD[9%/X0!'`<*"SrG:5B5$WJ=.R>GFkH"tc,CHC5*cs0^bP^_1P"pTpS",*@6d;nqZVU3(ku>U%"[??0n7a.E\pLA@<PIC4bV@\,0%WMc@"P"j^GOq3#L+Zk%G*GO\1bXBa*6.P8E's"kBD!h3!YH<WT5g!DH"m2PR-a`0A&OSJ)CDe%kkU+OdHa^m&[!XJ9:4tG"Vd)+JP]>hA#=dhNYedoDpPZ&b>]][XBRcM]Kdfm="1f^jSC!.SE2It3TYmaF+Gr+#.dC1dN79X>JBbW%5lZ:>l1WP=@>>Ps5^d*NP$o<XC?im%f)%D[E$>[%g;HSj4-!fLnhsSQ4"0/"^hYl%LjZ,"q3D<]8-6V98X$bO'6rL"9Nq4al^KnQ%nr[!dB`pLWaIJN8\<*<Yafl-)0:3nO[n;/g*5j&^\e7:N*Z@%m`6bP^;0aE];94f`?;<ibn]<Qp3jBNTmT,3V&Ia?@G@:gO\nIjc%G_(Ic&pKH<J$kX.n<1eBoVDWWo3-5&E:Q9m7Kf4^&)`(1D8!SPC!`3amEaYd47["rda7;d9U%W!Ts[>4qX5`g>'ACK/!h/,\Y>#F%@l[FR[nJ.[nSQ$lPL8bD)*4GF+d'e8^7#\-<*mHIhmY!lJKYJm2]>WTNQ^lMGEN;jMl-&FNMu<"<5Rqr8l:3.b811Z$3'*Jhc9-[%-<*fdlG(Fj#`!(.&CsJC+/qj<S/$LNj<7'95Dg/f+f=f84CEr[$Ac)^5\gpf.3H>$_03Vr=IXIFE=f#Gi0m,-OqQpQa(JBYhX8e9%MhrJL]S%'VVlk64+Z\>D,^_L@=;$_(UsXBW[O"3XKB7>CQ&elW_-NNBdYu>N8;-@g!tbOn`CM2YCGQfu8`B-"CgpB1k#SJY/mQc4%jlf_Nph9km`b^jkh89AJ-7%sO7PJ@&!uh&[RM!!U)gqA5lbrufB32\#lJSg7'kFBPi3@2lK!h:EX!o^CWSUN4</9)bTNj!\0I)#]%%t6jCU&4hMJu9LmT(fIKi@30/@Nst5CY-QMi>k!-@c"_mNEMEPFr@I(`ZeVH%BU&/[1(^-XG.(km>+gLKSULk9+lEZds=LG,.ieY%8:]B>7Rh/fYV+%lc[N^Bm9anb.3BBU]qnL(iKTD1Y4VY0.3I(:[GX9>o$QN_riq[uC<Lb`+&;VS0!4V-SFU[d9[QVXa5KKZT78i^%K@g"mPRgiV'2*b\HBjXEksqqA-7HRgcj99eB$m,W'JRbHcUX?1M0e-,J*@E;Kr_k>Xa"5RkqB]:!]nJ]&(ptGE.i[lIibLr4Nt+6%=$2oYBT:dIMrN9$2)9P]L8D4Z_]TqaaC"F,-`(n<*]8FjG?L,N1\`'ei"iNQ13&q\j&b/SiaD+cdK*M/RUg9`rdL4i![G\UdjYCU%WA@0+KdFc9r`>2%.U]paQ1k#!\#/:jVZ2j"`"Rup1D*9uSWTDlBJ@2i%mPg_B@(YXLubQeHTUIf`VEog)Z4ARSG$"D_.;e(3?u(H%Tit1/MM'cm5B*>m9uPo=?M*7u-+qL?S*g6G^am:m`K+R*VfI$GmM%mQ`scr_&Zmg:HmK6rL2IuK=!7*UlLJ4E-!e?j+aEYY&U"=Y%WMV1jnPF=]QjXC,NToj:T24q_iCOkNSVH"?C&FQ8q>kI(&;EN>F>k#+?(P\Ea[IOR3P>r]e#2D8C&[\ATMK^)D&(QE`dPXKdWE)o%C68Hq>_0<d^V1dp_7R/h&H;[FjUH>B@/J7.5:<U1Nc0GK+2>@6_bnDgRU!V;!kiOcY-Qm[iA+MI'5/u$(tP0'`SNTn^ISI[PCCHf%1B5]jZUbB!&LC50LKHu:H<.]B982j@!Xph7IUo,@=:JLa<)E$.5TpR'[1ZMH,a+a04tmZCW[!&YHbCm(6-;t3%:Y(:A-!M>&a)0T%BB2QlR!A,3HHXGAlAYR)Q]=H9K&g1^"qWQJ!jtPh/rLlQX[%HH?jrCf&aY%j<t*=4#5FtSGR8iUEl_*4Q-M.A#rDtiL_@X9]ho4f%JM>l/Q\J,-*_&\N_8??P]O>1_3t)&P_k.GP=YO//@B'9S7q&#P=&i*n!\OZM">bJ=$=b^0k"c2"^5p-t+C=/"M8KI)P,N0TDOX$f%n'KSOiQ%DnNLn&$4iLW[(mVSp<$?I4I.CV=MUuIN<c2r=7MD,<p:gW$Q6r?__bf$0i>(s1-i:AW%k8UN!PqbQba7-)j91,)Rp\GE%YKjs)$E0W?Rje"@5F7Xbi[`A[59e^_h_Ne)Erk`[^6OJ%b/UYUK-$&$A_7)tk(V[Z*;ZoE*;^IPd!+'8%/ZfZAk@dR4LrL8&oC1f%kK,m4OslkgT-s@m91n0O@@jj[P?)NFD`FXCmmf(cbJ<0`%nEJ*R'P%W:"a.bOo#R#6qtEniECOD$A!ql!(oo]bMd+\2`BK)R*SPq%([A<L\5=Ch]%m+VU.h5(X<W8D"qcFi.mB2#FdijO4uae)"^#<&\V1tIN@?]G%'iYHG5!N)*p8[EeKgeWT<Lj&(lPD>ghN@&GH%31%VJQDP2?An`Otts/@>H_tntlQ8J0UgEf`lu=G$ARoV*e6tU2[`O!BX4Zn4'DXmE5JE8=L5fU_7cVn,>o&A0kd^JEArMn$3:p&QK!2%RNLMs/,=rjq8:bF8iTKB9OoIEh:c]G15BDN<]<a%VjA?>#O1X6/Cdk&Rm@O.@,pVs=@;%%h+XLSE4??&^'EMS8/MW*lgZe7j:mDU%'%5<:`XuWB*lnd^>aMZ^1Sb]77KU.uBh8A37'UG^-jTKiBuY!>@_0HjCO6M&EgU,j.H/.koB"e>FMjo:c^FjfPcuEq>l&Z.U#6F%%8*Y1AD"\&PX9X>8A3dhH-H.PU>1X^adn>r+s#aa(,_<G7A5_\NcGn*/d>VA3PS;&_'!hYG<g?]a?Ke?1+p*[TE[@o89ApF/N.2.-%&6S`^VYJE9Gjad,nX[V!+8BElU3R8b<gjR7)m`EN4LVJXNKl`'+k=T@lC@DrA]JAD2Pqj!3Qag7C.9Kp19umVH*X+fe60C=&0"uP%'\t_BDBlkW@u9V!An:caH:RMPDDO'&$`1a&NVK)Acjs3I1GV#d'P"g]rfO=W(H!pce&qrEip\^^a#A8QHneK!8St+TAN^IQD^/u8%/#RS4nTcj#m>"btZ*6atMtNgP$=7K[#L_P`Y?3h6+$n.94N$c+Ks:KL(f;'3jK8KMLYBmoJWG2?>Uo"8>(Cus&+kZP$$'e]37<BK%:5"!K/#ZYo\g8EA='_!$*p$V0EmXJWHdEKe"(g*E15scjE+h#TiYmb1B[`<L[-F`_h8#Z7,jk#4!,D3G02-pKVW8I64FSsN/HPHp%2K9bRq[mI@W4$J8[Wd.XaMLSI:(L3"#@<7>Zff&!'H0](:^cGJbFYA+.U4:-Q8eV:psYjNoKMQZ>1M0!/40g!_I_Pi6h6bN,+^:+%=ZnpT7c'NlFZlk(HXk7=d@gF6Pk`H[=%C0V;niA-Hs3Ud^$#N.-'@rs`lmMpMNW;sB5qK!krsbZ+Kc+!4krP<ZbHaP]<?1iFjJ3U%aa6u)0h"!Dc_J7?&r;p&giNnX(HKJ?l(f+K-J7=]#(EOEPgg;N(UVj#Q\Q"+m(4onE97K[(/T2(/#?93glA\<C,.Z`'gp:J1shK7%'LJ+<`YpE"H;G)jb#bj#Tr7d,K(=VU=I"Gk5hEMN=0C4FkuYBD$gTROW24=pXoF=_L1;q`%72Mi!lc<EJ?4\por.%Nnn41/*DAm"%4s4+s8S/KFq_2np3?'(NE1VJ0r[6_+edJr+g8.B5ghLf<h#PkC/6=W`&8UG6T>O76o4Kb$YYOFI#5e`+N@18JQZ-uM)#+\qd!F=&%7CZ+DkH%H!mWKj7?P\F1j`!9Fbl9Y$&G0p=^TA9B.AqjR#.Q$U09Cp&")RJJ#PU125f0s^ETY(:*rZAfF#3=;Q%O'3=9A9T6O*U/%*)&=59er6&#n-8kP\8Ac9Iu;+Ij>mi.BrTL#=qVcnH\tO#Ch+'d,3-Io>:>$auK9[j,G9!NB=\\i#Fg\<^;/bd9eUO#6'3Me\@oX%?,m9Z%-7V.H2)lF(DMY`=[(-K5CbRa!Xce"c3lll(1n0fl\n8B@?(G,JGbR=5+,*EYe$S9T^a]X,G>+$A&IhI182`^L>t!$$8J;a%Si'nr>aUH80nljIO:jiQXST?Ll8YNB<Ie:I5W"-J(Y.!R0VD2o).kl;6[rcW;+WVV(72Es^_@j;0ZP;^U1=]PW*^hj$aWYj+=PR9%l:3O"<Cp3h$7;sV?c<0:/*^1i"]bL(AlMdFJsfHc:LFNM@o^`$.k?Lmgp!RKUtgFS!?/OaVaPf5-\D%>+&5E><`Y7i;+W9d[X%nO%A><S+-n&@peiA=ud:OLEmN4_f:hiNfmAU55TS;pp"HU'ud#-k0QpMZ@@>b=?A>A+:^dOlL0h+&-%,7Z,$.XQ&ZSZdSVT*l2W8[lr%CLNlaP"/niXPCE;9]_tHA9.pQKVQ>`9<KKTPKaQS[SQs;KJJ!R__cIl`l?O`/OUoN=(/b;Yr[24l"^IBX+LC&73jTB`A*pA^o3P8%j0T@]*(:VY9;kmH+\"I[&eEA.;lOhQpEMP/@(7YK'M>jW0S:@7GI0sX9MO.`Kp_0&H-%6hmV%/Q>rl_dL+^m'38s!'ab!M0YIHdc%Y0s9VN*!,'X$e3f0u^C(Q_`@2BJ^A6*fD39WJLa%M1hgdBlrC*h!)UWZ;S;7(oN>h3$WXF$I]>*P":tmfRuOiF]V*T%?+4T)L*&;%!!+k_,*J=\in/oW>W!VqJd05']8nHcQNAm6,*I2<g=V'G;Y<d^*pZ(BEJhTOPlQhpl"(Gu4A9ZekE00&R1KTg"H6:'/ZsbZ"O&9P%87H%c@hUIleLsLX]aA0_4%Ld9V$a!=,*J=LhO)GO:d(")iM\Fg/0kq_E*j53UEh%?M(+HZ\0TVh:\)%GKN3@dM'NCp;&5;47.eJU%%S>78Lf>4l"MkBj.OAIl8OO2T=!BdW(LFKlGuUdt7aXh+M/jJ3;gN.G&sH7+?7HaWF\L5n<$@4%(F<O&<))W=&4ntoc[QYo$.UEF%j$JGSW^`6*Rt0bb&4nuZEW6^oJ:_N!fIBi;LmmFM+=RQB,g7Zp879RSa!P&9eUi#UBjHDn/mJIqjJZ::dA.?\9UXnmKM,"H+<2<"%0X0WS*ZVmEod0u$8g=t91<$L)Q\9*@GcFeQJ;YVF*-dZ$UGO0G.8q58\Zg+!%HPMe:;Gkp[DI-a4saW,Bg`Ri.?>`8(LFKr\PH4-%>[Dl#X;l!h0T%\2M2<[A9t87V24oun7fk#.,7hMFHW5P5,nW_]KKK@c3QTT)GT4mC"=,=@I/#&V9`h2Y6mV<^dVM=FccOQkTfEi'%P@mLJQ/cBfAs>Y.1#m;sK[*#HckYB9OJq5ui-VsEAI(^7Oi.nY01hokLX(9@)3HD-=)<n\6Xg\*QU<%g@WF"ik91)Ui*CUZX"]Qu%"ns,?1Wgo)Qr1h4:q=YU1`t9IAED+',@_Ht'LF)8U55/%/h`"*5Y+?L5uu7RZ*<lL^f;XWG\IUPUFHMki";QF#oKH.`a,E+2!dXD%"VVfD&=6m;?MfpZ?u>FSd&TM*gdM:&QT46.aoScK<=LL^Qln$e\g0tq?R50)MHSAP7-/BT9?>:n![]<JM3e<M&n[@s,V_$mYmD4,%,aN:J",eVW:/h^H#oH)LOi34%.qLaX3@G(GV>a@9]])QF'p/]4PXQiPA(\Uq3636t9_3:.#`"sS<"="MLf"A=`/A(`B;?T46XeYl%BOEA4'2^d*<?ZZ+6kYDZ"q$X0*!C>aU2'qP-C*GGaWW8;1Ir]&GVZt;#nK$1#4uH(Vo%GNXiKKFQ\65f&P:3Bi``<djDYs[8!<jN%Lk*I+3Y;<J8g'9f$1.>DF9O]&AX2'U!i@M[\X4AfOt_k,,)N+3B@%O;OY7h(a,hd0;kbO'NbA_971bU"N%4?TQ&?XXP$A\<6V<0H%O!3&JQUW5T3@3[[EfhSR<`tQ`0G$q#`\,=E/I=4*,8-A!`A*oV>`O1L3@[rNC4mtUnLOu&as*"9Enj1D+NM-FR_5Xu@D'6.io4u@%9>Ds=La6S+=h@PAaDil+.-k2nYtArSjbT4U)5Rp:9O?sl.Mk,AAJetcQ!mOo^m3M&E?*SF?q+iu'iUecVK5>ep_QhmgS2OfA\c<*%FK9s1V%H;CKJJ^i>]:Z&9uc\PU-a)bWrh0H4\ER>ZA9c<9Zm1X38c2ERcG0<WPZH.QGHb@1Pc6IPXHcO3Q3RK\_t"^RRg=aEKpp'%`AK?E1a7dU:'afO33nDg"?aP#LltViDb>FL_MkdV,c6+4Y`V9cLWIkrZ;!d'=J]S#)uu0VMBjC&aXaKiEl$.D1nj!1<#@;/H)rB5%337ZKV%F#-RGukP$]^gR@$jO:VF"aLm3Zg\XFV7#&P:2+[V#pP*'QmQ;8m1K0Qk'j`*onTAs>\/0r)n85iKR93.-b+'jm]P"P#R[%EEK;n)5RoObdcZ;kZi*%*#7J=s!1u,ft["b%ZC]29cB/4N6>Orc39!M;)#!/INi1$m.]JN;Lai`UGO0OaicIRSI5q)UB2ZU9SLH)%5fPT>:aR;S8ONVUVDb;m@+fL`!JI1$cBL6+$()>C_0=::%88F58E+'(@hTnCTT7#O7=QeGOdBkQ?)]ah(e#4&`8p"X@6,2jH79b,%a<#k^$&T2/!&C7')5Rp:9MBGB_?E=[8`2_+;'ek%^c55\=A05]8gBLd8hPk@Ku6c21s0Q^np'7+L&p^7'k.kD,k.O!^O!IRmV&gm%Qb$=R`%Y]#kG4^SXs/]8QW>ChW]5Nho#`GDJ?^SBWO#Q[L:p-P-qd5pEL]4Qb,;6rYdfQ<i*IU9H8.f#0.D6U.M&,eIECHMBEH%\%+f&G]5E5S0&d`Jre*,dn3Qa)/!#,\m-p1#k4H=q`QrX?P5a"ZtWPi;V:YE8OB2mtFFd3:gneOg039$a//'$7LV5:ObJMH`P3.+Hc%,8-l?5U>kZH1.?I")_J=^1?<`Ud>2aOp(2)&n[@r,V]s7V%aCZmSbI0rQ2#_80+Nl-j#2M?4:i%d?Of@7NPPbKZ@rM_hM5lU#dc(%.%&#A8i86o,S)(*]Ds'^asdns-L)oe9I#-[,/rXaGrc$IjmjPnQX^F=`fbqH?IHWJJqt[!0<^V=>egJrqND/82A/XbM_"BGR!;Go%OYDYL,)M.*N_R#OV>fSm;F$$cj'!:U:O'u`^q6Ni2)(d^,)M.*N_R%A=I2hA<4iQp-^>8U__J4sAs>_00I;$T.L4aJ*lR#p:)0.h%`&9@*+:ZOCM+D)&P_b+77DNmq%jGi>>oFOrNjDh<3.BDnN7*M--Dia\iI\rm50bWtXo]9"M@BnP*C[gndYJ%'9Q=mc7DQSH,&FgY%<1%]2'##mh-ODS$,EeF6`<0&Li(4Wr+@rY.Ku()'(ksD1%Ep5[87H%c@lfr9Ncni4aHiU:@S'QY3/Z8%N7*LbVP'FhTQ@rs/e=!X%@]uTE"N<ODE>2'_.+3nsAjZ$W<%cfSPp)lQi@Qm"P#@@@&>LKpM&0*b1+EMKksBTe8><m:[CnPae\Lg_La4%>[[+cTJYQQ8aGmF6%aodF.)OOA;Oi0pCS>fb4.*P0b`SOQr<3b?a%Wk8Z72h<,'GRUFEktU-S6PM!!WcdG?^&:QXp/L&7O0^6H)m%P"inTDU-)0b(pA7c%"HImf0V^HKJJhJ$(QD'#8'*G[P%QllL7O>MNRXjObUAHA@Ub4)'.u7PL(rbF6\VKin0F$N8Jjl7Oi15Nj]!ilJ;+d"EMgU_YTf"T%UFO21M+HVpQ'"c%J7E70jNATLJV!KU4=;CoFKC&XAJ#52RGO=R"3?%?SP.-!6,;L&r0tWUZ3Fp*73jUOnsiD:Jtm(4+otVO,l"Ol%Rjs@DNC[Mfkh(QH*3OA*.1lX$WtNQ@1^Ps1,EeG:=VNn53TB1qg7L>aK.ff%WBuP1La6:@n^>gM_eW"ef`Xug]C7]5JHSY"JOncL%dfPd>.gO[V*ZiBP9[:dGQlIpr0T%D*JLOM;RrFLBCDJQ-$&GmmK5XAQ8&C4jLa4<RDULMcTf)TI4*:T/2e+O8%[otV;%f#0`"^6=%>iaf]]T!p;!K0QF!59oTU^AhK,*I2&m%UEuj;L<T:Y*,bj4)qN"(i1CQUN1iU.X<@H,sDO$YJM!e.NM9b0.:C-\okJN$=0N@Ub4)%'/"<-%C`=5.?&d3MVW>o\4jbudYK.q-SL5=>i`,X`Rt5+_B?1Mdp)B=UBDcl`8W<MKe>$6d9o44qGnc^@KO7kocFLhL`hjO8N^Z7%`9#WSP$@l6W8+3j;]le2,)MXSS9/l7@$sU-m8P2@)`db+kZgOh"eQ9u;3ccD7S09b0I7/0hj!tmKP<gc8L,TP6Y.Cl<C1,*K2H&S%<=h1I-"08/6kWEYQU9jZa2L_GECMF:s1bsigPTl/P26l547&F@HXM`-ZZKn;P@-qc@GH+q9TrCm)g6ComN*=^^%K?IC]3@_h3@6&%pA\\T.25[56AGi7H)p6!#4)LPmuaoDaa70KqSedikl`Qlr2c$E#PR6@4]5H7d-Flb0>>Y7$^c0D30]NM1uud#H_`HIn7<&'IH%<+%B,WI.n`!d;c[ahsH&m&9^#.FaW(.igkLa?0PX\_Dlif'2OYWCjpp(\.MD)RT'JR/NK5[SF"8:g<4]:"YUXuoP?bH28Y>[.qVWpRF%&X!CmjQ>8IXi.Ep[<2)"0AErm%(3%5B]AJ%fTVeKVmI)OI\@PMMaRLnQ4[rm*)`Culif?::2)#'rB`*\8!Aro`DDJQ@L\;ZYU;Bu%:2)#'rB`*q-%g,=Y68\*=WtMU:Cca5c$Q6k)@ZSUQK=l5/Xg1eCnueX*nZ[GpIMj=DSE,^A04N,hArq9!*h[K5'?2q2t)mW+uio\%;LLC$bMZJ]fo3"\)R(SJmu_YUReCkU_afpWh?9plCmt'3O7Kl'o,]?YmLd.8ASL'!R!#LBCkhXt^n0>o8'7emT.b!-kXo5DLH*jr%:=?)_J35i;O*&i_WL#JA+%`I]Nqp81B'iC7*k]-U\tQ%tYNtE+lbf#*N]$-`=g^0jp>k<u;G)dQ^JN,%?FTNtJ2QeVTtM>J-TCLV%EgZNG<Qe!PWDl5*ZY1>+.m4fT-TCLVdNXBOf2CC%aglf7CcAq?"D,MXE:Y,"LS"L[Y,,@[T0MF&\ur'(BulKppIIgGd_4H31eWk^%,nbSP*>l"B#OdeXgU-IENi&M8^gmc_=LCGm+d30)jQ2.q-\R*+:S%@`(NsXhFmb#,9q?f(QrT9FI4.$2[^h))Rhr</ZVK!EaTJk1%W\<`AA_24tFY-N^5hG+C^oD-T]=N3i@8Cdt,A#KUk*NKOb6NW$gjiDT3db]`CtOr@+7Abtn5`,(aI@ol)YR6S\qXNp_iAb)A"*u3%E?>9pQS7m2Fg,;r28L8b*u0;B]UcuedHF9Am29>^N<#E.4c.o'ja(G.jeIFJKHiTIbe^G+*#if3X8TqqSj)OIU)5ofP^0NCr,AG&%jgL0S]pEKYCHf>J8IJWTH^N("%[`O]f8Xr,F5(>)b<10Z/QU&E+HC9N)<GmK'I\`\Lf0NYjsHiS=-t"mZF[=Hb3\D2Pf)YcU\qt-%.EtT"36e.%muOd0m#,'^0KXWs[j%Z![7A"1GXm%qoqrtqUF$fW@.Wn!`0Q8;.'&9`.;O+s)eF6`)s*,+r^3\KP$/oulRY\4#/`EO%Skt/)-DLur9TcVWp8*47.X"_T%>dX?[jE<\Z<Iu;\SR<R:uZf\]g[[HP^_*5.K-,^UteTO#tK,1`=>L6Dk(<)kla#G8pdqbY`lBE%7r&Mp-kR.:F#K1&E_e0.aqEZj;S,gFG#E3lB^J9gfL`WoN/eCC<:#hqijc.t9Z'WJ+sEs]=6`/=f[dRA`itYIj[X(p4/JN%)];7^%fL]5tUG[e2rhbIJ22LaqBgrssbpX)sF%Y%@Vi7),Pce^q))]Yf?.5<!C78!(9f'pZe""iDbpfEb3MgM[;asJ;9%,Vl$_$3WY%^WI%29dRUe!r1.R\fZaRcZaN29dP%VR\7QVE(JgRSu[MF%Y%@Vi7'VPX3c'Q;Q,$;Dl_`>go4c29kB[VE(JgRSu[M1WlA)0(l/W:?e50%PYon-,$teqKUQLQO<N)uS9G$#KHU$T7\GPKaR,3WTSO0/X54*r;1`e#;N[XkHY64gD+0b_bHo<^"SK>>e>!bXjZ>ai>*4-E'D/%7%8U5K2ZPE;Io3d@cUcT*A#XQ2r@#,AY3tI&O6+mXUT9@FY_8A6XQk(8#ahrGoYRV`8PVj!h+p@]o-prZ\hK^eC#hkgS6\M*sGj$Lc%o>/=,H!#8V)'Yh:h0GrslIEqJXll@ZO$R!r6!GF`[[r,[4pGje#Ap"B*_uBHO$VOG6/*H5[[i&Z4U,ab#Anerg3*s00j0lg:*\?D%N(,?2#U0C\Z3#S$66IU*&1A_*@^6&d,"aQW9IeJ4$G&$mLpeKl>+nKE7P#0#P+iPH"H'!g`$0aV.2oH^TLar0/5#IoGS$&R$.?YB%R&ii?%j&Z"7=oRNn;sFh.2oH^0MW\OK84aCYT>p.K*O,6EPPfa%q;gg5s>Dt-7]_YK*O,6OeA7-oEPp*jC(5sQmWF11$mL8W;9=R%6W,aMOl.4doeC.G3G@_gd+39bf#OGckFepfof"-b,8O;J*45)fB\PO\gLJU=F3qA9TP`kbrC%rSF)mlG_9LnZJ)^.$l.&E%[K$60%grL)aC\-)`+gV!%>!lnDUC3GfAk>)r.3fTV-'7Jd$s90u[+,DP+b=AXhm/LfOA#9M9#u[f<"Uptll6sM^l5EV^IB"nUDq@Z;&Q)b%U-!qG&YmH,R=@ZLnkt"DhIQU#Z%I':r-h)1L-:'u!ln[I448q2LFgi58Bq33eJlP9-Pe,BF0%G;&X.l[TNodKA1T\oaWuFo1+D+L%g"?tp71hTqW=0)4h7;*BR>At)-7Gd5Xne5&P>'#aV3CL%kP,'.5L$3NO2>.;hIQXLm#_gHiBro@8#l>2,J7ugHTMfiqWpJ9Qh)`j%h?W1DC)5u7pRiM4r8+(\:!WGhJKp?V^qINu=V:eq4+>@0fkuikR*h<K>GT5hq=n0kbEcH.^jK*5d:_@GFi6b#3`O0t>H\ZEXEs]b%I^=%T55mST3CEt?l17>3qU<p0Jk20;/BNDYOZ\V`e[a=$SUd(meD]/LUaH\/>S[=).^LIbrAlYNH9%rS(V<WXYjTCS-WT8;8$rS6%dm23[bf*Lq3F^g@IVGdE.`d+/o&Qm0/3,i[B*mSBWl)mod%s(HZJ4&;</ZZgA-=H_"iuDj=TA".OMco-QW5G)?ElOki@OL1#NDl8%gtA!]o'=5_d]*(X*m(T!1S^?5PmKN)r,STf*Yk:q>Cr8nGX"&chs?h3!>?[->tmBWF^iX";r(0<+jkbad%u^:2qaI66b7E'X>,pL%,Q[G?fMudPUjG<;=6-NQS!*#9`*BX[lL*cUQm3q)/pGn&bOnJiW)^-Fg4hu>OX"b(L2-.b6HWTPS@]rUMd%ZG73^l;7!Ae!o),6p%Eu@a$?<l1rdiT.CC2'`_]#'&[mM/m&cE91<W%S)fH[^i]i#\</c*8$0[mW=D,dI0k*/[sr\%"=DF'CnGDNiTu[M6*"Nd(Ym-uU,t%YqKS7nT8W7f^75n#A.7l/*+qGG$(PE&'VVM0D0h4eR07A!O6&WMr`U[H[cuCJu%WqRQO8b+>slVW.o12j,UXG-46,#I0b^>G,qEU%4:ni='Ss0[D57sl,5W6/\ZFbpKGChn8-rlCZ#e-0kn`sY=Ao<![]O%oMf50l9Sc)XZ*;fPhM>mDDSsa.kN\<NB$R/fCk[Kk7FLb3%CXK:emqYiBCSA#FNQc@I[*JbGmYk>f0N,Mbh1gncqt>f4mqlRAG/m4RSbGeh^M2q.#UsOlMlXkl/.W>QR(9"P>p@"f%AKgj,%_Ug%1f7kB8s\u;LtQm%3.0_t9M]470ftbem2_+Gs)R0-Z=t4X1+\m`^g'C@gs/E%"%t'T0Y(p/8l=h./rcA_0N[l&KQGE%n.i42G8>%>%$H5Qg5X=CVh52)/`6^/,^J<#85KhMa3CCMUb^4>cINpe0W`?if8G!k7B#OqtMrQrVN!#nt,Z&4M.Y<YU_%H8c:XO,,+C]s;&W*Cc%SL?KR%;D_.bWBBnRTmq3Y7m+(agU/`A5#%+*:\Td1ha1>DP)FcOm'=:YPO./'h6%Q*CiRN$X+(.NC+s_@]$KhY`2c:.t"Z"%Vs1Q%])B)E&BUOiU=e8hJ-ED$#)W0$2AcqJ\et^3q+d4\rkM4W25uT`ZZZ?WekWYQ&X07]7?0p_.]?=eFo(qq0IFrBhT9e6*14(1]4dQh%jhAZafnpiMe:d(^7e+:<.*?@:_5ap]CiQ2=VHD?2AV^`H$t:Zcgt/q$F)6Nte(qAU_U>[VFfTsu2A$prG;J]f_1g8P46#Y0Wo%cL%V<]>fSQAh/0A21B&0J3hX(G,Xf7=6jWqL!?=:WOh=a&4*+Js]INk!YS[Rm,12]XV/1rs_e9\Z='#A/%FH$D&g.q1-r0)Bu!>6W5n%?Ht05BTs[sk&*HbM`2d]1AsfNAPiWg(3K7m@buCA[:\XSM7J"';8,3/`j+J\;/\EF:MJdD9bkaKCI'^24!'d6Ng._R3VT2-J-f(M%VQ!&bg%EW<Lmmnh/[.$?G!/HYMZ$.r5eK<^\/)3h'JW[eQ'G^gBmsID+1euu/n>2<pnh.=)W+H!+Y?q0Ou)K:Bg)T--54ST1Bd"/%_uaLMXt<N+J_A[j]$G!GJ";s6,eB:_/u.pOC_Z.8I%YO+:kaEP]ttI<gQ9@>L2h*q!=P.83>Y%&Yc<EpO%l-lImkp8<TRGlacPf!%A/e/H?&0p:Pk2of=2Z:o8_t)VFR5YOhA2k;hNgF[n#]IJTF0X-*+BQnRk!Vb46;sr+qj+^+oe_Z$$>Qrs4<)Eh*8[Qbs1f2omcYj%C;-u;iIl?FHX"OpS63S6lHi%Oi49F-/,N)'muNVqhYu9ahu"7;OV1B35t3J?"`+>8F5UtqCOTKpOjV7NaM%6H?n8(]DkCqX<G'8Z%6.eJ-hlJ$?ifBDq&`/uu4C_^2[VoqWoqQMk1rTG;<Vg$<40Us'[#:eaV:g$)bjM;MTr"P(OGYBtki'2@h`VK_ep^hM%$;l@#qQ^k%6A;l$;D+%I\ubJIpnVFI],.P#$LEh\]geb0Yu:#Go=93#IJZ*^+m4d<<3H=LJ;D1Xk3#tNWDB`PpHJr9$bsK/!lRE/[02qMQEO*l%ZL(_sM#-KgM[.nB`W4bmB$R5mXYL":,K(^])=^V53SA0*'lDpl>qn(S]Hh#:0Ah`ArHk^kU.b``n\L2C)AS/G@Zp>/G$eO'#$*>d%1N@"9n-0c+NOD_a/GD@)1pssBKmW)tc/$V_SSl-YpKP0ip(9#?hZDr4$M=:"Rd540n3"WsA^#f#<YGYOp$UI&`2ohh#*89m$=@\M%/)O-=:K\OHr96X-@")Cf+18i"/do`-XUsjrMjAdIIQ3N,jlOkgBMfIDg7Pdab$!lo9+g6'hoIYSdp)kGDuT.5J,Cs7fDk8oD7a!3%^=BuXB\!=n<kW!)E/\2T(&<;3kCldR,<ra$B[lR"p,.I77qU6,Er^B'i&=d2Na(,kNI'KaS%Z@Xg'a00g5JKA01bbDe!mF19kP1H%2Vi&rRS"`<DnR&HaNB>XCuNlm>$DDtk#qd0&$8/e(/-b%U;GS;2E*m,?qjK@Quo*#GuuNic?YfL%RW!`2!OY`r2=M][j9PGJHZ4/%8N.PFUK37S>-03?FM&TuAp+QB_[)LhJ.E0C,[etlJI877'of=f>6r'@DlD!!'T?8_Ff#k,.R:6&7UpJd;G;7?PF>uk7Lcf2COe@c%+DnQPU4TrMdOuG[C`AF4%\p1/2!PN#jA_mO=6TOfZtRt\*j@CX]$)5kVjUF-hJ1@%)qh]l=G(\O@j,8X<U$jW%/&uqIdZ[ulAV!>%?JEE9!fD6-]%MN=OKng\8?]GK=(D![@[0RLFs,Q3nUTip)A1X1e@tQ:_m[r<U:pJse9S$R7``PY@+4g1kqftq0fZT4QoPgYAIbS@%&/Z>&;iW'W\=?`Z<60i#X,NY'#h^^qiF%h<"`3L@i][.'3`5"lR.6Um$^61\$bbS$kVGnAD&Dn2:b%;lijK:-n927Cc@!(K1*Je4%*o\Ve)uE3j;r3,f[+C[;W4l"2H!;*;%dLX-)ih.up,#qs'q.n8)HMl/\'<kQ5#gF`1XUDkJ5@dql4r-hh;+;u>BeP;7.sli7)F];%"f^:5WqK\C\6Q@<I9XU:MYj20^6^qgg8e1"\s=Jj<^-#da'mpL1U[HD39t)YS7C!RnC6nCS$*0W"/Ncf"1%#l#h_DD-uP3A#hQ3M%1bs9AP(ZmhPI5-aRn(YtZ&%>>>dVIS*fbXObV^:kcl+SRY0r!*`"kGDZDd5+*f%F`)1&7TkPs9=q(_=?!i4jkjBK:drlGu@AF>pa%H3Ih@;C)+i;PA`i2Hp=Xg&qc%Wlu;T6>PVD`W`3piiA>_?6)pNMV*-l>6]1K>%ZmA\`Ti4:ccXsA@\q31OrIU?TCP!F=s-&>!^e=%7IXEXD9q6f:1jmZ659QTCBM4`%VbOB'UOn^V/lK]F,#biZ7YK;Af@"bH=,Ma"_8TNo:8E@j9=AOmF,=rD,!W?eA)*+bu6pG'`h^o%<`W[?5rBdQD:\h6$Ad*AHB(B./("q:g+$"To]ipeW?j_@a+GmQF^\d"QEiA-73mg6_m[DmRR4A(Cg4a/o'10l<P-ssAh)iN61gH\%8!7;\:8Q1LH2+TDN'q7<V5PYL?!BD>*0I"5i`"-bCI:GC$o83'8LC6[a8HC'ro6Y2V6Q7`D!Vri%^*LH_53T;,0:uK(hjZ\-bNAF%^W0g,q>"XDeu=V)Jeg)L,0is?U'0?4/m;oFY`u]^'$^-r1]0@U,lk1D[E\HIdfK$R[Zt)-_'q#So30<1g1T4SpPL;@BP)Hpp<mZ7%fpl7OX?d&)S#mA>MH-I(gE.k#87+gB,;VE$FaLa-efY.;gZ:mDNJ^0I\9F"9"g4KOf^fHq3:]L2J_f^451%T`(\m?Q(4OU`N?%4b%@+VS,gh=,+N7C6Dg\m_G=[gR+8r8Y?^iSJf#QgQtL>P0[']N1MC":7Xi)\N%`Tof\C*&A&@pV&M-T4ec>9'uF'I>6EkF8m5BN-Tb%MMa%9FKo?9gg&V%jM7qr%P:RHg8lTf:i7:q>6PGh6@b<P(mn_dT@B;Lq?RX+'toQBh[/lP;,UX!?mD?7he&K`b^Si240N;*<@\f0%7$<l>PoWgDMrcQL%[Tdd-NW/f)7u/nJX1FFg64/H];nq;0qSC7i+o"m\[/UFABnsZA@lH%l$%la8riOU[pe.3"ctdp\Ym0fZj"7;%m2f%+mA1YHGs"`0/#4M`5;EOF&Y:Rf;@QTPja-0YU&&2)&eCF_;8hns^e,-i[F4+rV$uLuk:'_0&dbX>ZM4E(4oo.`OSi!kEU/Th%QenUpD8[G6Fqt`sIb[t6l(#/\/(k</#$%%S=;5qIZ22>=U'ODl?s>0Y@?&77X04(gp6>p9;dU,lI'D\?hd4B^V[[dQ\4`h6_;",s%?,Nli:J8oK4#)G!Ug,\f:`q$^<uY:)a#,UC%nqCO(6>j=*gaC[7tY8^:?O</;GW-%0*8a>.C&W^=#lZRrM5j)cOTm6.(3nQYOJt?%7:25e6ejVfr7t@/;f.Fi=f"`'D+R0TC>WfHD6Z:$9%ZYP9UQQ*s!8Uml:`$1)OS<TUGZ(]92%74="8F5r`/psAZ65[9.,#g3"AS`%XiYrd0abTOs,@-nD7N/%2uWL!e3!f&j6`NqD.^\nr/(q<G6r4<8;heb*HC7kFgLf4e(k$*FT/]:FcHrSkWEa1kY,ob3adqe8D7jU%W'IF2OdS95#_8Vn%qCp"BsskHjs]0UJCCGfXHZrPh#.8\CL3b@LO_]:p>g*$!Q6]^%NHnT%Y<*M,j_AK6u=fl7fXFX`D-M0pD!P1%ap<NY&;,(#f1O^s?sG53KP_&[&6!Hp6tb7Iitns`f\1AF$K*Ofe#6fY'U,-?,SRb1_\9bjX1u>:MJ/ce#SkOrP?p9RFOWHeQ)5UQ%5p$-Ed<Wn&'H$E>;:9a>PG\!8[KT#6pZn:$Z&a]D4Z&X?dXtV'pbqX^q\hi-bUT5cWWLRYCE9gsJ0<Ej/MX-N#f46iBUGFa(lL`Z%'ehb1a`3R+$=27E9>,iPWuq$XTbBj;jGn$BL"P-Q6J=gs36K)P"JhkGnr1ht$T#I@gJ]N5AS)e9ikr=6QUDXYpM.b7_l_hGa</4`%]%BElG]n?c7(shgGlPO-6a.'VbX$b7>[[^u.4RAqD^,n^kn&;I-jVoYa?^WCK7>dlA.%)UEs0Jl$-dNbKjZ3pTWC<l-b`N^H>!-6%S7;X=a"Q"+"[:gK##:t7nq-;CB=fe+<4Z]VC*X\g0>`N`#Qm7K`Kf%Q$0WfC4qmu=fJDhB&n1M<pJS(4BM"\")7,snHU=Ujm/b>.%U-\:hCBT6N%4g>K%,;4a=0)^4[s\O3bRO8i1H[JR(`WG+Y&Wt=^nZ\>mR/NG01^d6C284`(0IRra3)9(r<Q+Q9\Z[\\7k<DorE#=%,V1:N@n`/r7W\3QD-q;o.'-]^BY_\qOTU_u(a.T%-)VYFGj.>.k/7PXa@'J>+!fK*JBnd^dY&m+Tem]qq#Rf$1'm-.N6!(?SYjaj%[g1+Z(O,Qd^;E[]aT<E.jU_D3'3+ph0ned7QQup1I;i7EComfmrLF4^Q2;D7k0*pm:.Kl"R1"0'"lZ/k=B69S;IM!FJGPq%$3guK%d!-\>6S'5c.kGfip(U^SA9JR7(;aDTOK$oKPf0*Pl5#p[PT#(pHb0-?6=#7+qI8bI.Q;i=o;ie>[NlrO!:WM24u=AI:Y-"YhN`QR%cYi-mF$qM5<[\)M/=n9bHZ`AojI]_fdK$.V_BK^^Y0]kJKgil(3!ig=egWKr$hdo(@ipZS>3&&L&XKd@c=h/@Bl?5DA`8IVBWsBG%Q#4?DKiK>^RG-EKYm(FL:MpG8hubnh]s#Z4\nK0IS%Qg--Q^NG*6e]jcIe9af1P03>Q0>3cDh\1=(/I-=)nV'$ish[M#'nJgSAk/%*gq:7kaBDsol1L4JnWhqOSMjh`,A@Cq*6(2M[+fAjem*,NJ^_+iBEnsb5`ISok>gMYle+:$cWQWA?asL#X\*I=><;n\RdtL@`@-P%`A&hKB91E;Q*I[1Oj5Ld=,cl+Yk#>>B<A4:!,n\(%#c.H=Nqf5Q?B`(PIE!fgt%85+a="!2Y*<q3R#%FE&l+\D@(/aOb0jO<0)Yi%8u&/u,A$8-H_fB=!ebZW?U?Ql`%?@K_#!!K@j@FBo,'<S\#GI'[:+@^6DHl,pu`%&*rKk[jlY7=]fQAN[ZuKoK$3@?7+JP^`2>?-%bXo+'b`T4-K"H^Egl&$6Firpr8W*XR70Zg),Js%)C9(2T0PR[ld`(CJZ+dpFh;X>tbp>a!3&`+icS:]:Q/n+VqLX',>a\Z*S=A\R%m0ioa8\qB*;I7ebs3/74F^S2eh)iP7@Z/CaZA&7p1rFG$EqW'B.G@@mS-k>Rbo@'WXE`!FItq7SFj8j_+=2BXe,:6k_C.0u)pDl\%1M&GSa(=%n>@nl0eDp,m$-HH?<%9"D8Yd2<KBXI,ZBTGl/Fc5DP%!'^/]1"ul`FOM]gKoc6WNS-6A)Fr_kYrBQAk!"r3t3eJmP[d%1^_kUJNlu`7Z!DfJm>UoRb(/li&g;@+%3V1[^_tmC%T3kaP==KODP2FXiB"YBe<4o'$!Hpk&(05ngl$.K?raf(-,)cI&\gHT\,It%[`O3,5t0l#72Mo<AZg_]h<mIE$_(+KZ,49#'RM=eM8r8p/6&6=c)hqK4Yk`@7rS-[k$nN5ZSX,jQ+X0)rTVU[KXUd"iG>n*"Qmfi%'55"e7Fk/C-.^k.M]u+@:.<N][9=2$l1P<U=`^fs9]s'!7Ca5=%:,/B/5DdcS]\#8:-*&W!7,_j23A1_fQALC7[B@.cTJ-\<s3Km%AVr;Rb<1h!K%j>e(,u*7P8a9m"t"NNfN)fHR3>Vf`\'6$Y(#]*b+O!Y>ri%<E)""mD"%JYU13/1m9*d!;V#AsX#,t0Pq+(29h+?@%Q6E=m'*nJeC<EOV5sX5IRJ@`UAP6",o1gA<REj'UXX*FRl>YkaI-S?32hCQm^(i%#-Qo*#<6Y?/ZI=t^*Ce3pC.i<\&T5c`6dI8/%.A^QXrY;E5[A&V&hXP<il:BAX)2m<KZD\#V03YD:L?<!+VLi2+1Yj\-1A"]Z])>;bd/_,8WmO4]eNh%;ds/@4T'$;m^:Ke#eR[VH%GI%]YO3V?FY8FFic0Q_DV!XRE2GQV#WPWXt"K`>/#"XJ`'8O1k\q+M/S_LJt@IeC!OP])@ja`l(>X3,FE_IJt01h]]YKpK)N8`6N%,>[E?j_3AX\T5&H4^:!Rf1&gOMLTj3GVLl^Y0tR[F!S1Ih-;rnaX*2oY+0R0%[_=?:7AZ<>re7';iR7spZt+ejiF*cXrL/td?UKW%o&7^p3L_Nh7db6WaN-eO%`$nc,J/00EjWiFY$:sYP_Zkk?AA;N?B[BNcAakmcETEE6,)L(H0_$$hHW()@]6Ec>WMG[\T6Y!BMpir%3A89=;u](oEqBo+%rGP\V_f!r_`7,c9=Q::Z#8W2fe-NIc$O0:H?/*<%7qN&0\NGhTk>5Zj:cR:(idu%iQj:""47;Rc4to;.;G@$%[3Cc5b6%rI86I0\8W!3&10juOD7Z,`lX''[ee1?@)s*MZ6Z#GZ`g'Pn,G12ULX+`X<Tfk'1f[n:O`WHeGINL5W^=:=3uT#WdB2\-%aXq4-_`9mATW!^8*:,VY2U9LGfEWek8P+(O&OV+EBsNYd0&.TTPG3JHd680c3X-iML&Z_T-#>opA;8>mmn?/6.J6IhZ8F:73/eM#%%cSlQG@m?$.EL=AGl["jWrOQT7>1QN([aBf5qE:9[(%."T;AR5.4cl^'2JsD)HS/ZYJm!111Lo_g]nrlI0dm4V/Z-G(F(-IASa]!%:#/:9_N<rdE<O'\Ob?Bk-MQWP$d\gKOXq*t>1p7+4=UcmSpM5*%AU>mi%]bO/7`0E8b]*9C9BQ%;rS++@b^F2`-%p%]=PB:7<5;<%pWPr585V#m@+`Ghr#NQJKN/rq)X<e+/IXkq#6T\DZ]?M6.:(@%Cfs*KU5hr,0nJF#Ba3He,HD3U#=qW:(fhOPLgm+#F&A*ecETHA%LUil`OV!u-[t&$p/)o!dq5AsGGi>GS1NS>6(3"]/h*o>;?:dW?OYM(u72$W:RAmIm0@M#>ULDd2W"pHi;b>IlO5;tS/EGdCe+@W$%MG.$JRg#V='c`0_fPKQ73\+O"3](08]046/[@N(l*a4YuF1/<t86LI6eXNUc^Nit9*rLn%(/fUhCWs+GXH@fg&#JH38e:op,GBCC%W=Z-V'9q&1?B90(^6*K>rf]4cSLg+Y'<.M'TL\I=efo/SRnrX]J/qr3JCD\^0q4A,.-YG?OU.X)@t\lA+f?=CTj[S9Z@L$T"?RP'%#XUG.)gj\L?B_o_cAcSCF0+enMq<>-Dn?\URucYt%(15cI)Zd3G$J00[ND27L2"9-$l@1%[si`Y$X8?J1(2FQ?P.(dKC_BSZ?TY'%ff&nilXD6-a!'j2MD]::PnD,!ZLe2=jV>=j7d!N+BLHmCCF")COr.kC9'M&CkFtqo$9?GB!X2!%ltf_u]@NH4l:\'V@@*,>l\NX]%<'^^.hI@DZ@`<"R09NGjf\2J=CJ6&LrIn5L0VV`c'jBo6:@j`NF`:,4F#Lfs,;V[,Th#@<`l36JrYV5Oi_>7^.?9JqN'_l)WJ@]'%+K]:JJhq=e+Y2N:4&8*D!H:<4hD3-A%5B&bjV0D="QMZrAQ`SETFa%]8*>`9REE,[`57]5Q$*CgbuApMOW0(QN&7FWgq9]M86#C,%XG`:)X\$/JR64>FG/`#,7't@4<Zo$dh!0a+?:q:W)u#ffDB^AG*P*-^_3eK7TVK1mEIsVS,^0d?Sq>W\N'=d#b">9a^STKN_Ge`7%l#eWP0^Q$-AB3+T.bk9m4=*gK,4`55%M.P<4,(+D\ooCCa6b:J>8F@^a;JqD/e(+VYK5>"m?o*VYYo4A627e.rCS"q]H]lsaDM&J%+BHWg2L.NC%Rk)6FS8VoaIBbgd,_lb:[mD(42(6%OD'_7F=6=m7(64.oKIPCdG*+K?+;1V#FW)2?7B!@Ico,SG:*V'qn=iHE@b4I%5p$[oD+9#9eUrU+-Yt-_,U[H+;6_m[<QLar[FuWN$I`Gp_47Js(OS^A&V-7n+?q%m2JY:L5)GW%IZ)h@h@6^&"<?h3EAG86geZX^%]e-W+4JttIm3f'*;.\FBoTG<&<c5*CI@%N[`YFMR>D\k#'&.&d8O6!i8SNV@hDeU%"?GZ1.!b^FST6/=PtK1l](_i.;lG?!`SDt8%L3R:E?3\3*RE/;6Ji8)ciKCb7&ZN!ahb,A2=&7QdmLE&7>?lV8VZ@'?:8hM3J08IA,Sr(uU!ASJA0-bPUMc07XKGG4YW5\>HDaXA%GtBL*:gN%m5_5gaHd0L7r<R6q9H1-G\8:U3orC/R'm%pMTaI/I<1IM\3)flQLT8dOlKM,F%+E+f!cg8"aS'h%W.:EK'p-n<!ciL`%#Wj"U64Se95fB@r8@X"fW#Q3-(.%:GLWV>qW1Hlr%Mb_@b2BB:RcPj]?l&?$lYmto</O6K&`#^"h1Ob):\q4I\I(rQN[]XXad#&Y%!.ds-J8e&4E#<aGSB?inLW!b52l\DhfpM[T!`J[cUN87ecE[YIj4aZur<pYb9!jRBLP4(>.j[NZb%=Cb>"Q2ka4;lo);58tP4E)*%5V=@jXj-8>^-c(TR8,4q>DDj2`3PnTNXS=g^<nr5P7OLUKJ1bS>u0fmTUXH/<?H9uKccT38f-j4#@Xql*_teQD@Dlce=&V,`Z(s#%`.g6F#:B+U*DT"h$9LcmAAOC#Z=-L`ER`4KP7rY'Y]S<VNHC3?`5^m!iCeV0%??aO,MX/Pc4[)fLfL:[X%8cC`P._01fFM.ADtnK%?&FrDZX\e!5.r1C3b8+_0I4sW.\6[F.9kb6U,j@kQSQ*>lo7MUXA%ZSl\5c_'@^8Ni3[QI&nS[qUhX@/T]]tr`s0_1[nIMU8lMV+%S8#bQou8=3q$BWu6^hQNHl.BA*9]H4c1aP`aQ\'!Kr2c^El9=B_p!b<P0D+SqLU@WfA61qKVF7j2>bksRdKNic$K,tE81$QHVrkc%iHsODk3741'&)N99#4+T8QgJXpG/nq@ku?SX0VF&hohhR<9rt!4o3KP0AP3nqd-ecHh^pRh0gpm[/41>G'Wpj\9</m?FU8epUtNq%o(9V71\:+L*!g#F_=t5jbg3P_g_hkbb[WDgc)Yjc]C0=5GH,i\]hFBY\p!h]E#75U0E2X<<,]L;Q/T$ZpXcV:Hf6EM]C-Igo=aq8%VVle%3.3H+$gQl$+U[W/^$)l'k^+J9l0`oG]2aXT73QT)mfhe?HP(Gr?A'<4f7AbH7:BCZhodbKZRB_^k'K,N^=Q;`DI3(-ZCABM%7\EM*h[t^E\m.^UaoX<d@,`*PFriX3,G01A((qA<FMk*!kafGOHOG'B%:P*<hkFFt"NqC,_uh$EG)6A-E\5rS:+Y:QM"q?Z;e]^)%Z#];1$8_1nIUpJ7<i0<0Z!KN\d\K_Oju>@>_=ha0[IVn0h4<q[afQe_C0Q72F,(*;R88WKFh$p0:80Is)dg0V`f*"=c&3DH@3\?>%.TfMhR7rXA<1LI>G0M(]hJ>Gg[N8h(?(JT"_CgY%&*N%FM+XL*9H+8qTWdIpL&%ft>]oS>)\=(?E*tA;%YPg.r_>-V"E'Y.GT1LQ%AqPY8jKd[1PWoPW;^sBiBoo7nrBa(3c!*L&[8DSVnjs@Od_8JL)KK5%-.T0)L=_2X<pOe'Wbunshi;sI,/uC::";VmoM@`B)o4'/%?^'@MGDfg#*NdD7Uf6>+%TQ+\etHO,j.Qqn>MA7^Wck@d[%p02.E1U_61^3J]F\>="Hq<)UOCF</A2=/@+6YU8_[Ap$n1CVNR-]8%ZR#-6=nF[YWAC0R5=pd+6F,5:.0<)E#M%<u="OaLA3KJZW\!2#.m2fl,hA#:O,16j0pMg*,]SGfWCQu^B7]cWb=u=<a5!`$h(H;]%BTKY>>Q$O!*Nd&],LWVaD[mH27RVa6,T*U.d4\H@J%+TGfd"PUN8Ch1oEfFl+Li[BegOpJh]nB8E$%0^qAQOs\N\sZo.Xs\0]'lX%$*A"&^]Y5tc1F@0.`Fj@<C+Nl>e+<u2BqI'AND$h1riPq?BPZ[d<4VtHQuVW>c'>o_&pjb7eSbn;Z^FBQt,FJHV(dknG7OccmXW%%/lN\%lPGm:%DLS6RF9g!/Q3Priiu0kF:8(QVDPmC*g\<@c=MkXTm_s#'W`RDPh"s?#3SSp(XBQD5eMNZ9Q;KuPtB+jHM!ht@]X-Z%bEUSt\P*$C/lR@pK-aj5AI=N/RF::We%&-Qs5u-@aK\DF5SutW02oLl>nVBV[Vg&%FE-7ZlN/=;fTmuCHD_[jAVuC#<&\^<'_JU]%;o4SLFS`OAnM3crO8f!PA]erKQ7Z5<l6QhO#X\i8gMoU9`YY;1"s7"m":r<LI#*XCkWQb)EQ@8K&be^Xh^JDT&XnK[KnU?N*4f!,%M-dV7J34"*l5&IW6Gb&PcdNX*4;d;:=R(L[JBt]eO?5E^oFW4gZ@q#nYc1\c+W/Sf#gDInF)K."7N"]XIo@91PdE59-ddVX#@T[h%LcKP!Ta4Ia!;]/->k(KU6^s0^8oGl$+B=(H;`me$.GkK'm34P'T%i$"U#iqPL4#/D!Ql'm5SSo;/rG84=:btQ(KB$q`DqpG'L&<T%`n4QW+Nf9>BFg'X4ULNqo/)SjODa:2=YDDidhIQ6Iotgm&/104fOhfH$Rj=q)Z^:OU2L0$lBfa3h=L*++!`Ca\b?r95'OOK#3TgW%_cK0BE,I&6k\:(+o;OF?L^F]b9]->l'[W!]Sa@,?/^(+#mrh1!o-*VDRkD*77=1M4:uX0i+5q=?E/pXj+i6)`+"_&WLe"J':$hUe%)oM5J;A1;0k8"lIS7<,UVT4X,icX-^:M:+Tl#FI&bOTDL"0c^*98Q-4@T`(Sbt?n/DWF\M.tQlq0@F17&ete]^#CdtJbQtgL:LIo%!/hKPR@->2,G^S`1BCn-lt/S8TGn5l(73!Kk.s^o8Bc`2Ag["t2f_W^R4+:(GssN?4(>]D@5`XZFge;?i9Ff@4+S3YERin37+pTM%V=&N$FRJj1-g4l;E\i99><TN^OP`>8Jj_UaeicNUn-[V4bX=jP/Hd])5nhI/i!p\=17NtGE4RHSX]c!V;)&mnm"d5O.L+*R<\tB?%rn?@Q"+cAc2:lc-n`^5Z/ecMGn9QNA%)1*S#[0"E_i_d7H:c6C?LLMm2l\=/KRNS[-q:DgB2\aCnZR>I^4;^SrD&ICO1,!b<h^Cj%_@Ku$gW$2NX9`Pqa[tFbK`gu+:edIRqSPNskkh\;E:'LH4\P&2`(\0A.#Zq]-R3N$.J3R9OrH-g.*OE9AT5XX"EYnaA-/hB\r)I\%7BCkE[RTfJJ0U$akW[lD$d>Cm0'XqqO5&!G:(7,$U$"#lQ<B>?c1&"bn$q>6B&st`$!HGq#=d<2EA&#/H0?XdS79Lu\!:s4=qQ/6%.62VqJciFuTfdC@pi=a#W7#pQpdoBaF6!t$bk1a.j1B-WPd8Gg,e75s=;4)abC6WKoFq/+&,MSNia-(6EPp-?L&8,bgP_LW&@m@`%V-ZQeDq_6YU,LjM"GUI&<;N82j5a$]TEflfdVYPD,G3IkR:>9:$;WckaueFeI137(0^P,)X`5$`^E61@5sqYb%dReV0\&DuI3;YL%URSD0([Dm`MDPMU#NU!\5XXuu\W;5;*2=\je<+iD1KETQ8Z%=IGCSj_\&Ld1Sh?bA*ST.2<lC:`hVb,Th0?6:V\5-_'0EN$b3U:*%K!o<GD3.TM2@P!1OdJJDT-E#t*:JF)mK2ngBcZ#+<eR4WqGe$*`D?%)RB(=`9^^F)8Q,b5"9M=e$7u)8ms&o6R%!pn?OoO-<R#nW%)nm6`VdLU*-#=4]0BpCrd8[cSjK+R[nPuPM07JP9UJ?-U)+9eVPGk\59mSW'bB_0:[iceEW/@rCJSH\a*ra5;6LZZpY'au;qW%Yi%4P)Z9Afg0-.1j']=cb(Be,\Ek[5@]:TuPLW<(s3eF\_^hb!^3$A&oq0$b&Ks,[9%!S`.RlC5Oi-N[:\EA?g/S8rH&h\m:-m%Lduu%FmdM+X!*,_3/tJ3Fj/h@`Pk\njgq<>io^^2%.aYN5[Kuj#$h<*U9KlPBh0idVZK1D:,AGoiE6KjQb\HrUaN.*JRO\'iK(jZg1(>j%"]Emd'"qM+GH*/+H_Ra9&XNT$\WbAU%j62%*BUPPN_)_f^oiMGCKO/]j+&]k8ALG=oLOiajX5NH/jPhI#RK<uJ5T>QW1b0H"af[E%@&%rb*e-g(`k_5<Bf[73oFb?EdhO]&nXNMIL_"[@1+q8.S.<*VNba.VrJ%r&A>Dbhf`+QC3+]'YcVW6s`laA[bK4b3cma:-MmB]j%[R(tEk(k#48<=$c9d=_F*1)m5Ms88A#faP`4GTYX.)P4!@[!8kjC0-mPRV2NHB`K8C>gO5nE`/j^)+>n64]d-_ZiFpW`8V/CQ@=7%4b[l*\S)[LWgmksW38fC#3W#UhP##YLpW5TOYNBVp@c`=U:&p<eQ#9*m7^M_.6?L6gDPXfS#6OMKn\Ga.OZrA`>RqsTc7(a1!99d%pFK"[jc""KKn=g=fX5hA^^(0%_\9RA,?Y5s.^]ZaA0iDKN6'+-Hh$*,Ch?=.JsZX0kC$Z7Q%3>E%^r;/-(cnf:i;YB@iIn3bS6m)%#S/-5C^a:Q/mi?AW,n9oUGd68SL"^SGI@T_NAJdH?r!YW8aD;O<2Np[b..2g^$fj4KrspHJQ0+3THWh4"Xl]%3^'[sAGsn87ud\*%/b8(o6^U%l16G=@FImWuKm=bS:?Z)K[ps+.7ktbcm*:7H80AXmqdK*[*XE<<G6:1G!PZI38il;dc5_sD0g\J($tX!r0dq<qFI`mf%n^]aqJf@3P;)0!YRcq%#&=K,P=fFi_ci^3DPs@m;:<!c&)E[i)oQD8_Am6Muh5DL-Li7g'+C^K$515-#qOIhN[P@_O9\+*^$tPtu%EPS1+`;6%C>:CBl!uG)pd0\FAbsmpmMj_U&pm3qm5Q:W9DuSRBB`Ibos6rf+^\^5[s64J%p?afRq+nd&rQkN>:VZcKhgbXSg[G1?%]DqQq\)7/C%tFN#n,DnLs4i,"pA7)Qr9(imnP;B!qt#=;j8T=h5>h"/r9!JJj87U2"\@Yll2~>%AI9_PrivateDataEnd