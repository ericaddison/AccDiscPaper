%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: masterLogPlot_wdSensitivity.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: shane
%%CreationDate: 9/24/12
%%BoundingBox: 0 0 517 355
%%HiResBoundingBox: 0 0 516.6895 354.5786
%%CropBox: 0 0 516.6895 354.5786
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.1 x420 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 8316 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0AFFA852FF277DFD79FFA8A8A87D7D527DFFFFA87DA87DA8A8A8%7DA87DFD05A87DA8A8A87DA87DFD05A87DA8A8A87DA87DA87DA87DA87DA8%A8A87DA8A8A87DA87DA87DA8A8A87DA8A8A87DA87DFD05A87DA8A8A87DA8%7DA87DA8A8A87DA8A8A87DA87DA8A8A87DA87DA8A8A87DFD05A87DA87DA8%A87DA8FD0CFFA8FF7DA8527DFFFF7DFFA8A8A8FFA8FFA8A8A8FFA8FFFFA8%A8FFA8FFFFA8A8FFA8FFFFA8A8FFA8A8FFA8A8FFA8A8FFFFA8FFA8A8FFFF%7DFFA8A8FFFFA8FFA8A8FFFFA8FFA8A8A8FFA8FFFFA8A8FFA8FFFFA8A8FF%7DFFFFA8A8FFA8A8FFFFA8FFA8FFFFFF7DFFA8A8FFFFA8FFA8A8FFFFA8FF%A87DFD0DFFA8FFFFA8A8FFA8A1C3FD0DFFA8FD0FFFA8FD0DFFA8FD0FFFA8%FD0BFFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8%FFA8FFA8FFFFFF7DFD14FF7DC3C3FD45FFA87D7DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87D527DFFA8A8FD13FFA8A8FFBC%A1FD44FFA87DFD0DFFA9FD08FFCBFD06FF5227FFFF7DFD14FFA8FFFFBCC4%FD43FFA87DFFFD07A9A3CBA3FF7F557F7F54FF7F55A9A9787F78A37FFFFF%7D27FFFFA8FD13FFA87DA8FFFFC3A1FD42FFA87DFF787F7E7F787F7E7F7E%A97F7F54555479A27F54A97F552A7F5479A9FF5252FFA87DFD14FFA8FD04%FFC3C3FD41FFA87DFD0AFFCBA2A8C4A2CAC3FFA2A2CACAA2FFFFCBA2FFFF%7D27FFA8A8FD13FFA8A8FD04FFCABCA1FD41FF7DFFA8C4A1C4A1CAA1C4CA%CA9ABC9AC3A1C3A8C9A0BC9AC39ABC9ACAFFFF5252FFFF7DFD14FF7DFD06%FFBCCAFD3FFFA87DFFFFFD05CACBCAFFCAC3C3C39AC4C3FFA1C3C3C39ACA%C3C3CAFFFF7D27FFA8A8FD13FFA8A8FD07FFBCA1FD3EFFA87DFD0AFFAE7D%A87DA87DA8AFCA7C83A8FFA8FFA183A8FF5252FFFF7DFD14FF7DFD08FFC3%C3FD3DFFA87DFFFFFFA883FFFFA883FFA8585859FD0458A8AE7D58345F58%5F5858FF7D27FFA8A8FD13FFA87DA8FD07FFA8C3C3FD3CFFA87DFFFFFFA8%FFFFFFA8FFFFFF83A8A8A87DA883FF83AEFD0483A8AE7DFF5252FFA87DFD%0DFFA87DFF7D52FFFFA8FD09FFCAC4CAFD3BFFA87DFD1DFF7D27FFFFA8FD%0BFFA8A8A852FFA852FFA8A8A8FD0AFFC3A1FD3BFF5227F8272727F82727%27F8FD1327F852FFA87DFD0CFF7DFF7DFF52FFFFFF7DCFFD0BFFBCC4FD3B%FF7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A8A8FF7DA8FD0EFFA8A8A8FFFFA854FD0DFFBCA1FD5BFFA8FD14FF294FFD%0CFFCAC4A1FD59FFA8A8FD13FFA8A7542AA9FD0CFFC3A1FD58FFA87DFD14%FFA8FF7F2BA9FD0CFFC4CAFD58FFA8FD13FFA87DA8FF7E24A2FD0CFFC3A1%FD56FFA87DFD14FF7DFFFFFFA9247EFD0CFFC49AFD55FFA8A8FD13FFA8A8%FF837DFFA3247EFD0CFFC394FD55FF7DFD14FF7DFFA88383FF7D027EFD0C%FFC394FD53FFA8A8FFFFFF527D5252A8FD0BFFA8A8FD05FFA8582978A758%FD0AFFC3A1FD53FF7DFFFFFF27527D27A8FD0CFFA8FD07FFA94F2983A8FF%AEFD08FFCA93FD52FFA8FFFFFFA827527DFD0CFFA87DA8FD07FFA84F79FF%FF7D58AEFD07FFCA93CAFD4FFFA87DFD04FF52527DFD07FFA8FF7DA8FFFF%7DFD0AFF4F4EFFFFA8A8FD09FF94CAFD4EFFA8A8FFFFFF275227A8FD06FF%7D52A82727FFA8A8FD0BFF4E2AFD04FF7D58AEFD06FFA1C3FD4EFFA8FFFF%FFA8277DA8FD05FF52FF7DA85252FFFF7DA8FD0BFF792AFD04FFA8A8FFA8%FD05FF9AC3FD4CFF7DA8FFFFFF522752A8FD04FFA8FFA8A8A87D7DFFA8A8%FD0DFF7924FD05FFAE7D2DAEFD04FF94BDCAFD4BFF7DFFFFFF7D52527DFD%0DFFA8FD0EFF7F24FD07FFAEFF7DFFFFFF9ACAFD4AFFA8A8FFFFFF522752%A8FD0CFFA87DFD0FFF7F24A9FD07FF832DA8FFFFA1BCFD49FFA87DFFFFFF%A827A8A8FD0DFFA8FD10FFA324A9FD08FFAEFF7DFFC4BCFD49FFA8FFFFFF%A87D52A8FD0CFFA8A8FD11FFA303A9FD08FFA8832DA8A8B6CAFFCAFD45FF%7DFD14FF7DFD12FFA924A9FD0CFF5876CAFD45FFA8A8FFFFFFA8277DFD0D%FFA8A8FD13FFA903A3FD0CFF58A0C3FD44FFA9A8FD04FF2727A8FD0DFF7D%FD14FFA9247FFD0CFFCABDC3FD41FFA97F027EFFFFFFA82727A8FD0CFFA8%A8FD15FFA92479FD0CFF58C3A8FD3FFF5455030353FD04FF2727A8FD0DFF%A8FD17FF2A79FD0BFF58AFCAC3FD3CFF794E4F244F78A8FD04FF5227FD0D%FFA87DFD18FF2A54FD0AFFA8AEFFCA9BFD39FF2A552A0354A3FFA87DFFFF%FFA827527DFD07FFA8FFA8FFFFFF7DFD19FF4E55FD0DFFCAC3FD35FFA92B%7F4F0379A9FFFFFF93A8FFFFFFA8525252A8FD05FF7D527D5252FFA8A8FD%1AFF4E4EFD09FF83A8FFCACA9BFD31FFA87FA97723247ECBA8FFFFCA9AFF%A8FFFFFF527D7D27A8FD04FF52FF7DA85252FFFF7DFD1BFF544FFD08FF7D%83FFFFFFC39AFD30FF7F236A46C39BCBFD04FFC3CA84A8FFFFFF7D7D7DA8%FD05FFA8A87DA8527DFFA8A8A8FD1BFF542AA9FD07FFA8FD04FFC394FD2B%FFA92A4EA92AC37785FFCA9AC3CACAA1CAFFA87DFD06FFA8A8A8FD07FFA8%FFFFFFA8FD1DFF782BA9FD0CFFCA94FD2AFF55787F248DCAFD05FFBDC3A1%CAFFFFFFA8FD04FFA8A87D27A8FD0AFFA87DA8FD1DFF7824A2FD05FF8383%FD06FF93CAFD24FF54A9FFA924FFCA94CAFD0CFFA87DFD04FF2752A8FD0D%FFA8FD1FFF7F247FFD05FF58FD07FF9AC3FD22FF2A552A792AA9C3BCCAFD%0DFFA8A8FFFFFF272752A8FD0CFFA8A8FD20FFA92478FD04FFAEAEFD07FF%9ABCFD17FF7F547FFD06FF2A79FFFF78A2BCC3CAFD0FFF7DFFFFFFA8A8A8%FD0EFF7DFD21FFA92A54FD0DFFCABC9BFD14FF4F4EA94E4FA9FFFFFF5555%FFFFCAC3BCFD11FFA8A8FD04FFA87DA8FD0CFFA8A8FD22FFA92A4EFFFFFF%58AEFD08FFCABD93C3A1CAA8FD0EFF4F4EFFFFFF7E2A4E7E4D479BBC9ACA%CAFD13FFA8FFFFFFA8275227FD0DFF7DFD24FF552AFFFFA858FD0BFFCAC4%9ABCBCC3C3C3C4CAC3C4C4CAC3C3CA7847CACACA9ACAC49B71A2CACACAFD%15FFA8A8FFFFFFA8525252A8FD0BFFA87DA8FD24FF7F24A3FFA8FD0EFFCA%FFCACAA1CAC3C4A1CAC3CA9B484ECFCAFFCAFFCAFD1CFFA87DFD04FF5252%A8FD0DFFA8FD26FFA92479FD1AFF7F2B78FD23FFA8A8FFFFFF7D52527DFD%0CFFA8A8FD28FF4E2B2883FD14FFA97F244EA8FD24FFA87DFD04FF5252A8%FD07FFA8FD05FF7DFD29FFA955057EA9FD0FFFA9A3544F4EA9FD26FFA8A8%FFFFFF275227A8FD06FF7D527D7D7DFFA8A8FD2BFFA9532A4E79547FA2CB%A9A9A2A9787954792A4E4E7FA9FD29FFA8FD04FFA8FD07FF7DA87D527D7D%A8FF7DFD2DFFA87E7F79787F7E7F7F7F787F787FA3FD2DFFA8A8FD0BFFA8%A852527D5252FFA87DA8FD2DFF2DCFFD38FFA8A87DFD0DFFA87DFFA8FFFF%FFA8FD2EFFA87DFD3AFFA8FD13FFA87DA8FD2FFFA8A8A8FD36FFA87DFD14%FFA8FD31FF8358A8FD35FFA8A8FD13FFA8A8FD32FFA8AEAEFD35FF7DFD14%FF7DFD35FF5858AEFD31FFA8A8FD13FFA8A8FD36FF7DA8FD32FF7DFD14FF%A8FD39FF83A8FD2FFFA8FD13FFA87DA8FD38FFA82D84FD2DFFA87DFD14FF%A8FD3BFFA8FD2EFFA8FD13FFA8A8FD6AFF7DFD14FF7DFD69FFA8A8FD0DFF%7D52A87D7DFFA8A8FD0EFFA8FD0FFFA8FD1DFFA8FD1DFFA8FD0FFF7DFD0C%FFA8A8527D52A8FFFF7DFFA8FFFFFFA8FFFFA8A8FFA8FFFFA8A8FFA8FFFF%A8A8FFA8FFFFFFA8FFA8A8FFFFA8FFA8A8FFFFA8FFA8FFFFFF7DFFA8A8FF%FFA8FFA8FFFFFFA8FFA8A8A8FFA8FFFFFFA8FFA8FFFFA8A8FF7DFFFFFFA8%FFA8FFFFFFA8FFA8FFFFFF7DFFA8FFFFFFA8FFA8A8FFFFA8FFA87DFD0BFF%A87D7D52A8A87DFFA87D7DA87DA8A8A87DA87DA8A8A87DA87DA8A8A87DA8%7DA8A8A87DA87DA8A8A87DA87DA8A8A87DA87DA8A8A87DA87DA8A8A87DA8%7DA8A8A87DA8A8A87DA87DA8A8A87DA87DA8A8A87DA87DA8A8A87DA87DA8%A8A87DA87DA8A8A87DA87DA8A8A87DA87DA8A8A87DA87DA8A87D7DFD0DFF%7D52A8A8FD84FFA8FD0BFFA8A8A8FFA8A8A8FD0BFF7DFD0CFFA8A8FFFFA8%7DFD0BFFA8A8FD0CFFA8FFFFFF7DA8FD0BFFA8A8FD0BFFA8A8FFFF7DA8FD%11FF7D52FD0BFFA827A8FF5252FD0BFFA85252FD0BFF5252A8A827A8FD0B%FF7D52A8FD0BFF52A8FF5252A8FD0BFF52A8FD0BFF7D52A8FF527DFD0FFF%A8522727FD09FFA852A87D52FF7D7D7DFD09FF52A87D52FD09FFA87DA852%FFA87D52FD09FFA87D7D7DA8FD09FF52FF52A8FF7D527DFD09FF7D7DA87D%FD09FFA85252A87DFF5252FD0FFFA8FF7D52A8FD09FFA87D527DA87D52A8%FD0AFF7D527DFD0AFFA8277DA8A87D7DFD0AFFA85252FD0CFF7DA8A87D7D%7DFD09FFA8FFA8A8FD0AFFA87D52A87D7D52FD1FFFA8A8FFA8A8FD0CFFA8%FD0DFFA8FFA8FD0DFFA8A8A8FD0BFFA8FFA8FFA8FD19FFA8FFA8FFA8FDBE%FFA8A8FD07FF7DFD05FF7D7DA8FF7DFFFF7D7DFD68FF527D7D7DA87D7DFF%2752FD05FF7D27527D277D7D5252FD68FF7DF85227272752FF5252FD05FF%5252F8272752277D52FD68FF7DFD04522727FF7D7DFD05FF7D527DA85227%52527DFD6CFFA8277DFFFFA8A87DA87DFF7D52FD04FFA8527DFD71FFA827%27F827FD7BFFA8277DA8A8FD34FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">masterLogPlot_wdSensitivity</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>shane</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default"/>
            </rdf:Alt>
         </dc:description>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2012-09-24T11:04:14-06:00</xap:CreateDate>
         <xap:ModifyDate>2012-09-24T11:04:14-06:00</xap:ModifyDate>
         <xap:MetadataDate>2012-09-24T11:04:14-06:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>176</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWDfmF5c17W/Luq&#xA;W05W6jS4tbjRraxNxby1ilBYXJWbhOtDyCFeFRUqSFoqxzRfKfmi3/Oa+1y6sGlhuLydjqTxwemm&#xA;nGxSO3WK4V/rBcTpwaBl4DdwK0YqsxTXNcu/NOo6VBqOn2S2kojtrO4tZZrieMWsE8kyyC5gXir3&#xA;PEgRmlOu+CxdNgwyMOMD0ja0b6fnj6n6n1nT/rX++Pqs3H7VPt/Wv5d+mFrVXh84iaJUvbBom5eq&#xA;5s5gVoPhoPrW9Tirlh84m4dGvbAQBEMcv1OYlnJbmpX61txAXeu9fbFUNC/neWwnmWexW6je4SC3&#xA;ks50D+jI6REsbrZZQgatOh74qiZYfOKyQiO9sHRnImY2cwKJwYhgPrXxfGFWnvXtirlh84m4dGvb&#xA;AQBEMcv1OYlnJbmpX61txAXeu9fbFVIr50Szmme6sPWj9UxwpZzNzVGb09xddXUA0ptWmKtqvnR7&#xA;e2lW6sA8vAzRtZzKY1YVbrdblfDFVRofOIuERb2wMBRzJL9TmBVwV4KF+tb8gW3rtT3xV0UPnFpJ&#xA;hJe2CIrgQsLOYl04KSxH1r4fjLLT2r3xVDTP53isIJmnsWupHt0nt47OdwnrSIkpDC63WIOWrToO&#xA;2KolofOIuERb2wMBRzJL9TmBVwV4KF+tb8gW3rtT3xV0UPnFpJhJe2CIrgQsLOYl04KSxH1r4fjL&#xA;LT2r3xVSEfnj6ikpudP+uFEL2/1WbiHNOah/rW/Hfem+Ktz/AOMI7y2gW6snjm5+pMLGekfBaiv+&#xA;lftdMVVFh84m4dGvbAQBEMcv1OYlnJbmpX61txAXeu9fbFVIx+ePqc0gudPN0vq+hB9Vm4vxZhFV&#xA;/rXw81Ck7fDXviqrLD5xWSER3tg6M5EzGzmBRODEMB9a+L4wq0969sVU0/xg2oT2xurJYYoYpEuP&#xA;qM/F2kaRWQf6VSqCNSd/2sVbSLzobeRnu9PWcGQRxi0mIYKzCMlvrW3NQCfCuKttF50EcJW708yM&#xA;VE6/VJgEBHxEH618VMVXej5x+scPrth6HCvq/U5q86/Z4/WvDvXFVO1/xhNPeRyXVlElvMI4nNjP&#xA;SVTFHJzWt0NgzlNu64q0I/PH1OGQ3Oni6b0vXg+qzcU5Molo/wBa+LgpYjb4qdsVVWh84i4RFvbA&#xA;wFHMkv1OYFXBXgoX61vyBbeu1PfFVn1fzu/rqL/ToSrgQSNYzyBk4KSzKLxKHkWWle1cVRPljUbv&#xA;U/LWk6leIsV5e2Vvc3MaBlVZJYld1VWLMAGbYEk4qmeKuxV2KuxVhc2gaXrOr+Yo0vGs9cjuY/q1&#xA;5BIDc2qm0tTziRiwQSceLkKOa/CTkZRtytJqjhldcUOsT9Mvf7uncd038ua9e3BGma5DFY+YUR5m&#xA;so5Vl9S2ST01uUK/sOabHcHrghI8jzbNXpox9eImWLYXVVKr4T5hPcm4LsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVYd5m0rSdU8+6FbarYwahaJpOrzC2uYknT1EuNNUOEcMOQV2ANK7nxxAVKK&#xA;flh/1Icv/hOS/wDZPmw/k6X87H/ysj+tXU/K/wD6kOb/AMJyX/snx/k6X87H/wArI/rVQ1I/lraW&#xA;t7P/AIS0uFoNLm1K1tr2xhtJ5XhMqmL0ZYlcV9GtadDXJ4uzZSMRd3MRJj6gLrext1VjTebfIEJl&#xA;E/kbSGeC+SK4W2torn0NOBk9e9laK3dOMKxfFRtiwDcMzh2FdVLnHaxVy2qIs3vf2bWoT3VLjyBY&#xA;+b4NAHkzRXhkvV0+a6eK2SRJGitJFZYBA7yBjqMa/DsKEsVXfMTF2Xx4Dk4jfDxVXnMc72+g/osr&#xA;SVz+Z/y1tNWvbGfyRplxLC12Lezs7W0e742Ny1vI8yyxwxIG4+oo9SvGmxy+PYkpQEhKr4dz9Pqj&#xA;YqrJ7uXNWT+UrD8vPMVxdxJ5N0+0+rxxzBZrKzLUa4ubRkb0xInJZbGQ/CxHEr3qMwNZojgANiVn&#xA;p7oy6+Ux8bVKvyQumr+YenTTGLSdK8zajb2MAb0o7W22YpFxK+kikkjjQDqMwVeg+TfT/wAIaH6b&#xA;c4/0fa8H5Fqj0VoeRJr88VTjFXYq7FXYqkuiyTHWvMEZipCLyMrNyG7Gytqrx67eOKqvmDQ/0pbL&#xA;6FzLY38DLJbXlu3B6oeQjc0blE5A5p3GRlG3K0up8KW4EonmD94/pDoeiH8u+YJ7gx6TrRt7fzTF&#xA;b/Wb7T7dmZBGZGjWWNmG6PxBpUla0OCMuh+ps1elEbyYuI4DKhI99XR8x9qe5NwXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FWNX/8A5MnQv+2NrH/UVpmKo25i84GeQ211p6wcn9JZLednCU+AMVmU&#xA;Eg9dvuyB4vJy4S09eoTv+sP+Jaki84/F6d1pw3bhyt5ztQca0nHflX6MfV5JEtP1E/8ATD/iWN+e&#xA;l1Nte0z6rdwQSIiIfWlVIw80hFWjLxkhlRgtVlDbiiH48hOcwdjXxb9Hn0sISGXmfLfyo0evnH3y&#xA;+ljlonmCe3PoXBFvercx6fIL+MTSXsiwIskkpml9SOOZW5R1+LkP3XRRATyEcz5bud+b0Vg3AkkX&#xA;6duEE3ECh6iDHfy+vqmvmp9Rs/MyTRTmx9ea2ZL9WhjgKRxgFmSVo/UJPNHo54oRVW/d5PJlybCz&#xA;X2fi3F0+XSwxXPhsiWxu794uqFVtueo9Syw0vz+lVimWBm9MyzXD291PI7Nbxy/HK89B6ZldKUX7&#xA;PwCvHIxllAqzTkZM2hJsgH3XEfxEcgP6IPM/0jzZH5CkDwXzXXprq73B+uqCC4biDwrv8CuXMY/k&#xA;II2IJuhlnKIEjydXrTi8SsRFUP2fGqvzth35Fs66r+aDIvNx5t1AqlaVIC0FT0rknEejeUCx8p6I&#xA;WHFjYWpK1rQ+iu1cVTbFXYqkPmzzfZ+XdKk1BreW/wDSmiglhteLtGZm4h5akcEHcnFUK3m/Uo/O&#xA;9t5Zk0ZvTuo57hdQS4jcJbwAD1pIgOSq8rLGorUk+ANFUdosUg1rzBKZnMbXkai3ITgCLK2PIELz&#xA;qfdqe2Kp1iqV6/oSarFbsk8trd2cyXNtNA5jLPHXjHKVFWibl8ad8jKNuVpdT4ROwlGQo2L59R3S&#xA;7i1o+sTTS/ozUgkWt28EUt4kKyfV2MlRygkkVea1U+474xl0PNdRgAHHDfGSQLq9v5wHJNck4rsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVYJ5581+X/KnnHQda8w3Y0/Sjp2qWf12RHaIXE0+nyRxFkV&#xA;qM6QSMoPXifDFUp1D88fyMvyhn83KhjqF+r3F9bDf+YQeny+nARbGUQVl3+dv5FXSQpL5vCiBeCG&#xA;G51CEkbD4zEULnbq1TiYqYA/2lJ/NP5kf84/eYvqxu/OCRPaQyQwSRNPzBfjwlLvGzGSLiSjE/tH&#xA;xyE8Yk15MAnzS2681f8AOOc1y0yeb4rcN6nJIUZRWW6a6ZqmEnkOfBW6hQPDInCGB0sSfx32jl/M&#xA;X8hk0a30hPOyJaxLdRS8UIaSK9NZk/uaLWuxUV+nfJeGKpl4Aqr7/tSufzF/zju7zSReeDC8tyLt&#xA;SOTCN19QKsYaE8VEbolP5UUeNY+AGB0ke8o/TvPP/OPOn6hp19beb4I5NOf1EVYyodjbxW7F6Q1P&#xA;L0Obf5RJwjEAbZR08QQR0R//ADjvqFlq7/mNqGm3PqWV/wCaL2a0u46fFHKiMkihwexqOQ+jLXIe&#xA;oeUFK+U9EUsXIsLUFjSp/cruaADFU2xV2KpLqvk/QdQstQtvqyWjaqY2v7q1SOOeVoXDoXfieZB/&#xA;mr1OKq9p5fs7bX9R1xXkkvdSit7eT1CpSOK15lEiAUFQWmdmqTucVec3/m9PK/5l6xda9pUR8tz3&#xA;FtFB5mS3POxuXsoE9O5mIp6UgOzKfhrRtjXNrpdBDUYj4Z/fxv0/zo/0fMd3VXq8UscsaSxOskUi&#xA;hkdSCrKRUEEbEEZqyCDRVdgVJ/Mvl5NWggmhYQ6tp7NPpN23IrFcFCgLqpXmh5UZT1yE4373M0eq&#xA;OIkHfHPaQ7xf2HuLtI1uaSb9GapG1vqkCxo0rKI4LuT0g8r2dWZnRT1B3XvjGXQ81z6cAccDcDfm&#xA;Yi9hPbY/enGTcN2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVRu7KzvYDBeQR3MBIJimRZEJG4PFgRiqA&#xA;/wAJ+Vf+rNY/9I0P/NOKu/wn5V/6s1j/ANI0P/NOKu/wn5V/6s1j/wBI0P8AzTirv8J+Vf8AqzWP&#xA;/SND/wA04q7/AAn5V/6s1j/0jQ/804q7/CflX/qzWP8A0jQ/804q7/CflX/qzWP/AEjQ/wDNOKqr&#xA;aJoMFhNbjTbcWTfvZrZLdCjFd6+kqnk2221cVQ/k30/8IaH6a8I/0fa8E4laD0VoOJAp8sVTjFXY&#xA;q7FXYqxhDYfWvNEesyW36FluFS4iuo6RlWsbcP6ssjekUK/slfpwxyGBEgaI6oMgObCo7m//ACpm&#xA;WaOSTVvysvJB6cyMZ5tGaQgCh+JpbQsdqbr8/t9CODtKO1R1QHuGT9Uvv/3JBt6vaXdreWsN3aTJ&#xA;cWtwiyQTxsHR0YVVlYbEEZz84GJMZCiFVciqA1jR7fUreh4w3sSv9RvxHG81tI68fUiMitRv1jbI&#xA;yjbfp9QcZ74n6o2akO40lmj+Zqam3l/WAbXV0JWyaZo66hFEgLXMKpQCu5aP9nIxnvR5/e5Oo0fo&#xA;8bH6sfWr9BP8J/QerIssde7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVsgkMbC&#xA;NgshB4MwLKGpsSoK1HtUYqlflAOPKeiByC/1C15ECgJ9Fa0BJp9+KvFW/Nn85VurnSWvfJ48zWkl&#xA;vbT+X/R1L6yLq7RWiiDet6TAtIEMgfgD1YYq99tzMYIzOAsxVTKq9A1PiA698VX4q7FWPaVFpk+u&#xA;eZbeV1mnkuI1uLJ5C6+kbK3AJtyxQBtxy479MVIRB8n6BHpd5pun2y6Xb3wYTiwCwbsvAsFUcK8f&#xA;FciI1y29zDwwBQ29zzK70XzZ+UNhcXPlyZ9Y8mMGe4s7qMzTabITya6RITF6lv19RE48ftAfaze4&#xA;a10eCcq1P8MpVU+6Jqt+4myeXcoiQKuz5vQdE80Tnymuv63JaSWvD1xe6QZ7qB4CBSUJ6frL35KA&#xA;3HqT1ppckJ4iY5BUo80CRAuX2J1peraXq1ml7pl1FeWkn2Z4HDrUdRUdCO4O4yIkDuGUZCQsIbzD&#xA;5c0/XbBrW6MkMg3t762b0rqBqg84JQCyNtQ06jY1GCUBIOZpNXPBPijR7wd4n3jqllp5pm0/Wl0L&#xA;zBF9VkuHddGv+ReK7ijUGsjhVWObfdTSp+z2yInRouTPRDJj8XCeKvrj1iT3d8fP5snyx1jsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqncGEW8pmf04eDepJyMfFabnmCCtB3rtiqV+T&#xA;fT/whofptzj/AEfa8H5Fqj0VoeRJr88VfN/li8sfMf5swLqWveU7u5sdUsdWg1C0W5We9u7hBDJH&#xA;aObhhyRLSJWjoUrxPGu+KvqjFWCefbnzfPoOriBLjRlsJ7V9PvLCeOWW+jMvGWORDEzwpQgngwY/&#xA;zAVBVY1pWp+b5Pz0u4ZJ7o6R9YngawLXXCO1WwieGZomH1NYWuFfhJH+8Zm4tsCAq9C0ie8Gva3C&#xA;ttytTeoXuuajifqFttw6ntiqfYq4gEUPTFXl2peX9Y/LfULjzB5StnvfKNw3q675Vi3eBv27vTgd&#xA;gabvFsD27cN/i1ENbEY8x4cw+nJ3/wBGf6Jfgll+mXGk+YPLTal5QvorNNTDTQalbRIw9Zj8Tyws&#xA;AGcEUcP8XyOaTU6WeGZhIcMwwMdttiq2+pa3pOjTXPmREupbZjWfSoZpOcXIKrm3+ORW3qwXkAAT&#xA;XKASBuxEjEer7G45/Knnfy5Kkbxarot4PTmUFl3UhuLD4JI3U0PZhscfTMd4cjS6uWOQyYjUhyKX&#xA;J5gufLmp/o3zAyrpVw8jaVqwUpbW8CBRHb3k0jUWWuyMT8e37RpkeLhNHk7E6WOohx4frFcUf4ie&#xA;soAdO8dPcy0Gu46Za6p2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqN3LcRQF7eD6xKK&#xA;Ui5BK77/ABHbFUv8oFj5T0QsOLGwtSVrWh9Fdq4q8X0TQdVsvzRv7HV7rzVNaRa5Dd6XLb6dXS5Y&#xA;2ghK+tdJbr6cccnJXVXCUG+/I4q9+xV2KuxVJdFikGteYJTM5ja8jUW5CcARZWx5AhedT7tT2xVO&#xA;sVdirsVeZa/5U1zyXq9x5t8i2xurK5YyeYvKiHilx/Nc2Y3CTr3UD4/nsd9p9Xj1UBh1BqQ+jJ3f&#xA;0Zd8fuSzbyp5r0PzVokGs6LcC4s59j2eOQfailX9l1ruPp6UOarV6TJp8hx5BUh+LHkhEaxo0Wpa&#xA;fPaC4uLB56f6ZYyehcIQwaqyAHuu9QQRscxJRsMZRsVySW8g1DTvK9xB5iik83wk8ZY7a0iEzxMR&#xA;QPbcwkhTqSm/gu2RIIjv6k4s2TCRIE8Q6jYpRpvnIaXBPqs14+o+T3nnabUpY2gm0s8lSK0e24ev&#xA;InJuIfjVf2tt8gMlb/w/c7bDDHrYgYhw5thw/wA/nxSs7RPl16M/RldQ6nkrAFSOhBy91ZFN4odi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdiq2RWeNlVzGzAgSLTkpI6jkGFR7jFUr8oKV8p6IpYu&#xA;RYWoLGlT+5Xc0AGKvMU/M/zJY/nJf+UX1DS7vSrm+t1hWb66tzaLJBHytleO2+rF2b41DSdXClqk&#xA;DFXsmKuxV2KpDoaW3+IvMTi243Juog93wA5J9StqJ6nU0O9MVT7FXYq7FXYq8480+TNb0DWpfOnk&#xA;KNTfynlr3lwt6dtqaVqXX9mO6G/F6b9+rBt3pdbjzYxg1P0/wT6w/XHy/ZRZT5M87aF5v0gajpUh&#xA;BQ+neWco4XFtMPtRTR9VYfce2YGt0OTTT4Z/A9CO8IT7MNUDrOiabrNi9lqEZkgcqao7xOCjB1Ky&#xA;RlHUhlB2ORlEEbsZQEhRYdai/wDIt7Bp31241zTL43N2YrgzXWqBg0KEQU+B409Xm4oDSrCu+VC4&#xA;GuY+1z8AhliMc5Vl/hJ4RExHPiP87uPXkWfg13HTL3CdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdiryXz7/zkL5L0aweDS1/T19dQubWJAPqzss/1d4pGPxV2YgBCGA67jOh0Ps5nym5+iI59/K9h&#xA;+1NM8/L+6gu/Inly5t1CQTaZZvGgp8KtboQu3h0zQ5IGEjE8wh4D5r1LQtM/PWbzPe2MIisNSto5&#xA;Io7PV5zLbtZxltUEtuZLMvESFCCMk8K9aNkFfTUUiSxpKhqjqGU0I2IqNjviqW+ZPM2j+XNOGoar&#xA;KYrdpY4E4qzs0kpoigKD1+7FUNb+dvL1x5hk0COWT6/G7QhmhlWB544xNLDHOV9N5I42DMoP6moq&#xA;v0Vbn9NeYGMiG2N5GEjCEOH+pW1SX5UIp24/TiqdYq7FXYq7FXYqwDzp5F1iLVz5z8jyJaeao0C3&#xA;tjJ8NrqkKdIbgVUCQD7En0EgbruNFr4GHgajfD0PWB7x5d4/BU78j+e9J826fJLbo9nqdm3o6ro9&#xA;yONzaTioKSIaGhIPFqUPsagYuu0E9PKj6oS3jIcpDyVkmYKpR5htNIX6prmoym3GhPJdrcg0Co0T&#xA;Ryh/haqFHqQO4GRkBzPRhMDmeiEnsLjQbiTUNJhefTriR5b7SbeNWkkubqVS92sjutOO5ZBsdz16&#xA;xI4dw7OGUZ4iGQ1MCoyJ2EYj6aA+R+Cd2OoWF/bLc2NzFd2zEhZ4HWRCVNCAykjYimTBB5OHkxTx&#xA;nhmDE9x2V8LW7FXYq7FXYq7FXYq7FXYq7FXYqhdT1XS9Ks3vdUvILCzjID3NzIkMSljRQXcqoqTQ&#xA;b5ZixTyS4YAyl3AWVYL50/Ory/5V8wafp00D3tjNCLnVNTtm9RLKGVuFu7qqtzEr/wCUKCh3qM2e&#xA;h7InqISIkBMGhE85HmfdQ8mfBKrrZ5wmifnb+Yo006nKumW9qf8AEmh6qyoIhJKImsrYpEK8oayb&#xA;spah3rtXfnPoNFxcA4yf3co9dr4pb9+3LZiyXT/ye8l+TYoBZWSeYPOEi2dxY2FzPHEoubFeEl1C&#xA;p4MsfKRpZFZmBNAN6ZpNf7R6jNcYnhB4thzMZHkfcNrFOXpdN4nqmeDGOcqJA7ht3vTvJqcPKGhp&#xA;RQV0+1BCDitfRXou9BmkJtw2Aap+Tnk3TtAuNOl17zLLp0Fm8Q0ODV7uT1bZIiv1aG0DUcMg4LGF&#xA;ofs4qzzyj5k0rXdJhuNMhvYbZI4wq39ndWT8WQFeP1mOISCn7UZZffFUJrPkTTr6x1mG2nntrnW2&#xA;he7mlmuLqNTBIHX0oJZTHEDuCIgoPetBiqXW35YWifmHJ5wnuhI0cslzY2scbR8Jp7ZbWRpP3jQv&#xA;+7U0ZYlc1ozMFGKpro8OnyeZ9df6w5vobuNjbLcyBQjWNuoZrcP6ZrvRin6sVZFirsVdirsVdirs&#xA;VYR52/L+5vtRi80eVrlNJ842YolyR+4vYgB/o16q/bRgoAbqvboM2uh7QEInDmHHgl06xP8AOj3H&#xA;71RXkL8wbXzNHPYXtu2k+adO+HV9DnNJYm2/eJX+8iaoKuNtxkO0OzjgIlE8eKX0yHI/qPkrJtQs&#xA;bbULC5sLpedtdxPBOnikilGH3HNYRYpEhYooXQZtO+o/ULG4NyukkafOzGriSBF2kNFHLiVJoO+C&#xA;NVQ6MYEVQ6bJFfeXdR0LUDq/lSD1UnemoaB6qwW0hlcGS6jqOKzjv2Ye+QMTE3H5O5x6uGeHh5zV&#xA;fTOrkKG0T/R+5kGi67pGt2X13SrpLu25tGXSo4uhoyspAZSPAjJxkCLDgajTZMMuHIOGSOyTQ7FX&#xA;Yq7FXYq7FXYq7FUHd6zo9ndwWd3fW9vd3Rpa28sqJJKelI0Yhm+jLYYZyBlGJIHM1yVin5i+Ztag&#xA;u9J8qeWJ1g8z67LVLpkWVbOyhPK4unjYFTt8CK2zE+IzYdm6XGRLNmF4sY5cuKR5R/Se5Xnl3bef&#xA;vPvmCy8keZ7OC403y7Oza/q1jcQhbiR4ZEtJzDRvSdRVzEQQX6qFFMuya3T4BI6Uy48gruOIdd/4&#xA;iehHIDm7PDpPDgM2TYc4RIvjo7j+r3n5M48u/kX5H0K3ultvrNxeTgiHUrp0kuLYekYVFuRGiKEV&#xA;jQFT71oM1efOcnDYAlH+IfUT1lKXMyKD2rmJNn0E/R/BV3w8PQe5O7RfPtgTY+nZanapGyWeozTy&#xA;Qzho4f3Zuo1idXMkuzGOlBvQ9MxBxDzWZ0k/VcoSveIAI3O/Cb2ocr+aKg8vxKtxf6zcGS+mUNNc&#xA;pIYBbRBVLwQTR+lKsPJORq2/U5KMep5uPn1AkBCA4YD7f6UunFSr5N9P/CGh+m3OP9H2vB+Rao9F&#xA;aHkSa/PJOK8o0r8tru0/MRvMGva/5Y1HWJ7+C7uRJYcb6No4441jtXe6dovhjBX4T8Rrir2/FXYq&#xA;7FUl0Vrn9NeYFMaC2F5GUkDkuX+pW1QU40Ap35fRiqdYq7FXYq7FXYq7FXYqxDz1+Xlr5ie31bT7&#xA;htI82aaCdK1uDZ16n0ph0lhYn4kbxNOpB2Wg7ROG4SHHhl9UT947j5qhvJH5iS6hqL+VvNFuuked&#xA;LNAZrPl+5u0AJ+sWTk/GjBeRXqu/gcs13ZohHxsJ48EuvWPlLuP3qnnp6Fo/mN5mlaG+8yMkYibk&#xA;Y5JrSJqFaDijmEb1O/EU366bYH3te0Zeck8ybYxzVfKUraqutaFd/ozVSUS7qpktriEPzdZIOSrz&#xA;b/fg+LK5Q3sbF2ODXDw/Cyx44dOkomuh7v6PJDWX5h6cl6NM8xW7+XdUdqQw3bKYJQWKoYblf3TF&#xA;qfZqG9sAyi6OxbMnZUzHjwnxYf0eY98efx5MpimhmTnC6yJUjkhDCoNCKjwOWurlEg0V+KHYq7FW&#xA;C+b/AMwNSh1yLyj5OtIdV81yqJbkzswstPg/37eNH8W/7Ma/Eev8obbaPs+JxnNnJhhHKvqme6N/&#xA;fy+2lAXvnzzx5PvDJ56022ufLcnADzFokcxjtSxIIu7aV5pQtf20JHQbk0F0NBp9TGtPIjL/ADJ1&#xA;6v6shQ+BSmHmT86Py90fQ31KDWLTVbhl/wBD06xnSaeaQj4E4Rl2Sp2LMKL89sxsPZOeU+GcTjj1&#xA;lL0gDruaZQxykaiCSwny9onk7zEl9e+dEj80ebtcCtPa2CPdR6fAUMtva2txGfTh4r1kEoq1asdy&#xA;b9R234Uo49LIxx4+7+M9ZS6G+l/Y5x7MzxjxTHBH+l6etcufyCfeT/y2vbW8urwLdaZFexLbXNxq&#xA;Nyb/AFaa0aMr9WWdWC2aRNQr6bMx2rQqMwNZ2lm1IEZcMID+GIrc8zt1Zk6fB9J8XJ38oijtsR67&#xA;62APe9E0fRdM0awisNNgEFtEAFUVZjQUq7MSzNt1Y1zDjEAUHB1GonmmZzNyKNwtLsVWyGQRsY1D&#xA;SAHgrEqpamwLANQe9DiqV+UC58p6IXAD/ULXkAagH0VrQkCv3Yq+dPzB8k6P5i/NXV9PcGOw1LU4&#xA;7afX30mOf6vqk2mJFDZfXDcI5jo6S0EOzkfED8QVfT1vF6MEcXNpPTVU5tuzcRSp9ziq/FXYqkui&#xA;xSDWvMEpmcxteRqLchOAIsrY8gQvOp92p7YqnWKuxV2KuxV2KuxV2KuxVj3nTyNonm7T47XURJDc&#xA;2r+tp2pWzendWswpSSGQbqdhUdD9AzN0WvyaaVx3B2MTykO4hWAapr2s6BFBo35nCSXTre7hn0bz&#xA;3YRqI1liflEbyMB/Qk/YJClWDEeLZsMnZ2HWDi0u0+Zxk7j+of4h9v3MZwEg9O0HzHomv2j3ej3k&#xA;V7bxStBJJC3JRInUV7jeqsNmFCCQQc0ZBBIOxBojuKxkDyTLAyWSwQzKFmjWRQQwVwGFRuDv4Ypj&#xA;IjkWOy/lt5Hkukuk0mK2njKMjWjSWoBjcyKaW7Rj7Zr0375X4Ue52Me19UI8JmSD/OqXPb+K+ipB&#xA;5I063eBob/VES3KlIjqN26Hi5ejB5G5A1oa9tsRjHn82Mu0pyBuOPf8AoR/UoXfluzsI11C98x6l&#xA;bWtnwkmknvVjh4xuzfvSyheLc+LVO4AGThglOQEeInuC/wAobEeHj3/o/du84n1LV/Ml/Hp35bap&#xA;rGo/VpAt35nvblxpUBjcswX4UN3J8dOA+GnGvJa5usfZOPTgZNXIjuxg+qXv/mj7fiyn2jYI8PEL&#xA;/o+Vbd362e+UPyt0Hy1b1iub251GaRbjUdQe6uI3urkFiZZlidVepc/C1RTrU75rtVqJZpC74Y7R&#xA;jZIiO5oOskQRUN/6Ef1bfBNYPJPl2G4a49KeadgoaS5u7u4JCBlWvrSyV2cjMQYwzl2jmkOGwB5R&#xA;iPuAa0/yD5I06ZZrHQbCCddlmW3i9QbU2cry/HJ9K6fqYZNfnn9U5H49/NPIoooo1jiRY40FFRQF&#xA;UD2AxcWUiTZ5rsUOxV2KuxVbIrPGyq5jZgQJFpyUkdRyDCo9xiqV+UFK+U9EUsXIsLUFjSp/crua&#xA;ADFXnlh+S2vjz3aecdV1/Tb/AFGCaOW4dNG9CSX019OoYXjosnp/CJPTLAYq9ZxV51+ZPni9061F&#xA;tZXN1ot19aFvBKbaF5L2RoZHSOza5JtwoZAZZJaKqdwSDiqV+T/P/mu+816bp2p39lPcTzyWGo6V&#xA;ZhGWFbfTUu/ryyV9TjNO4VeqcGSm9SVWb6O9snmfXQLJ/rMt3Gr3yxDjwWxt2CNL169B74qyLFXY&#xA;q7FXYq7FXYq7FXYq7FVk8EM8LwTxrLDKpSSJwGVlYUKsp2IOGMiDY5q89vvycsLCe41LyNqV15T1&#xA;OWrtFZcJbKV9yBLZzVjIHI8VUqq16ZsMfaAM+PNAZbFG9ie71Dr/AEjZrZjwAHi6oTyzqv5z6jpd&#xA;lf2N15f1WwkQrK97Feafe+qjFJEmSH6zEjoylW4ilctGTs/JHirLAnoOGQHzorCYkLDKY778zAgE&#xA;miaKz92XVrtR9x01v15Qcek6Tyf8q4/9VGSX3s/52uf9Cs/LVuP+Lrq/n/4jbwZdCOgH1HMfdGA/&#xA;3xVDSeX/AM59SRGu/Num6G67PDpOm/WQwqdzJeyuQaU6Llg1Ghh9OKeT+vOvsiFbtvyW8sTXEV35&#xA;lu7/AM2XkLB4m1i4aaCNqfF6dsnpwhWP7LK2CXbeUAxxCOGJ/mCj8Zc/uW2d21tbWtvHbWsSQW8K&#xA;hIoYlCIijYKqrQADwGamUjI2TZKqmRV2KuxV2KuxV2KuxV2Koe/ljjtJDJA9zGw4PAiCQsrbEcT1&#xA;HjiqX+TQg8oaGET00Gn2vFKU4j0VoKDpTFU4xV2Koa+0zTb9FS/tIbtENUWeNJApO1QHBpircGna&#xA;fbyCWC2ihlEaQB40VW9KP7EdQK8FrsvQYqluirc/przAxkQ2xvIwkYQhw/1K2qS/KhFO3H6cVTrF&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FUpm0c2NtqE3l6G2tdSvHe4YShhby3LADnMI/i+LiOTLv33yPDXJ&#xA;gY1fDzb8vatqN/Zc9V02TSL9HMUlrI6SqxUV5wyIaOhHsD7YxkSNxSwkSNxRTXJM3Yq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYqtkEhjYRsFkIPBmBZQ1NiVBWo9qjFUr8oBx5T0QOQX+oWvIgUBPorWgJNPvxV&#xA;NsVdirsVdiqQ6GbX/EXmIK7m6+tRc4y8hQJ9StqEIT6YNe4FcVT7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYqhtS02x1Own0+/hW4s7lDHPC9aMp+VCPYjpgIBFFEogiilVjp0nlbRLlbd77WbaBnmt7R3E9&#xA;0kVB+4hZyhkVafAHbl2qdhkQOEd7AR4B1KL8veY9K1+wN7psjMiO0NxFIjRywzIBziljcBkdaioP&#xA;6sMZCQ2TCYkLCZ5Jm7FXYq7FXYq7FXYq7FXYq7FVO49P6vL6pKxcG5spZWC03IK0YGnhviqV+TeH&#xA;+END4ElP0fa8SSSSPRWlS25+nFU4xV2KpfrnmLQtBs1vNav4NOtXcRJNcSLGrOwJCjkdzQE7dgT0&#xA;GKrrbXdGu70WNrew3F2YEuxDE6u31eQ0SX4Sfhb9k98VQWhyTtrfmFOMf1db2OkgcmTmbG2JVk40&#xA;AoQa8voxVO8VdirsVWxyRyKWjYOoLKSpBHJSVYbdwRQ4quxV2KtMyqpZiFVRVmOwAHc4q5WVlDKQ&#xA;ysKqw3BB7jFW8Vdiq2SSONQ0jBFJVQWIA5MQqjfuSaDFV2KuxV2KrC0KyqCVEsgIUGgZgu5p3NMV&#xA;X4q7FXYqtEkZkaMMDIoDMlRyCsSFJHgeJp8sVXYq7FXYqtWSN2dVYM0Z4yAEEq1A1D4GjA4quxV2&#xA;KrZDII2MahpADwViVUtTYFgGoPehxVKvJzl/KOhueNW0+1J4nku8K9GoKj3xVN8VdirA/PXlLzpq&#xA;AVtD1CO79a45Sx6g8Fq9nbGKSOSPTbmCwuZYnm9Ti7yh24VClSa4qjfLfkiPR9ftdUtrKz06FdFt&#xA;9MntrVmkYS25UIvqtHE00ccaCNHcBqAfCMVR7+XDDrN3eW2u3ti2qSi4lsIxZNG8kdvHblk9a3ll&#xA;/u4UJAfriqp/hq/+q/Vv8Ranx/35Wz9Try+39W5YqvfQNQaWOQ+YNRBjrRQLIKeQp8Si2ofauKqc&#xA;2kXFq0t5ceZL6KMqiO0v1FYlCs1DRrbipYvQnvt4DFUJc6Pb6Zp0kNz5pu7G2unmImkewhPO4d5X&#xA;KSG3UhuTkih2xVHvoN/K0Mg8wagBG3qLwFkFaqMtGAtqMtGrQ96Htirl0DUBO83+INRJdVQoRZFA&#xA;ELGoX6tQE89z328MVWf4avTbS2za/qLxzepz5iyZqSsWIBNtUAcqKOw2xVTttDkntYFtPMl89vbk&#xA;KjQmxIJi+HixW239wcVV20DUDOk3+INRBRWQIBZBCHKmpX6tQkcNj238cVdHoGoRvK48waixlYOQ&#xA;wsmCkKqUQG2+EfDWg71PfFULJ5dZ4oNMm8x38kkXozRxubFpmFtIjpIxNtzb40XkT1xVv6mr6qLY&#xA;ea7o6hCjK1ir2HPi/F+TQi3rUBRQkbAnxxVEx6BqEbyuPMGosZWDkMLJgpCqlEBtvhHw1oO9T3xV&#xA;YPLV/wDU0tf8RanxRVQS1s/VISm5k+rciTTc98VWXmhSLLBeXXmG8iNuSsUjiwVQZaJTe2pv0GKq&#xA;y6BqAneb/EGokuqoUIsigCFjUL9WoCee577eGKrD5avzay23+ItT4zepWQGz9RfVJY8H+rcl48vh&#xA;p9nanTFV8mgahI8TnzBqKmJi4CiyUMSrJRwLb4h8VaHvQ9sVUE0UrPc6kvmK8qY1guZf9A4Kts0h&#xA;o3+jUUo0j8sVW2GmG8s5DY+ab27gd5AZ4nsZaM7FiokW3NOPL4RX4RTFUQ3l2/McSf4h1ICEqQR9&#xA;TBbjt8Z+rfED3r1xVv8AQGoev63+INRrx4cKWXCla14/VqV98VUoNAmgurkR+YL0XF2wuJoyLEsS&#xA;ESEMF+rbDjGoxVcPLV+LWK2/xFqfGH06SE2fqN6RDDm/1bk3Lj8Vftb164qvbQNQM6Tf4g1EFFZA&#xA;gFkEIcqalfq1CRw2PbfxxVRm0O9hSV28z6jb+vIh9Rhp5CsQsaogktWVeRA+EDcnxOKomxXRvLOj&#xA;aZpMt8kNvaW8VnayXcsaSSLAixgk/u1ZqAV4gfLFU2xV2KuxVRvo7uSyuI7KZLe8eN1triSMzJHK&#xA;VIR2jDR8wrUJXkK9KjFXmyeTPzH/AOVm6L5i1O+stVsrOKW1aWJJLUQQvCPUK2zSSjnNNuSGbYKD&#xA;sN1Xp+KuxV53+Y/lnzNqsEyTW6a9pkk1dPsrS3to7zT3a3ki+sA38zWd0eT8fjROCsStSK4qx/Xv&#xA;KfnO68oeWNNOj3Z1Py7ZpbpJaT6dLA15+j440laO/wDWEkCTF43LUk2JAZTXFXrunrdrYWy3nD62&#xA;IkFz6QpH6gUc+ANaLy6Yqr4qkXm7T9fvtPeLS5bdoTDcJeaZcRufrgeIqkK3KSxG25NsZOL9em2K&#xA;sd/KXy3qeir5hkudNk0iy1HUEuNP0+f6ossUaWsMBXjYvJbhFMPFCPiYCr7nFWf4qo30d3JZXEdl&#xA;MlvePG621xJGZkjlKkI7Rho+YVqEryFelRirylPLHmUfmOusaj5ckuzpzLdxa7p4sYTqN4umm1LS&#xA;m4vmuLaABzHHbInHn+8dtziqYeW/Lfma1/Mm71j9H3Fnp9/JcXGpSXjadNEweGJbcWrwD62jqU4y&#xA;LIeFBsW+E4q9MxV2KvLPzO8r+cNV9OB9Oi8y2VxPOsL29vbJNplpLEUfjFf30NvdXEgYKkrAen8R&#xA;4GtMVekaPbrbaTZW6xywrDbxRiK4ZXmQKgHGRkZ0ZxSjFWIr0JxVF4ql2qWesXNzZ/U72G2sVZ/0&#xA;lbyQNLJPGwoFilWWL0SN/i4t8sVef2PkzWLD8tvMXlNNImaPVLnX1t4oLi2RhZ3dzM9uoklaQBpo&#xA;ZAF5KeJ+3xxVkn5aabren6JdQapA9sjXkr6bDOlml0toUQJ9Z+ogW5k5h91/Z48virirLcVQuqQ6&#xA;jNp88Wm3MdnfutLe6miNxGjfzNEHhLj25jFWN6V5Xv7Tz4dcuFSeS50aG01HUox6aTXcUo+xA0kr&#xA;RqVHIKCQPEnFWXYq7FXl35i+T/OWq3KyzQ2/mfTCt9BZ6SkUdqbVruH07eeZ7id0n9E1BdVV1DEq&#xA;pO2KoPzp5X87X8OiNZWF3NrGi2dxp9pemXTZbWW5cWrC5u4boOxt5GgO6UlFD8I5DFXruKuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KvPvN/5rR+V/O8eh3lm91a3GnwT2cNooe8nvbm9FpFBGJHji&#xA;oR8XxEfPFUAf+chfKJWNotL1aXiqHUQsEA+otLfNp6R3XKdfiNzGy/u+Y71piqeP541dvzai8lRa&#xA;Wy6amltqVxqcnE8iXEaCICSoQN8JLLXl2p8RVZpirw3/AJX5r2n+ap7HWbOCbSXvtetLT9H2l3Nd&#xA;KukTrDCZFjeblz5Vdgige2KorSvz9vtT0HS7aPR5ofNWsaRNq1tcLFHPpcaQIzu8qrdJdJFVfTqy&#xA;ir7AnFXp3kjW7rXvJega5eJHHd6rptpe3CQgiNZLiBJXCBizBQzbVJ+eKp1irsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirHfMP5e+T/MV619rGn/WbxrdLQTiWaJ1&#xA;iimFxH6ZidPTdJRyWRaOPHFWHa9/zj15R1K/0mWylfS7DS0ij+pQRo7SiK7N5ya4k5TFnkJ5F2bu&#xA;RRiSVU4/M+9i8qafceetPsY59dhit9Me6mMrolnNdKWrCskatxduXY+9MVST8vfP/wCbmu67p1rr&#xA;3lWLTdIuLVbq51RVlVKvbiYRoHdqNyuIU37pL4fCqn3l38p9C0nW7/WLiWTULu5vNRu7NpKx/VU1&#xA;aT1bqFRGwEgY0ozgkU2piqAb8g/y+tY7iTQbe40XU5bVbOO+gvLyQLEkfpIrQSTtDKFTs6kV364q&#xA;zXyxocWgeW9J0KGVpotJs7exjmcAM620SxBmA2qQlcVTLFXYq7FXYq7FXYq7FXYq7FXYq//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:2AE62794C907E211824FA0BB0F4D7017</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:2BE62794C907E211824FA0BB0F4D7017</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:29E62794C907E211824FA0BB0F4D7017</stRef:instanceID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Keywords/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>792.000000</stDim:w>
            <stDim:h>612.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -354.579 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 354.579 li
516.689 354.579 li
516.689 0 li
cp
clp
[1 0 0 1 0 0 ]ct
69.0791 70.48 mo
70.999 70.48 li
72.1992 71.6802 li
72.1992 73.6001 li
70.2793 73.6001 li
69.0791 72.3999 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.921569 0.843137 0 0 cmyk
f
70.2793 71.6802 mo
72.1992 71.6802 li
73.3989 72.8799 li
73.3989 74.8003 li
71.479 74.8003 li
70.2793 73.6001 li
f
71.479 72.8799 mo
73.3989 72.8799 li
74.5991 73.8398 li
74.5991 75.7603 li
72.6792 75.7603 li
71.479 74.8003 li
f
72.6792 73.8398 mo
74.5991 73.8398 li
76.0391 75.04 li
76.0391 76.96 li
74.1191 76.96 li
72.6792 75.7603 li
f
74.1191 75.04 mo
76.0391 75.04 li
77.2393 76.2402 li
77.2393 78.1602 li
75.3193 78.1602 li
74.1191 76.96 li
f
75.3193 76.2402 mo
77.2393 76.2402 li
78.439 77.4399 li
78.439 79.3599 li
76.519 79.3599 li
75.3193 78.1602 li
f
76.519 77.4399 mo
78.439 77.4399 li
79.6392 78.6401 li
79.6392 80.5601 li
77.7192 80.5601 li
76.519 79.3599 li
f
77.7192 78.6401 mo
79.6392 78.6401 li
80.8394 79.6001 li
80.8394 81.52 li
78.9189 81.52 li
77.7192 80.5601 li
f
78.9189 79.6001 mo
80.8394 79.6001 li
82.0391 80.8003 li
82.0391 82.7202 li
80.1191 82.7202 li
78.9189 81.52 li
f
80.1191 80.8003 mo
82.0391 80.8003 li
83.479 82 li
83.479 83.9199 li
81.5591 83.9199 li
80.1191 82.7202 li
f
81.5591 82 mo
83.479 82 li
84.6792 83.2002 li
84.6792 85.1201 li
82.7593 85.1201 li
81.5591 83.9199 li
f
82.7593 83.2002 mo
84.6792 83.2002 li
85.8789 84.1602 li
85.8789 86.0801 li
83.959 86.0801 li
82.7593 85.1201 li
f
83.959 84.1602 mo
85.8789 84.1602 li
87.0791 85.3599 li
87.0791 87.2798 li
85.1592 87.2798 li
83.959 86.0801 li
f
85.1592 85.3599 mo
87.0791 85.3599 li
88.2793 86.5601 li
88.2793 88.48 li
86.3594 88.48 li
85.1592 87.2798 li
f
86.3594 86.5601 mo
88.2793 86.5601 li
89.479 87.7603 li
89.479 89.6802 li
87.5591 89.6802 li
86.3594 88.48 li
f
87.5591 87.7603 mo
89.479 87.7603 li
90.9189 88.96 li
90.9189 90.8799 li
88.999 90.8799 li
87.5591 89.6802 li
f
88.999 88.96 mo
90.9189 88.96 li
92.1191 89.9199 li
92.1191 91.8398 li
90.1992 91.8398 li
88.999 90.8799 li
f
90.1992 89.9199 mo
92.1191 89.9199 li
93.3193 91.1201 li
93.3193 93.04 li
91.3989 93.04 li
90.1992 91.8398 li
f
91.3989 91.1201 mo
93.3193 91.1201 li
94.519 92.3198 li
94.519 94.2402 li
92.5991 94.2402 li
91.3989 93.04 li
f
92.5991 92.3198 mo
94.519 92.3198 li
95.7192 93.52 li
95.7192 95.4399 li
93.7993 95.4399 li
92.5991 94.2402 li
f
93.7993 93.52 mo
95.7192 93.52 li
96.9189 94.7202 li
96.9189 96.6401 li
94.999 96.6401 li
93.7993 95.4399 li
f
94.999 94.7202 mo
96.9189 94.7202 li
98.3594 95.6802 li
98.3594 97.6001 li
96.439 97.6001 li
94.999 96.6401 li
f
96.439 95.6802 mo
98.3594 95.6802 li
99.5591 97.1201 li
99.5591 99.04 li
97.6392 99.04 li
96.439 97.6001 li
f
97.6392 97.1201 mo
99.5591 97.1201 li
100.759 98.0801 li
100.759 100 li
98.8394 100 li
97.6392 99.04 li
f
98.8394 98.0801 mo
100.759 98.0801 li
101.959 99.2798 li
101.959 101.2 li
100.039 101.2 li
98.8394 100 li
f
100.039 99.2798 mo
101.959 99.2798 li
103.159 100.48 li
103.159 102.4 li
101.239 102.4 li
100.039 101.2 li
f
101.239 100.48 mo
103.159 100.48 li
104.359 101.68 li
104.359 103.6 li
102.439 103.6 li
101.239 102.4 li
f
102.439 101.68 mo
104.359 101.68 li
105.559 102.64 li
105.559 104.56 li
103.639 104.56 li
102.439 103.6 li
f
103.639 102.64 mo
105.559 102.64 li
106.759 103.84 li
106.759 105.76 li
104.839 105.76 li
103.639 104.56 li
f
104.839 103.84 mo
106.759 103.84 li
107.959 105.04 li
107.959 106.96 li
106.039 106.96 li
104.839 105.76 li
f
106.039 105.04 mo
107.959 105.04 li
109.399 106.24 li
109.399 108.16 li
107.479 108.16 li
106.039 106.96 li
f
107.479 106.24 mo
109.399 106.24 li
110.599 107.44 li
110.599 109.36 li
108.679 109.36 li
107.479 108.16 li
f
108.679 107.44 mo
110.599 107.44 li
111.799 108.4 li
111.799 110.32 li
109.879 110.32 li
108.679 109.36 li
f
109.879 108.4 mo
111.799 108.4 li
112.999 109.6 li
112.999 111.52 li
111.079 111.52 li
109.879 110.32 li
f
111.079 109.6 mo
112.999 109.6 li
114.199 110.8 li
114.199 112.72 li
112.279 112.72 li
111.079 111.52 li
f
112.279 110.8 mo
114.199 110.8 li
115.399 112 li
115.399 113.92 li
113.479 113.92 li
112.279 112.72 li
f
113.479 112 mo
115.399 112 li
116.599 113.2 li
116.599 115.12 li
114.679 115.12 li
113.479 113.92 li
f
114.679 113.2 mo
116.599 113.2 li
118.039 114.16 li
118.039 116.08 li
116.119 116.08 li
114.679 115.12 li
f
116.119 114.16 mo
118.039 114.16 li
119.239 115.36 li
119.239 117.28 li
117.319 117.28 li
116.119 116.08 li
f
117.319 115.36 mo
119.239 115.36 li
120.439 116.56 li
120.439 118.48 li
118.519 118.48 li
117.319 117.28 li
f
118.519 116.56 mo
120.439 116.56 li
121.639 117.76 li
121.639 119.68 li
119.719 119.68 li
118.519 118.48 li
f
119.719 117.76 mo
121.639 117.76 li
122.839 118.96 li
122.839 120.88 li
120.919 120.88 li
119.719 119.68 li
f
120.919 118.96 mo
122.839 118.96 li
124.039 119.92 li
124.039 121.84 li
122.119 121.84 li
120.919 120.88 li
f
122.119 119.92 mo
124.039 119.92 li
125.479 121.12 li
125.479 123.04 li
123.559 123.04 li
122.119 121.84 li
f
123.559 121.12 mo
125.479 121.12 li
126.679 122.32 li
126.679 124.24 li
124.759 124.24 li
123.559 123.04 li
f
124.759 122.32 mo
126.679 122.32 li
127.879 123.52 li
127.879 125.44 li
125.959 125.44 li
124.759 124.24 li
f
125.959 123.52 mo
127.879 123.52 li
129.079 124.48 li
129.079 126.4 li
127.159 126.4 li
125.959 125.44 li
f
127.159 124.48 mo
129.079 124.48 li
130.279 125.68 li
130.279 127.6 li
128.359 127.6 li
127.159 126.4 li
f
128.359 125.68 mo
130.279 125.68 li
131.479 126.88 li
131.479 128.8 li
129.559 128.8 li
128.359 127.6 li
f
129.559 126.88 mo
131.479 126.88 li
132.919 128.08 li
132.919 130 li
130.999 130 li
129.559 128.8 li
f
130.999 128.08 mo
132.919 128.08 li
134.119 129.28 li
134.119 131.2 li
132.199 131.2 li
130.999 130 li
f
132.199 129.28 mo
134.119 129.28 li
135.319 130.24 li
135.319 132.16 li
133.399 132.16 li
132.199 131.2 li
f
133.399 130.24 mo
135.319 130.24 li
136.519 131.68 li
136.519 133.6 li
134.599 133.6 li
133.399 132.16 li
f
134.599 131.68 mo
136.519 131.68 li
137.719 132.64 li
137.719 134.56 li
135.799 134.56 li
134.599 133.6 li
f
135.799 132.64 mo
137.719 132.64 li
138.919 133.84 li
138.919 135.76 li
136.999 135.76 li
135.799 134.56 li
f
136.999 133.84 mo
138.919 133.84 li
140.119 135.04 li
140.119 136.96 li
138.199 136.96 li
136.999 135.76 li
f
138.199 135.04 mo
140.119 135.04 li
141.559 136.24 li
141.559 138.16 li
139.639 138.16 li
138.199 136.96 li
f
139.639 136.24 mo
141.559 136.24 li
142.759 137.44 li
142.759 139.36 li
140.839 139.36 li
139.639 138.16 li
f
140.839 137.44 mo
142.759 137.44 li
143.959 138.4 li
143.959 140.32 li
142.039 140.32 li
140.839 139.36 li
f
142.039 138.4 mo
143.959 138.4 li
145.159 139.6 li
145.159 141.52 li
143.239 141.52 li
142.039 140.32 li
f
143.239 139.6 mo
145.159 139.6 li
146.359 140.8 li
146.359 142.72 li
144.439 142.72 li
143.239 141.52 li
f
144.439 140.8 mo
146.359 140.8 li
147.559 142 li
147.559 143.92 li
145.639 143.92 li
144.439 142.72 li
f
145.639 142 mo
147.559 142 li
148.759 142.96 li
148.759 144.88 li
146.839 144.88 li
145.639 143.92 li
f
146.839 142.96 mo
148.759 142.96 li
149.959 144.16 li
149.959 146.08 li
148.039 146.08 li
146.839 144.88 li
f
148.039 144.16 mo
149.959 144.16 li
151.159 145.36 li
151.159 147.28 li
149.239 147.28 li
148.039 146.08 li
f
149.239 145.36 mo
151.159 145.36 li
152.599 146.56 li
152.599 148.48 li
150.679 148.48 li
149.239 147.28 li
f
150.679 146.56 mo
152.599 146.56 li
153.799 147.76 li
153.799 149.68 li
151.879 149.68 li
150.679 148.48 li
f
151.879 147.76 mo
153.799 147.76 li
154.999 148.72 li
154.999 150.64 li
153.079 150.64 li
151.879 149.68 li
f
153.079 148.72 mo
154.999 148.72 li
156.199 149.92 li
156.199 151.84 li
154.279 151.84 li
153.079 150.64 li
f
154.279 149.92 mo
156.199 149.92 li
157.399 151.12 li
157.399 153.04 li
155.479 153.04 li
154.279 151.84 li
f
155.479 151.12 mo
157.399 151.12 li
158.599 152.32 li
158.599 154.24 li
156.679 154.24 li
155.479 153.04 li
f
156.679 152.32 mo
158.599 152.32 li
160.039 153.52 li
160.039 155.44 li
158.119 155.44 li
156.679 154.24 li
f
158.119 153.52 mo
160.039 153.52 li
161.239 154.48 li
161.239 156.4 li
159.319 156.4 li
158.119 155.44 li
f
159.319 154.48 mo
161.239 154.48 li
162.439 155.68 li
162.439 157.6 li
160.519 157.6 li
159.319 156.4 li
f
160.519 155.68 mo
162.439 155.68 li
163.639 156.88 li
163.639 158.8 li
161.719 158.8 li
160.519 157.6 li
f
161.719 156.88 mo
163.639 156.88 li
164.839 158.08 li
164.839 160 li
162.919 160 li
161.719 158.8 li
f
162.919 158.08 mo
164.839 158.08 li
166.039 159.041 li
166.039 160.96 li
164.119 160.96 li
162.919 160 li
f
164.119 159.041 mo
166.039 159.041 li
167.479 160.24 li
167.479 162.16 li
165.559 162.16 li
164.119 160.96 li
f
165.559 160.24 mo
167.479 160.24 li
168.679 161.44 li
168.679 163.36 li
166.759 163.36 li
165.559 162.16 li
f
166.759 161.44 mo
168.679 161.44 li
169.879 162.64 li
169.879 164.56 li
167.959 164.56 li
166.759 163.36 li
f
167.959 162.64 mo
169.879 162.64 li
171.079 163.84 li
171.079 165.76 li
169.159 165.76 li
167.959 164.56 li
f
169.159 163.84 mo
171.079 163.84 li
172.279 164.8 li
172.279 166.72 li
170.359 166.72 li
169.159 165.76 li
f
170.359 164.8 mo
172.279 164.8 li
173.479 166.24 li
173.479 168.16 li
171.559 168.16 li
170.359 166.72 li
f
171.559 166.24 mo
173.479 166.24 li
174.919 167.2 li
174.919 169.12 li
172.999 169.12 li
171.559 168.16 li
f
172.999 167.2 mo
174.919 167.2 li
176.119 168.4 li
176.119 170.32 li
174.199 170.32 li
172.999 169.12 li
f
174.199 168.4 mo
176.119 168.4 li
177.319 169.6 li
177.319 171.52 li
175.399 171.52 li
174.199 170.32 li
f
175.399 169.6 mo
177.319 169.6 li
178.519 170.8 li
178.519 172.72 li
176.599 172.72 li
175.399 171.52 li
f
176.599 170.8 mo
178.519 170.8 li
179.719 171.76 li
179.719 173.68 li
177.799 173.68 li
176.599 172.72 li
f
177.799 171.76 mo
179.719 171.76 li
180.919 172.96 li
180.919 174.88 li
178.999 174.88 li
177.799 173.68 li
f
178.999 172.96 mo
180.919 172.96 li
182.119 174.16 li
182.119 176.08 li
180.199 176.08 li
178.999 174.88 li
f
180.199 174.16 mo
182.119 174.16 li
183.319 175.12 li
183.319 177.041 li
181.399 177.041 li
180.199 176.08 li
f
181.399 175.12 mo
183.319 175.12 li
184.519 176.32 li
184.519 178.24 li
182.599 178.24 li
181.399 177.041 li
f
182.599 176.32 mo
184.519 176.32 li
185.959 177.52 li
185.959 179.44 li
184.039 179.44 li
182.599 178.24 li
f
184.039 177.52 mo
185.959 177.52 li
187.159 178.72 li
187.159 180.64 li
185.239 180.64 li
184.039 179.44 li
f
185.239 178.72 mo
187.159 178.72 li
188.359 179.68 li
188.359 181.6 li
186.439 181.6 li
185.239 180.64 li
f
186.439 179.68 mo
188.359 179.68 li
189.559 180.88 li
189.559 182.8 li
187.639 182.8 li
186.439 181.6 li
f
187.639 180.88 mo
189.559 180.88 li
190.759 182.08 li
190.759 184 li
188.839 184 li
187.639 182.8 li
f
188.839 182.08 mo
190.759 182.08 li
191.959 183.28 li
191.959 185.2 li
190.039 185.2 li
188.839 184 li
f
190.039 183.28 mo
191.959 183.28 li
193.159 184.24 li
193.159 186.16 li
191.239 186.16 li
190.039 185.2 li
f
191.239 184.24 mo
193.159 184.24 li
194.599 185.44 li
194.599 187.36 li
192.679 187.36 li
191.239 186.16 li
f
192.679 185.44 mo
194.599 185.44 li
195.799 186.64 li
195.799 188.56 li
193.879 188.56 li
192.679 187.36 li
f
193.879 186.64 mo
195.799 186.64 li
196.999 187.84 li
196.999 189.76 li
195.079 189.76 li
193.879 188.56 li
f
195.079 187.84 mo
196.999 187.84 li
198.199 188.8 li
198.199 190.72 li
196.279 190.72 li
195.079 189.76 li
f
196.279 188.8 mo
198.199 188.8 li
199.399 190 li
199.399 191.92 li
197.479 191.92 li
196.279 190.72 li
f
197.479 190 mo
199.399 190 li
200.599 191.2 li
200.599 193.12 li
198.679 193.12 li
197.479 191.92 li
f
198.679 191.2 mo
200.599 191.2 li
202.039 192.16 li
202.039 194.08 li
200.119 194.08 li
198.679 193.12 li
f
200.119 192.16 mo
202.039 192.16 li
203.239 193.36 li
203.239 195.28 li
201.319 195.28 li
200.119 194.08 li
f
201.319 193.36 mo
203.239 193.36 li
204.439 194.56 li
204.439 196.48 li
202.519 196.48 li
201.319 195.28 li
f
202.519 194.56 mo
204.439 194.56 li
205.639 195.52 li
205.639 197.44 li
203.719 197.44 li
202.519 196.48 li
f
203.719 195.52 mo
205.639 195.52 li
206.839 196.72 li
206.839 198.64 li
204.919 198.64 li
203.719 197.44 li
f
204.919 196.72 mo
206.839 196.72 li
208.039 197.68 li
208.039 199.6 li
206.119 199.6 li
204.919 198.64 li
f
206.119 197.68 mo
208.039 197.68 li
209.479 198.88 li
209.479 200.8 li
207.559 200.8 li
206.119 199.6 li
f
207.559 198.88 mo
209.479 198.88 li
210.679 200.08 li
210.679 202 li
208.759 202 li
207.559 200.8 li
f
208.759 200.08 mo
210.679 200.08 li
211.879 201.041 li
211.879 202.96 li
209.959 202.96 li
208.759 202 li
f
209.959 201.041 mo
211.879 201.041 li
213.079 202.24 li
213.079 204.16 li
211.159 204.16 li
209.959 202.96 li
f
211.159 202.24 mo
213.079 202.24 li
214.279 203.2 li
214.279 205.12 li
212.359 205.12 li
211.159 204.16 li
f
212.359 203.2 mo
214.279 203.2 li
215.479 204.4 li
215.479 206.32 li
213.559 206.32 li
212.359 205.12 li
f
213.559 204.4 mo
215.479 204.4 li
216.679 205.36 li
216.679 207.28 li
214.759 207.28 li
213.559 206.32 li
f
214.759 205.36 mo
216.679 205.36 li
217.879 206.56 li
217.879 208.48 li
215.959 208.48 li
214.759 207.28 li
f
215.959 206.56 mo
217.879 206.56 li
219.319 207.52 li
219.319 209.44 li
217.399 209.44 li
215.959 208.48 li
f
217.399 207.52 mo
219.319 207.52 li
220.519 208.48 li
220.519 210.4 li
218.599 210.4 li
217.399 209.44 li
f
218.599 208.48 mo
220.519 208.48 li
221.719 209.68 li
221.719 211.6 li
219.799 211.6 li
218.599 210.4 li
f
219.799 209.68 mo
221.719 209.68 li
222.919 210.64 li
222.919 212.56 li
220.999 212.56 li
219.799 211.6 li
f
220.999 210.64 mo
222.919 210.64 li
224.119 211.6 li
224.119 213.52 li
222.199 213.52 li
220.999 212.56 li
f
222.199 211.6 mo
224.119 211.6 li
225.319 212.56 li
225.319 214.48 li
223.399 214.48 li
222.199 213.52 li
f
223.399 212.56 mo
225.319 212.56 li
226.519 213.52 li
226.519 215.44 li
224.599 215.44 li
223.399 214.48 li
f
224.599 213.52 mo
226.519 213.52 li
227.719 214.48 li
227.719 216.4 li
225.799 216.4 li
224.599 215.44 li
f
225.799 214.48 mo
227.719 214.48 li
229.159 215.44 li
229.159 217.36 li
227.239 217.36 li
225.799 216.4 li
f
227.239 215.44 mo
229.159 215.44 li
230.359 216.4 li
230.359 218.32 li
228.439 218.32 li
227.239 217.36 li
f
228.439 216.4 mo
230.359 216.4 li
231.559 217.12 li
231.559 219.041 li
229.639 219.041 li
228.439 218.32 li
f
229.639 217.12 mo
231.559 217.12 li
232.759 218.08 li
232.759 220 li
230.839 220 li
229.639 219.041 li
f
230.839 218.08 mo
232.759 218.08 li
233.959 219.041 li
233.959 220.96 li
232.039 220.96 li
230.839 220 li
f
232.039 219.041 mo
233.959 219.041 li
235.159 220 li
235.159 221.92 li
233.239 221.92 li
232.039 220.96 li
f
233.239 220 mo
235.159 220 li
236.599 220.72 li
236.599 222.64 li
234.679 222.64 li
233.239 221.92 li
f
234.679 220.72 mo
236.599 220.72 li
237.799 221.44 li
237.799 223.36 li
235.879 223.36 li
234.679 222.64 li
f
235.879 221.44 mo
237.799 221.44 li
238.999 222.16 li
238.999 224.08 li
237.079 224.08 li
235.879 223.36 li
f
237.079 222.16 mo
238.999 222.16 li
240.199 223.12 li
240.199 225.041 li
238.279 225.041 li
237.079 224.08 li
f
238.279 223.12 mo
240.199 223.12 li
241.399 223.84 li
241.399 225.76 li
239.479 225.76 li
238.279 225.041 li
f
239.479 223.84 mo
241.399 223.84 li
242.599 224.56 li
242.599 226.48 li
240.679 226.48 li
239.479 225.76 li
f
240.679 224.56 mo
242.599 224.56 li
244.039 225.041 li
244.039 226.96 li
242.119 226.96 li
240.679 226.48 li
f
242.119 225.041 mo
244.039 225.041 li
245.239 225.76 li
245.239 227.68 li
243.319 227.68 li
242.119 226.96 li
f
243.319 225.76 mo
245.239 225.76 li
246.439 226.48 li
246.439 228.4 li
244.519 228.4 li
243.319 227.68 li
f
244.519 226.48 mo
246.439 226.48 li
247.639 226.96 li
247.639 228.88 li
245.719 228.88 li
244.519 228.4 li
f
245.719 226.96 mo
247.639 226.96 li
248.839 227.68 li
248.839 229.6 li
246.919 229.6 li
245.719 228.88 li
f
246.919 227.68 mo
248.839 227.68 li
250.039 228.16 li
250.039 230.08 li
248.119 230.08 li
246.919 229.6 li
f
248.119 228.16 mo
250.039 228.16 li
251.239 228.64 li
251.239 230.56 li
249.319 230.56 li
248.119 230.08 li
f
249.319 228.64 mo
251.239 228.64 li
252.679 229.12 li
252.679 231.041 li
250.759 231.041 li
249.319 230.56 li
f
250.759 229.12 mo
252.679 229.12 li
253.879 229.6 li
253.879 231.52 li
251.959 231.52 li
250.759 231.041 li
f
251.959 229.6 mo
253.879 229.6 li
255.079 230.08 li
255.079 232 li
253.159 232 li
251.959 231.52 li
f
253.159 230.08 mo
255.079 230.08 li
256.279 230.56 li
256.279 232.48 li
254.359 232.48 li
253.159 232 li
f
254.359 230.56 mo
256.279 230.56 li
257.479 230.8 li
257.479 232.72 li
255.559 232.72 li
254.359 232.48 li
f
255.559 230.8 mo
257.479 230.8 li
258.679 231.28 li
258.679 233.2 li
256.759 233.2 li
255.559 232.72 li
f
256.759 231.28 mo
258.679 231.28 li
259.879 231.52 li
259.879 233.44 li
257.959 233.44 li
256.759 233.2 li
f
257.959 231.52 mo
259.879 231.52 li
261.079 231.76 li
261.079 233.68 li
259.159 233.68 li
257.959 233.44 li
f
259.159 231.76 mo
261.079 231.76 li
262.279 232.24 li
262.279 234.16 li
260.359 234.16 li
259.159 233.68 li
f
1.92 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
260.359 233.2 mo
263.719 233.2 li
@
261.799 232.24 mo
263.719 232.24 li
264.919 232.48 li
264.919 234.4 li
262.999 234.4 li
261.799 234.16 li
f
262.999 232.48 mo
264.919 232.48 li
266.119 232.72 li
266.119 234.64 li
264.199 234.64 li
262.999 234.4 li
f
264.199 232.72 mo
266.119 232.72 li
267.319 232.96 li
267.319 234.88 li
265.399 234.88 li
264.199 234.64 li
f
265.399 232.96 mo
267.319 232.96 li
268.519 233.2 li
268.519 235.12 li
266.599 235.12 li
265.399 234.88 li
f
266.599 233.2 mo
268.519 233.2 li
269.719 233.44 li
269.719 235.36 li
267.799 235.36 li
266.599 235.12 li
f
267.799 233.44 mo
269.719 233.44 li
271.159 233.68 li
271.159 235.6 li
269.239 235.6 li
267.799 235.36 li
f
269.239 234.64 mo
272.359 234.64 li
@
270.439 234.64 mo
273.559 234.64 li
@
271.639 233.68 mo
273.559 233.68 li
274.759 233.92 li
274.759 235.84 li
272.839 235.84 li
271.639 235.6 li
f
272.839 234.88 mo
275.959 234.88 li
@
274.039 234.88 mo
277.159 234.88 li
@
275.239 233.92 mo
277.159 233.92 li
278.599 234.16 li
278.599 236.08 li
276.679 236.08 li
275.239 235.84 li
f
276.679 235.12 mo
279.799 235.12 li
@
277.879 235.12 mo
280.999 235.12 li
@
279.079 235.12 mo
282.199 235.12 li
@
280.279 235.12 mo
283.399 235.12 li
@
281.479 235.12 mo
284.599 235.12 li
@
282.679 235.12 mo
286.039 235.12 li
@
284.119 235.12 mo
287.239 235.12 li
@
285.319 235.12 mo
288.439 235.12 li
@
286.519 235.12 mo
289.639 235.12 li
@
287.719 235.12 mo
290.839 235.12 li
@
288.919 235.12 mo
292.039 235.12 li
@
290.119 235.12 mo
293.239 235.12 li
@
292.519 233.92 mo
294.439 233.92 li
294.439 235.84 li
293.239 236.08 li
291.319 236.08 li
291.319 234.16 li
f
292.519 234.88 mo
295.639 234.88 li
@
293.719 234.88 mo
297.079 234.88 li
@
296.359 233.68 mo
298.279 233.68 li
298.279 235.6 li
297.079 235.84 li
295.159 235.84 li
295.159 233.92 li
f
296.359 234.64 mo
299.479 234.64 li
@
297.559 234.64 mo
300.679 234.64 li
@
298.759 234.64 mo
301.879 234.64 li
@
301.159 233.44 mo
303.079 233.44 li
303.079 235.36 li
301.879 235.6 li
299.959 235.6 li
299.959 233.68 li
f
301.159 234.4 mo
304.279 234.4 li
@
303.559 233.2 mo
305.479 233.2 li
305.479 235.12 li
304.279 235.36 li
302.359 235.36 li
302.359 233.44 li
f
303.559 234.16 mo
306.919 234.16 li
@
306.199 232.96 mo
308.119 232.96 li
308.119 234.88 li
306.919 235.12 li
304.999 235.12 li
304.999 233.2 li
f
307.399 232.72 mo
309.319 232.72 li
309.319 234.64 li
308.119 234.88 li
306.199 234.88 li
306.199 232.96 li
f
307.399 233.68 mo
310.519 233.68 li
@
309.799 232.48 mo
311.719 232.48 li
311.719 234.4 li
310.519 234.64 li
308.599 234.64 li
308.599 232.72 li
f
311.239 232.24 mo
313.159 232.24 li
313.159 234.16 li
311.719 234.4 li
309.799 234.4 li
309.799 232.48 li
f
311.239 233.2 mo
314.359 233.2 li
@
313.639 232 mo
315.56 232 li
315.56 233.92 li
314.359 234.16 li
312.439 234.16 li
312.439 232.24 li
f
314.839 231.76 mo
316.759 231.76 li
316.759 233.68 li
315.56 233.92 li
313.639 233.92 li
313.639 232 li
f
316.039 231.52 mo
317.959 231.52 li
317.959 233.44 li
316.759 233.68 li
314.839 233.68 li
314.839 231.76 li
f
317.239 231.28 mo
319.159 231.28 li
319.159 233.2 li
317.959 233.44 li
316.039 233.44 li
316.039 231.52 li
f
318.679 231.041 mo
320.6 231.041 li
320.6 232.96 li
319.159 233.2 li
317.239 233.2 li
317.239 231.28 li
f
319.879 230.8 mo
321.799 230.8 li
321.799 232.72 li
320.6 232.96 li
318.679 232.96 li
318.679 231.041 li
f
321.079 230.56 mo
322.999 230.56 li
322.999 232.48 li
321.799 232.72 li
319.879 232.72 li
319.879 230.8 li
f
322.279 230.32 mo
324.199 230.32 li
324.199 232.24 li
322.999 232.48 li
321.079 232.48 li
321.079 230.56 li
f
323.479 229.84 mo
325.399 229.84 li
325.399 231.76 li
324.199 232.24 li
322.279 232.24 li
322.279 230.32 li
f
324.679 229.6 mo
326.6 229.6 li
326.6 231.52 li
325.399 231.76 li
323.479 231.76 li
323.479 229.84 li
f
325.879 229.36 mo
327.799 229.36 li
327.799 231.28 li
326.6 231.52 li
324.679 231.52 li
324.679 229.6 li
f
327.319 229.12 mo
329.239 229.12 li
329.239 231.041 li
327.799 231.28 li
325.879 231.28 li
325.879 229.36 li
f
328.52 228.64 mo
330.439 228.64 li
330.439 230.56 li
329.239 231.041 li
327.319 231.041 li
327.319 229.12 li
f
329.719 228.16 mo
331.639 228.16 li
331.639 230.08 li
330.439 230.56 li
328.52 230.56 li
328.52 228.64 li
f
330.919 227.68 mo
332.839 227.68 li
332.839 229.6 li
331.639 230.08 li
329.719 230.08 li
329.719 228.16 li
f
332.119 227.44 mo
334.039 227.44 li
334.039 229.36 li
332.839 229.6 li
330.919 229.6 li
330.919 227.68 li
f
333.319 226.96 mo
335.239 226.96 li
335.239 228.88 li
334.039 229.36 li
332.119 229.36 li
332.119 227.44 li
f
334.52 226.48 mo
336.439 226.48 li
336.439 228.4 li
335.239 228.88 li
333.319 228.88 li
333.319 226.96 li
f
335.719 226 mo
337.639 226 li
337.639 227.92 li
336.439 228.4 li
334.52 228.4 li
334.52 226.48 li
f
336.919 225.52 mo
338.839 225.52 li
338.839 227.44 li
337.639 227.92 li
335.719 227.92 li
335.719 226 li
f
338.359 224.8 mo
340.279 224.8 li
340.279 226.72 li
338.839 227.44 li
336.919 227.44 li
336.919 225.52 li
f
339.56 224.32 mo
341.479 224.32 li
341.479 226.24 li
340.279 226.72 li
338.359 226.72 li
338.359 224.8 li
f
340.759 223.6 mo
342.679 223.6 li
342.679 225.52 li
341.479 226.24 li
339.56 226.24 li
339.56 224.32 li
f
341.959 223.12 mo
343.879 223.12 li
343.879 225.041 li
342.679 225.52 li
340.759 225.52 li
340.759 223.6 li
f
343.159 222.4 mo
345.079 222.4 li
345.079 224.32 li
343.879 225.041 li
341.959 225.041 li
341.959 223.12 li
f
344.359 221.68 mo
346.279 221.68 li
346.279 223.6 li
345.079 224.32 li
343.159 224.32 li
343.159 222.4 li
f
345.56 220.96 mo
347.479 220.96 li
347.479 222.88 li
346.279 223.6 li
344.359 223.6 li
344.359 221.68 li
f
346.999 220.24 mo
348.919 220.24 li
348.919 222.16 li
347.479 222.88 li
345.56 222.88 li
345.56 220.96 li
f
348.199 219.28 mo
350.119 219.28 li
350.119 221.2 li
348.919 222.16 li
346.999 222.16 li
346.999 220.24 li
f
349.399 218.56 mo
351.319 218.56 li
351.319 220.48 li
350.119 221.2 li
348.199 221.2 li
348.199 219.28 li
f
350.6 217.6 mo
352.52 217.6 li
352.52 219.52 li
351.319 220.48 li
349.399 220.48 li
349.399 218.56 li
f
351.799 216.64 mo
353.719 216.64 li
353.719 218.56 li
352.52 219.52 li
350.6 219.52 li
350.6 217.6 li
f
353.239 215.68 mo
355.159 215.68 li
355.159 217.6 li
353.719 218.56 li
351.799 218.56 li
351.799 216.64 li
f
354.439 214.48 mo
356.359 214.48 li
356.359 216.4 li
355.159 217.6 li
353.239 217.6 li
353.239 215.68 li
f
355.639 213.28 mo
357.56 213.28 li
357.56 215.2 li
356.359 216.4 li
354.439 216.4 li
354.439 214.48 li
f
356.839 212.08 mo
358.759 212.08 li
358.759 214 li
357.56 215.2 li
355.639 215.2 li
355.639 213.28 li
f
358.039 211.12 mo
359.959 211.12 li
359.959 213.041 li
358.759 214 li
356.839 214 li
356.839 212.08 li
f
359.239 209.68 mo
361.159 209.68 li
361.159 211.6 li
359.959 213.041 li
358.039 213.041 li
358.039 211.12 li
f
360.679 208.48 mo
362.6 208.48 li
362.6 210.4 li
361.159 211.6 li
359.239 211.6 li
359.239 209.68 li
f
361.879 207.041 mo
363.799 207.041 li
363.799 208.96 li
362.6 210.4 li
360.679 210.4 li
360.679 208.48 li
f
363.079 205.84 mo
364.999 205.84 li
364.999 207.76 li
363.799 208.96 li
361.879 208.96 li
361.879 207.041 li
f
364.279 204.64 mo
366.199 204.64 li
366.199 206.56 li
364.999 207.76 li
363.079 207.76 li
363.079 205.84 li
f
365.479 203.44 mo
367.399 203.44 li
367.399 205.36 li
366.199 206.56 li
364.279 206.56 li
364.279 204.64 li
f
366.679 202.24 mo
368.6 202.24 li
368.6 204.16 li
367.399 205.36 li
365.479 205.36 li
365.479 203.44 li
f
367.879 201.52 mo
369.799 201.52 li
369.799 203.44 li
368.6 204.16 li
366.679 204.16 li
366.679 202.24 li
f
369.079 200.8 mo
370.999 200.8 li
370.999 202.72 li
369.799 203.44 li
367.879 203.44 li
367.879 201.52 li
f
370.279 200.08 mo
372.199 200.08 li
372.199 202 li
370.999 202.72 li
369.079 202.72 li
369.079 200.8 li
f
371.719 199.84 mo
373.639 199.84 li
373.639 201.76 li
372.199 202 li
370.279 202 li
370.279 200.08 li
f
371.719 200.8 mo
374.839 200.8 li
@
372.919 199.84 mo
374.839 199.84 li
376.039 200.08 li
376.039 202 li
374.119 202 li
372.919 201.76 li
f
374.119 200.08 mo
376.039 200.08 li
377.239 200.56 li
377.239 202.48 li
375.319 202.48 li
374.119 202 li
f
375.319 200.56 mo
377.239 200.56 li
378.439 201.28 li
378.439 203.2 li
376.52 203.2 li
375.319 202.48 li
f
376.52 201.28 mo
378.439 201.28 li
379.639 202 li
379.639 203.92 li
377.719 203.92 li
376.52 203.2 li
f
377.719 202 mo
379.639 202 li
380.839 202.96 li
380.839 204.88 li
378.919 204.88 li
377.719 203.92 li
f
378.919 202.96 mo
380.839 202.96 li
382.039 203.68 li
382.039 205.6 li
380.119 205.6 li
378.919 204.88 li
f
380.119 203.68 mo
382.039 203.68 li
383.479 204.64 li
383.479 206.56 li
381.56 206.56 li
380.119 205.6 li
f
381.56 204.64 mo
383.479 204.64 li
384.679 205.36 li
384.679 207.28 li
382.759 207.28 li
381.56 206.56 li
f
382.759 205.36 mo
384.679 205.36 li
385.879 206.32 li
385.879 208.24 li
383.959 208.24 li
382.759 207.28 li
f
383.959 206.32 mo
385.879 206.32 li
387.079 207.041 li
387.079 208.96 li
385.159 208.96 li
383.959 208.24 li
f
385.159 207.041 mo
387.079 207.041 li
388.279 207.76 li
388.279 209.68 li
386.359 209.68 li
385.159 208.96 li
f
386.359 207.76 mo
388.279 207.76 li
389.479 208.24 li
389.479 210.16 li
387.56 210.16 li
386.359 209.68 li
f
387.56 208.24 mo
389.479 208.24 li
390.919 208.48 li
390.919 210.4 li
388.999 210.4 li
387.56 210.16 li
f
388.999 208.48 mo
390.919 208.48 li
392.119 208.96 li
392.119 210.88 li
390.199 210.88 li
388.999 210.4 li
f
390.199 209.92 mo
393.319 209.92 li
@
391.399 208.96 mo
393.319 208.96 li
394.52 209.2 li
394.52 211.12 li
392.6 211.12 li
391.399 210.88 li
f
393.799 208.96 mo
395.719 208.96 li
395.719 210.88 li
394.52 211.12 li
392.6 211.12 li
392.6 209.2 li
f
395.239 208.72 mo
397.159 208.72 li
397.159 210.64 li
395.719 210.88 li
393.799 210.88 li
393.799 208.96 li
f
396.439 208.24 mo
398.359 208.24 li
398.359 210.16 li
397.159 210.64 li
395.239 210.64 li
395.239 208.72 li
f
397.639 207.76 mo
399.56 207.76 li
399.56 209.68 li
398.359 210.16 li
396.439 210.16 li
396.439 208.24 li
f
398.839 207.041 mo
400.759 207.041 li
400.759 208.96 li
399.56 209.68 li
397.639 209.68 li
397.639 207.76 li
f
400.039 206.08 mo
401.959 206.08 li
401.959 208 li
400.759 208.96 li
398.839 208.96 li
398.839 207.041 li
f
401.239 205.12 mo
403.159 205.12 li
403.159 207.041 li
401.959 208 li
400.039 208 li
400.039 206.08 li
f
402.439 203.68 mo
404.359 203.68 li
404.359 205.6 li
403.159 207.041 li
401.239 207.041 li
401.239 205.12 li
f
403.639 202.24 mo
405.56 202.24 li
405.56 204.16 li
404.359 205.6 li
402.439 205.6 li
402.439 203.68 li
f
405.079 200.8 mo
406.999 200.8 li
406.999 202.72 li
405.56 204.16 li
403.639 204.16 li
403.639 202.24 li
f
406.279 199.12 mo
408.199 199.12 li
408.199 201.041 li
406.999 202.72 li
405.079 202.72 li
405.079 200.8 li
f
407.479 197.44 mo
409.399 197.44 li
409.399 199.36 li
408.199 201.041 li
406.279 201.041 li
406.279 199.12 li
f
408.679 196 mo
410.6 196 li
410.6 197.92 li
409.399 199.36 li
407.479 199.36 li
407.479 197.44 li
f
409.879 194.56 mo
411.799 194.56 li
411.799 196.48 li
410.6 197.92 li
408.679 197.92 li
408.679 196 li
f
411.079 193.36 mo
412.999 193.36 li
412.999 195.28 li
411.799 196.48 li
409.879 196.48 li
409.879 194.56 li
f
412.279 192.88 mo
414.199 192.88 li
414.199 194.8 li
412.999 195.28 li
411.079 195.28 li
411.079 193.36 li
f
412.279 193.84 mo
415.399 193.84 li
@
413.479 192.88 mo
415.399 192.88 li
416.6 193.12 li
416.6 195.041 li
414.679 195.041 li
413.479 194.8 li
f
414.679 193.12 mo
416.6 193.12 li
418.039 193.84 li
418.039 195.76 li
416.119 195.76 li
414.679 195.041 li
f
416.119 193.84 mo
418.039 193.84 li
419.239 194.8 li
419.239 196.72 li
417.319 196.72 li
416.119 195.76 li
f
417.319 194.8 mo
419.239 194.8 li
420.439 195.28 li
420.439 197.2 li
418.52 197.2 li
417.319 196.72 li
f
418.52 195.28 mo
420.439 195.28 li
421.639 196 li
421.639 197.92 li
419.719 197.92 li
418.52 197.2 li
f
419.719 196 mo
421.639 196 li
422.839 196.24 li
422.839 198.16 li
420.919 198.16 li
419.719 197.92 li
f
420.919 196.24 mo
422.839 196.24 li
424.039 196.48 li
424.039 198.4 li
422.119 198.4 li
420.919 198.16 li
f
423.56 196.24 mo
425.479 196.24 li
425.479 198.16 li
424.039 198.4 li
422.119 198.4 li
422.119 196.48 li
f
424.759 195.52 mo
426.679 195.52 li
426.679 197.44 li
425.479 198.16 li
423.56 198.16 li
423.56 196.24 li
f
425.959 194.32 mo
427.879 194.32 li
427.879 196.24 li
426.679 197.44 li
424.759 197.44 li
424.759 195.52 li
f
427.159 192.88 mo
429.079 192.88 li
429.079 194.8 li
427.879 196.24 li
425.959 196.24 li
425.959 194.32 li
f
428.359 190.72 mo
430.279 190.72 li
430.279 192.64 li
429.079 194.8 li
427.159 194.8 li
427.159 192.88 li
f
429.56 188.56 mo
431.479 188.56 li
431.479 190.48 li
430.279 192.64 li
428.359 192.64 li
428.359 190.72 li
f
430.999 186.16 mo
432.919 186.16 li
432.919 188.08 li
431.479 190.48 li
429.56 190.48 li
429.56 188.56 li
f
432.199 184 mo
434.119 184 li
434.119 185.92 li
432.919 188.08 li
430.999 188.08 li
430.999 186.16 li
f
433.399 182.56 mo
435.319 182.56 li
435.319 184.48 li
434.119 185.92 li
432.199 185.92 li
432.199 184 li
f
434.6 182.32 mo
436.52 182.32 li
436.52 184.24 li
435.319 184.48 li
433.399 184.48 li
433.399 182.56 li
f
434.6 182.32 mo
436.52 182.32 li
437.719 183.041 li
437.719 184.96 li
435.799 184.96 li
434.6 184.24 li
f
435.799 183.041 mo
437.719 183.041 li
438.919 184.24 li
438.919 186.16 li
436.999 186.16 li
435.799 184.96 li
f
436.999 184.24 mo
438.919 184.24 li
440.119 185.68 li
440.119 187.6 li
438.199 187.6 li
436.999 186.16 li
f
438.199 185.68 mo
440.119 185.68 li
441.56 186.88 li
441.56 188.8 li
439.639 188.8 li
438.199 187.6 li
f
439.639 186.88 mo
441.56 186.88 li
442.759 187.36 li
442.759 189.28 li
440.839 189.28 li
439.639 188.8 li
f
442.039 187.12 mo
443.959 187.12 li
443.959 189.041 li
442.759 189.28 li
440.839 189.28 li
440.839 187.36 li
f
443.239 186.16 mo
445.159 186.16 li
445.159 188.08 li
443.959 189.041 li
442.039 189.041 li
442.039 187.12 li
f
444.439 184.48 mo
446.359 184.48 li
446.359 186.4 li
445.159 188.08 li
443.239 188.08 li
443.239 186.16 li
f
445.639 182.08 mo
447.56 182.08 li
447.56 184 li
446.359 186.4 li
444.439 186.4 li
444.439 184.48 li
f
446.839 179.44 mo
448.759 179.44 li
448.759 181.36 li
447.56 184 li
445.639 184 li
445.639 182.08 li
f
448.039 176.8 mo
449.959 176.8 li
449.959 178.72 li
448.759 181.36 li
446.839 181.36 li
446.839 179.44 li
f
449.239 175.84 mo
451.159 175.84 li
451.159 177.76 li
449.959 178.72 li
448.039 178.72 li
448.039 176.8 li
f
449.239 175.84 mo
451.159 175.84 li
452.6 176.56 li
452.6 178.48 li
450.679 178.48 li
449.239 177.76 li
f
450.679 176.56 mo
452.6 176.56 li
453.799 178.24 li
453.799 180.16 li
451.879 180.16 li
450.679 178.48 li
f
451.879 178.24 mo
453.799 178.24 li
454.999 180.16 li
454.999 182.08 li
453.079 182.08 li
451.879 180.16 li
f
453.079 180.16 mo
454.999 180.16 li
456.199 181.12 li
456.199 183.041 li
454.279 183.041 li
453.079 182.08 li
f
454.279 182.08 mo
457.399 182.08 li
@
456.679 179.92 mo
458.6 179.92 li
458.6 181.84 li
457.399 183.041 li
455.479 183.041 li
455.479 181.12 li
f
457.879 177.52 mo
459.799 177.52 li
459.799 179.44 li
458.6 181.84 li
456.679 181.84 li
456.679 179.92 li
f
459.079 174.16 mo
460.999 174.16 li
460.999 176.08 li
459.799 179.44 li
457.879 179.44 li
457.879 177.52 li
f
460.279 171.041 mo
462.199 171.041 li
462.199 172.96 li
460.999 176.08 li
459.079 176.08 li
459.079 174.16 li
f
461.479 170.08 mo
463.399 170.08 li
463.399 172 li
462.199 172.96 li
460.279 172.96 li
460.279 171.041 li
f
461.479 170.08 mo
463.399 170.08 li
464.6 171.76 li
464.6 173.68 li
462.679 173.68 li
461.479 172 li
f
462.679 171.76 mo
464.6 171.76 li
466.039 174.4 li
466.039 176.32 li
464.119 176.32 li
462.679 173.68 li
f
464.119 174.4 mo
466.039 174.4 li
467.239 175.84 li
467.239 177.76 li
465.319 177.76 li
464.119 176.32 li
f
465.319 176.8 mo
468.439 176.8 li
@
467.719 173.92 mo
469.639 173.92 li
469.639 175.84 li
468.439 177.76 li
466.52 177.76 li
466.52 175.84 li
f
468.919 170.32 mo
470.839 170.32 li
470.839 172.24 li
469.639 175.84 li
467.719 175.84 li
467.719 173.92 li
f
470.119 166.72 mo
472.039 166.72 li
472.039 168.64 li
470.839 172.24 li
468.919 172.24 li
468.919 170.32 li
f
471.319 166 mo
473.239 166 li
473.239 167.92 li
472.039 168.64 li
470.119 168.64 li
470.119 166.72 li
f
471.319 166 mo
473.239 166 li
474.439 168.64 li
474.439 170.56 li
472.52 170.56 li
471.319 167.92 li
f
472.52 168.64 mo
474.439 168.64 li
475.639 171.28 li
475.639 173.2 li
473.719 173.2 li
472.52 170.56 li
f
473.719 171.28 mo
475.639 171.28 li
476.6 172 li
476.6 173.92 li
474.679 173.92 li
473.719 173.2 li
f
474.679 172.96 mo
477.079 172.96 li
@
475.879 171.041 mo
477.799 171.041 li
477.799 172.96 li
477.079 173.92 li
475.159 173.92 li
475.159 172 li
f
476.6 169.12 mo
478.52 169.12 li
478.52 171.041 li
477.799 172.96 li
475.879 172.96 li
475.879 171.041 li
f
477.319 166.72 mo
479.239 166.72 li
479.239 168.64 li
478.52 171.041 li
476.6 171.041 li
476.6 169.12 li
f
478.039 164.08 mo
479.959 164.08 li
479.959 166 li
479.239 168.64 li
477.319 168.64 li
477.319 166.72 li
f
478.759 162.16 mo
480.679 162.16 li
480.679 164.08 li
479.959 166 li
478.039 166 li
478.039 164.08 li
f
479.479 161.92 mo
481.399 161.92 li
481.399 163.84 li
480.679 164.08 li
478.759 164.08 li
478.759 162.16 li
f
479.479 161.92 mo
481.399 161.92 li
482.119 163.6 li
482.119 165.52 li
480.199 165.52 li
479.479 163.84 li
f
480.199 163.6 mo
482.119 163.6 li
482.839 165.76 li
482.839 167.68 li
480.919 167.68 li
480.199 165.52 li
f
480.919 165.76 mo
482.839 165.76 li
483.56 167.44 li
483.56 169.36 li
481.639 169.36 li
480.919 167.68 li
f
481.639 167.44 mo
483.56 167.44 li
484.279 168.4 li
484.279 170.32 li
482.359 170.32 li
481.639 169.36 li
f
483.079 167.92 mo
484.999 167.92 li
484.999 169.84 li
484.279 170.32 li
482.359 170.32 li
482.359 168.4 li
f
483.799 166.48 mo
485.719 166.48 li
485.719 168.4 li
484.999 169.84 li
483.079 169.84 li
483.079 167.92 li
f
484.52 163.84 mo
486.439 163.84 li
486.439 165.76 li
485.719 168.4 li
483.799 168.4 li
483.799 166.48 li
f
485.239 160.96 mo
487.159 160.96 li
487.159 162.88 li
486.439 165.76 li
484.52 165.76 li
484.52 163.84 li
f
485.959 158.8 mo
487.879 158.8 li
487.879 160.72 li
487.159 162.88 li
485.239 162.88 li
485.239 160.96 li
f
485.959 158.8 mo
487.879 158.8 li
488.6 159.041 li
488.6 160.96 li
486.679 160.96 li
485.959 160.72 li
f
486.679 159.041 mo
488.6 159.041 li
489.319 161.2 li
489.319 163.12 li
487.399 163.12 li
486.679 160.96 li
f
487.399 161.2 mo
489.319 161.2 li
490.039 163.6 li
490.039 165.52 li
488.119 165.52 li
487.399 163.12 li
f
488.119 163.6 mo
490.039 163.6 li
490.759 165.041 li
490.759 166.96 li
488.839 166.96 li
488.119 165.52 li
f
488.839 165.041 mo
490.759 165.041 li
491.479 165.28 li
491.479 167.2 li
489.56 167.2 li
488.839 166.96 li
f
490.279 163.84 mo
492.199 163.84 li
492.199 165.76 li
491.479 167.2 li
489.56 167.2 li
489.56 165.28 li
f
491.239 160.96 mo
493.159 160.96 li
493.159 162.88 li
492.199 165.76 li
490.279 165.76 li
490.279 163.84 li
f
491.719 157.6 mo
493.639 157.6 li
493.639 159.52 li
493.159 162.88 li
491.239 162.88 li
491.239 160.96 li
f
492.439 155.68 mo
494.359 155.68 li
494.359 157.6 li
493.639 159.52 li
491.719 159.52 li
491.719 157.6 li
f
492.439 155.68 mo
494.359 155.68 li
495.079 156.64 li
495.079 158.56 li
493.159 158.56 li
492.439 157.6 li
f
493.159 156.64 mo
495.079 156.64 li
495.799 159.28 li
495.799 161.2 li
493.879 161.2 li
493.159 158.56 li
f
493.879 159.28 mo
495.799 159.28 li
496.52 161.68 li
496.52 163.6 li
494.6 163.6 li
493.879 161.2 li
f
494.6 161.68 mo
496.52 161.68 li
497.239 162.4 li
497.239 164.32 li
495.319 164.32 li
494.6 163.6 li
f
495.799 161.68 mo
497.719 161.68 li
497.719 163.6 li
497.239 164.32 li
495.319 164.32 li
495.319 162.4 li
f
496.52 160.24 mo
498.439 160.24 li
498.439 162.16 li
497.719 163.6 li
495.799 163.6 li
495.799 161.68 li
f
496.999 158.08 mo
498.919 158.08 li
498.919 160 li
498.439 162.16 li
496.52 162.16 li
496.52 160.24 li
f
497.479 155.44 mo
499.399 155.44 li
499.399 157.36 li
498.919 160 li
496.999 160 li
496.999 158.08 li
f
497.959 153.52 mo
499.879 153.52 li
499.879 155.44 li
499.399 157.36 li
497.479 157.36 li
497.479 155.44 li
f
498.439 153.28 mo
500.359 153.28 li
500.359 155.2 li
499.879 155.44 li
497.959 155.44 li
497.959 153.52 li
f
498.439 153.28 mo
500.359 153.28 li
500.839 154.72 li
500.839 156.64 li
498.919 156.64 li
498.439 155.2 li
f
498.919 154.72 mo
500.839 154.72 li
501.319 157.12 li
501.319 159.041 li
499.399 159.041 li
498.919 156.64 li
f
499.399 157.12 mo
501.319 157.12 li
502.039 158.8 li
502.039 160.72 li
500.119 160.72 li
499.399 159.041 li
f
500.119 158.8 mo
502.039 158.8 li
502.279 160 li
502.279 161.92 li
500.359 161.92 li
500.119 160.72 li
f
500.359 160.96 mo
502.999 160.96 li
@
72.1992 13.8398 mo
74.1191 13.8398 li
74.5991 14.5601 li
74.5991 16.48 li
72.6792 16.48 li
72.1992 15.7603 li
0.0705882 1 1 0.0117647 cmyk
f
72.6792 14.5601 mo
74.5991 14.5601 li
75.7993 15.7603 li
75.7993 17.6802 li
73.8789 17.6802 li
72.6792 16.48 li
f
76.999 19.1201 mo
78.9189 19.1201 li
79.6392 19.6001 li
79.6392 21.52 li
77.7192 21.52 li
76.999 21.04 li
f
77.7192 19.6001 mo
79.6392 19.6001 li
80.8394 20.8003 li
80.8394 22.7202 li
78.9189 22.7202 li
77.7192 21.52 li
f
81.3193 23.4399 mo
83.2393 23.4399 li
84.439 24.8799 li
84.439 26.8003 li
82.519 26.8003 li
81.3193 25.3599 li
f
82.519 24.8799 mo
84.439 24.8799 li
85.6392 26.0801 li
85.6392 28 li
83.7192 28 li
82.519 26.8003 li
f
87.5591 29.6802 mo
89.479 29.6802 li
90.6792 31.1201 li
90.6792 33.04 li
88.7593 33.04 li
87.5591 31.6001 li
f
91.8789 34.48 mo
93.7993 34.48 li
94.2793 34.96 li
94.2793 36.8799 li
92.3594 36.8799 li
91.8789 36.3999 li
f
92.3594 34.96 mo
94.2793 34.96 li
95.479 36.1602 li
95.479 38.0801 li
93.5591 38.0801 li
92.3594 36.8799 li
f
96.1992 38.8003 mo
98.1191 38.8003 li
99.3193 40 li
99.3193 41.9199 li
97.3989 41.9199 li
96.1992 40.7202 li
f
97.3989 40 mo
99.3193 40 li
100.519 41.2002 li
100.519 43.1201 li
98.5991 43.1201 li
97.3989 41.9199 li
f
102.439 45.04 mo
104.359 45.04 li
105.559 46.2402 li
105.559 48.1602 li
103.639 48.1602 li
102.439 46.96 li
f
103.639 46.2402 mo
105.559 46.2402 li
106.279 46.96 li
106.279 48.8799 li
104.359 48.8799 li
103.639 48.1602 li
f
107.239 50.0801 mo
109.159 50.0801 li
110.359 51.2798 li
110.359 53.2002 li
108.439 53.2002 li
107.239 52 li
f
108.439 51.2798 mo
110.359 51.2798 li
111.079 52 li
111.079 53.9199 li
109.159 53.9199 li
108.439 53.2002 li
f
112.279 55.1201 mo
114.199 55.1201 li
115.399 56.3198 li
115.399 58.2402 li
113.479 58.2402 li
112.279 57.04 li
f
118.279 60.1602 mo
120.199 60.1602 li
121.399 61.6001 li
121.399 63.52 li
119.479 63.52 li
118.279 62.0801 li
f
122.119 64.48 mo
124.039 64.48 li
125.239 66.1602 li
125.239 68.0801 li
123.319 68.0801 li
122.119 66.3999 li
f
123.319 66.1602 mo
125.239 66.1602 li
125.959 66.8799 li
125.959 68.8003 li
124.039 68.8003 li
123.319 68.0801 li
f
126.919 69.7603 mo
128.839 69.7603 li
130.039 70.96 li
130.039 72.8799 li
128.119 72.8799 li
126.919 71.6802 li
f
128.119 70.96 mo
130.039 70.96 li
130.759 71.4399 li
130.759 73.3599 li
128.839 73.3599 li
128.119 72.8799 li
f
133.159 74.8003 mo
135.079 74.8003 li
136.279 76 li
136.279 77.9199 li
134.359 77.9199 li
133.159 76.7202 li
f
138.199 79.6001 mo
140.119 79.6001 li
141.319 80.8003 li
141.319 82.7202 li
139.399 82.7202 li
138.199 81.52 li
f
142.999 84.6401 mo
144.919 84.6401 li
146.359 85.6001 li
146.359 87.52 li
144.439 87.52 li
142.999 86.5601 li
f
148.039 89.4399 mo
149.959 89.4399 li
151.159 90.6401 li
151.159 92.5601 li
149.239 92.5601 li
148.039 91.3599 li
f
149.239 90.6401 mo
151.159 90.6401 li
152.359 91.8398 li
152.359 93.7603 li
150.439 93.7603 li
149.239 92.5601 li
f
152.839 94 mo
154.759 94 li
155.959 95.2002 li
155.959 97.1201 li
154.039 97.1201 li
152.839 95.9199 li
f
154.039 95.2002 mo
155.959 95.2002 li
157.399 96.1602 li
157.399 98.0801 li
155.479 98.0801 li
154.039 97.1201 li
f
157.879 98.5601 mo
159.799 98.5601 li
160.999 99.52 li
160.999 101.44 li
159.079 101.44 li
157.879 100.48 li
f
159.079 99.52 mo
160.999 99.52 li
162.199 100.72 li
162.199 102.64 li
160.279 102.64 li
159.079 101.44 li
f
164.119 104.08 mo
166.039 104.08 li
167.239 105.28 li
167.239 107.2 li
165.319 107.2 li
164.119 106 li
f
165.319 105.28 mo
167.239 105.28 li
168.439 106.24 li
168.439 108.16 li
166.519 108.16 li
165.319 107.2 li
f
168.919 108.4 mo
170.839 108.4 li
172.039 109.36 li
172.039 111.28 li
170.119 111.28 li
168.919 110.32 li
f
170.119 109.36 mo
172.039 109.36 li
173.479 110.56 li
173.479 112.48 li
171.559 112.48 li
170.119 111.28 li
f
173.959 112.48 mo
175.879 112.48 li
177.079 113.68 li
177.079 115.6 li
175.159 115.6 li
173.959 114.4 li
f
175.159 113.68 mo
177.079 113.68 li
178.279 114.64 li
178.279 116.56 li
176.359 116.56 li
175.159 115.6 li
f
180.199 118.24 mo
182.119 118.24 li
183.319 119.68 li
183.319 121.6 li
181.399 121.6 li
180.199 120.16 li
f
181.399 119.68 mo
183.319 119.68 li
184.039 120.4 li
184.039 122.32 li
182.119 122.32 li
181.399 121.6 li
f
184.999 123.04 mo
186.919 123.04 li
188.119 124.24 li
188.119 126.16 li
186.199 126.16 li
184.999 124.96 li
f
186.199 124.24 mo
188.119 124.24 li
189.319 125.44 li
189.319 127.36 li
187.399 127.36 li
186.199 126.16 li
f
190.039 127.36 mo
191.959 127.36 li
193.159 128.56 li
193.159 130.48 li
191.239 130.48 li
190.039 129.28 li
f
191.239 128.56 mo
193.159 128.56 li
193.879 129.28 li
193.879 131.2 li
191.959 131.2 li
191.239 130.48 li
f
196.039 132.88 mo
197.959 132.88 li
199.159 133.84 li
199.159 135.76 li
197.239 135.76 li
196.039 134.8 li
f
197.239 133.84 mo
199.159 133.84 li
199.879 134.56 li
199.879 136.48 li
197.959 136.48 li
197.239 135.76 li
f
201.079 137.2 mo
202.999 137.2 li
204.199 138.16 li
204.199 140.08 li
202.279 140.08 li
201.079 139.12 li
f
202.279 138.16 mo
204.199 138.16 li
204.919 138.88 li
204.919 140.8 li
202.999 140.8 li
202.279 140.08 li
f
206.119 141.52 mo
208.039 141.52 li
209.239 142.48 li
209.239 144.4 li
207.319 144.4 li
206.119 143.44 li
f
207.319 142.48 mo
209.239 142.48 li
209.959 143.2 li
209.959 145.12 li
208.039 145.12 li
207.319 144.4 li
f
212.119 147.04 mo
214.039 147.04 li
215.479 148.24 li
215.479 150.16 li
213.559 150.16 li
212.119 148.96 li
f
217.159 151.6 mo
219.079 151.6 li
220.279 152.8 li
220.279 154.72 li
218.359 154.72 li
217.159 153.52 li
f
218.359 152.8 mo
220.279 152.8 li
220.999 153.52 li
220.999 155.44 li
219.079 155.44 li
218.359 154.72 li
f
222.199 156.16 mo
224.119 156.16 li
225.319 157.36 li
225.319 159.28 li
223.399 159.28 li
222.199 158.08 li
f
228.199 161.68 mo
230.119 161.68 li
231.319 162.88 li
231.319 164.8 li
229.399 164.8 li
228.199 163.6 li
f
233.239 166.24 mo
235.159 166.24 li
236.359 167.44 li
236.359 169.36 li
234.439 169.36 li
233.239 168.16 li
f
238.039 171.28 mo
239.959 171.28 li
241.159 172.48 li
241.159 174.4 li
239.239 174.4 li
238.039 173.2 li
f
243.079 176.08 mo
244.999 176.08 li
246.199 177.041 li
246.199 178.96 li
244.279 178.96 li
243.079 178 li
f
244.279 177.041 mo
246.199 177.041 li
247.399 178.24 li
247.399 180.16 li
245.479 180.16 li
244.279 178.96 li
f
248.119 180.16 mo
250.039 180.16 li
251.239 181.12 li
251.239 183.041 li
249.319 183.041 li
248.119 182.08 li
f
249.319 181.12 mo
251.239 181.12 li
252.439 182.32 li
252.439 184.24 li
250.519 184.24 li
249.319 183.041 li
f
252.919 184.72 mo
254.839 184.72 li
256.039 185.92 li
256.039 187.84 li
254.119 187.84 li
252.919 186.64 li
f
254.119 185.92 mo
256.039 185.92 li
257.479 187.12 li
257.479 189.041 li
255.559 189.041 li
254.119 187.84 li
f
259.159 190.48 mo
261.079 190.48 li
262.279 191.68 li
262.279 193.6 li
260.359 193.6 li
259.159 192.4 li
f
260.359 191.68 mo
262.279 191.68 li
263.479 192.64 li
263.479 194.56 li
261.559 194.56 li
260.359 193.6 li
f
263.959 194.8 mo
265.879 194.8 li
267.319 195.76 li
267.319 197.68 li
265.399 197.68 li
263.959 196.72 li
f
265.399 195.76 mo
267.319 195.76 li
268.519 196.72 li
268.519 198.64 li
266.599 198.64 li
265.399 197.68 li
f
268.999 198.4 mo
270.919 198.4 li
272.119 199.36 li
272.119 201.28 li
270.199 201.28 li
268.999 200.32 li
f
270.199 199.36 mo
272.119 199.36 li
273.319 200.32 li
273.319 202.24 li
271.399 202.24 li
270.199 201.28 li
f
275.239 202.72 mo
277.159 202.72 li
278.359 203.44 li
278.359 205.36 li
276.439 205.36 li
275.239 204.64 li
f
276.439 203.44 mo
278.359 203.44 li
279.559 204.16 li
279.559 206.08 li
277.639 206.08 li
276.439 205.36 li
f
280.039 205.36 mo
281.959 205.36 li
283.159 206.32 li
283.159 208.24 li
281.239 208.24 li
280.039 207.28 li
f
281.239 206.32 mo
283.159 206.32 li
284.599 206.8 li
284.599 208.72 li
282.679 208.72 li
281.239 208.24 li
f
285.079 207.76 mo
286.999 207.76 li
288.199 208.24 li
288.199 210.16 li
286.279 210.16 li
285.079 209.68 li
f
286.279 208.24 mo
288.199 208.24 li
289.399 208.48 li
289.399 210.4 li
287.479 210.4 li
286.279 210.16 li
f
291.319 209.44 mo
293.239 209.44 li
294.439 209.68 li
294.439 211.6 li
292.519 211.6 li
291.319 211.36 li
f
292.519 209.68 mo
294.439 209.68 li
295.159 209.92 li
295.159 211.84 li
293.239 211.84 li
292.519 211.6 li
f
296.119 210.4 mo
298.039 210.4 li
299.239 210.64 li
299.239 212.56 li
297.319 212.56 li
296.119 212.32 li
f
297.319 210.64 mo
299.239 210.64 li
299.959 210.88 li
299.959 212.8 li
298.039 212.8 li
297.319 212.56 li
f
301.159 211.12 mo
303.079 211.12 li
304.279 211.36 li
304.279 213.28 li
302.359 213.28 li
301.159 213.041 li
f
302.359 211.36 mo
304.279 211.36 li
305.479 211.6 li
305.479 213.52 li
303.559 213.52 li
302.359 213.28 li
f
307.159 211.84 mo
309.079 211.84 li
310.279 212.08 li
310.279 214 li
308.359 214 li
307.159 213.76 li
f
308.359 213.04 mo
310.999 213.04 li
@
312.199 213.28 mo
315.319 213.28 li
@
313.399 213.28 mo
316.52 213.28 li
@
317.239 213.52 mo
320.359 213.52 li
@
318.439 213.52 mo
321.079 213.52 li
@
323.239 213.76 mo
326.6 213.76 li
@
328.279 213.76 mo
331.399 213.76 li
@
329.479 213.76 mo
332.119 213.76 li
@
333.319 213.76 mo
336.439 213.76 li
@
334.52 213.76 mo
337.159 213.76 li
@
339.319 213.76 mo
342.439 213.76 li
@
340.52 213.76 mo
343.159 213.76 li
@
344.359 213.76 mo
347.479 213.76 li
@
345.56 213.76 mo
348.199 213.76 li
@
350.359 212.56 mo
352.279 212.56 li
352.279 214.48 li
351.079 214.72 li
349.159 214.72 li
349.159 212.8 li
f
350.359 213.52 mo
352.999 213.52 li
@
355.399 213.52 mo
358.52 213.52 li
@
360.439 213.28 mo
363.56 213.28 li
@
365.239 213.04 mo
368.6 213.04 li
@
371.479 212.8 mo
374.6 212.8 li
@
376.039 212.56 mo
378.439 212.56 li
@
377.719 211.36 mo
379.639 211.36 li
379.639 213.28 li
378.439 213.52 li
376.52 213.52 li
376.52 211.6 li
f
381.319 212.08 mo
384.439 212.08 li
@
387.079 211.6 mo
389.479 211.6 li
@
387.56 211.6 mo
390.679 211.6 li
@
393.56 209.92 mo
395.479 209.92 li
395.479 211.84 li
394.279 212.08 li
392.359 212.08 li
392.359 210.16 li
f
398.6 209.2 mo
400.52 209.2 li
400.52 211.12 li
399.319 211.36 li
397.399 211.36 li
397.399 209.44 li
f
403.639 208.24 mo
405.56 208.24 li
405.56 210.16 li
404.359 210.4 li
402.439 210.4 li
402.439 208.48 li
f
403.639 209.2 mo
406.759 209.2 li
@
407.959 208.24 mo
410.6 208.24 li
@
409.879 207.041 mo
411.799 207.041 li
411.799 208.96 li
410.6 209.2 li
408.679 209.2 li
408.679 207.28 li
f
412.999 207.04 mo
415.399 207.04 li
@
414.679 205.6 mo
416.6 205.6 li
416.6 207.52 li
415.399 208 li
413.479 208 li
413.479 206.08 li
f
419.719 203.92 mo
421.639 203.92 li
421.639 205.84 li
420.919 206.08 li
418.999 206.08 li
418.999 204.16 li
f
420.919 203.68 mo
422.839 203.68 li
422.839 205.6 li
421.639 205.84 li
419.719 205.84 li
419.719 203.92 li
f
424.52 202 mo
426.439 202 li
426.439 203.92 li
425.959 204.16 li
424.039 204.16 li
424.039 202.24 li
f
425.719 201.52 mo
427.639 201.52 li
427.639 203.44 li
426.439 203.92 li
424.52 203.92 li
424.52 202 li
f
429.56 199.36 mo
431.479 199.36 li
431.479 201.28 li
430.759 201.52 li
428.839 201.52 li
428.839 199.6 li
f
430.759 198.88 mo
432.679 198.88 li
432.679 200.8 li
431.479 201.28 li
429.56 201.28 li
429.56 199.36 li
f
435.56 195.52 mo
437.479 195.52 li
437.479 197.44 li
436.279 198.16 li
434.359 198.16 li
434.359 196.24 li
f
436.999 194.56 mo
438.919 194.56 li
438.919 196.48 li
437.479 197.44 li
435.56 197.44 li
435.56 195.52 li
f
440.6 191.68 mo
442.52 191.68 li
442.52 193.6 li
441.319 194.56 li
439.399 194.56 li
439.399 192.64 li
f
441.799 190.48 mo
443.719 190.48 li
443.719 192.4 li
442.52 193.6 li
440.6 193.6 li
440.6 191.68 li
f
445.639 186.88 mo
447.56 186.88 li
447.56 188.8 li
446.359 190 li
444.439 190 li
444.439 188.08 li
f
446.839 185.68 mo
448.759 185.68 li
448.759 187.6 li
447.56 188.8 li
445.639 188.8 li
445.639 186.88 li
f
451.639 180.4 mo
453.56 180.4 li
453.56 182.32 li
452.359 183.52 li
450.439 183.52 li
450.439 181.6 li
f
452.359 179.92 mo
454.279 179.92 li
454.279 181.84 li
453.56 182.32 li
451.639 182.32 li
451.639 180.4 li
f
456.679 177.28 mo
458.6 177.28 li
458.6 179.2 li
457.399 179.68 li
455.479 179.68 li
455.479 177.76 li
f
457.399 177.041 mo
459.319 177.041 li
459.319 178.96 li
458.6 179.2 li
456.679 179.2 li
456.679 177.28 li
f
460.279 177.28 mo
462.199 177.28 li
463.399 177.76 li
463.399 179.68 li
461.479 179.68 li
460.279 179.2 li
f
461.479 177.76 mo
463.399 177.76 li
464.6 178.24 li
464.6 180.16 li
462.679 180.16 li
461.479 179.68 li
f
466.52 180.88 mo
468.439 180.88 li
469.639 181.6 li
469.639 183.52 li
467.719 183.52 li
466.52 182.8 li
f
467.719 181.6 mo
469.639 181.6 li
470.359 182.08 li
470.359 184 li
468.439 184 li
467.719 183.52 li
f
471.56 184.24 mo
473.479 184.24 li
474.679 184.72 li
474.679 186.64 li
472.759 186.64 li
471.56 186.16 li
f
472.759 184.72 mo
474.679 184.72 li
475.399 184.96 li
475.399 186.88 li
473.479 186.88 li
472.759 186.64 li
f
476.359 185.92 mo
478.279 185.92 li
479.479 186.16 li
479.479 188.08 li
477.56 188.08 li
476.359 187.84 li
f
477.56 187.12 mo
480.199 187.12 li
@
483.799 184.72 mo
485.719 184.72 li
485.719 186.64 li
484.52 187.36 li
482.6 187.36 li
482.6 185.44 li
f
488.839 180.88 mo
490.759 180.88 li
490.759 182.8 li
489.56 184 li
487.639 184 li
487.639 182.08 li
f
492.439 176.32 mo
494.359 176.32 li
494.359 178.24 li
493.879 178.96 li
491.959 178.96 li
491.959 177.041 li
f
493.159 175.36 mo
495.079 175.36 li
495.079 177.28 li
494.359 178.24 li
492.439 178.24 li
492.439 176.32 li
f
497.479 170.56 mo
499.399 170.56 li
499.399 172.48 li
497.959 173.44 li
496.039 173.44 li
496.039 171.52 li
f
498.199 170.32 mo
500.119 170.32 li
500.119 172.24 li
499.399 172.48 li
497.479 172.48 li
497.479 170.56 li
f
77.959 95.6802 mo
79.3989 95.6802 li
80.5991 95.9199 li
80.5991 97.3599 li
79.1592 97.3599 li
77.959 97.1201 li
0.882353 0.356863 1 0.317647 cmyk
f
79.1592 95.9199 mo
80.5991 95.9199 li
81.7993 96.3999 li
81.7993 97.8398 li
80.3594 97.8398 li
79.1592 97.3599 li
f
80.3594 96.3999 mo
81.7993 96.3999 li
83.2393 96.6401 li
83.2393 98.0801 li
81.7993 98.0801 li
80.3594 97.8398 li
f
81.7993 96.6401 mo
83.2393 96.6401 li
84.439 97.1201 li
84.439 98.5601 li
82.999 98.5601 li
81.7993 98.0801 li
f
82.999 97.1201 mo
84.439 97.1201 li
85.6392 97.3599 li
85.6392 98.8003 li
84.1992 98.8003 li
82.999 98.5601 li
f
84.1992 97.3599 mo
85.6392 97.3599 li
86.8394 97.8398 li
86.8394 99.2798 li
85.3989 99.2798 li
84.1992 98.8003 li
f
94.0391 100 mo
95.479 100 li
96.6792 100.48 li
96.6792 101.92 li
95.2393 101.92 li
94.0391 101.44 li
f
1.44 lw
95.2393 101.2 mo
97.8789 101.2 li
@
96.439 100.48 mo
97.8789 100.48 li
99.0791 100.72 li
99.0791 102.16 li
97.6392 102.16 li
96.439 101.92 li
f
97.6392 100.72 mo
99.0791 100.72 li
100.279 101.2 li
100.279 102.64 li
98.8394 102.64 li
97.6392 102.16 li
f
98.8394 101.2 mo
100.279 101.2 li
101.479 101.44 li
101.479 102.88 li
100.039 102.88 li
98.8394 102.64 li
f
100.039 101.44 mo
101.479 101.44 li
102.679 101.68 li
102.679 103.12 li
101.239 103.12 li
100.039 102.88 li
f
110.119 103.36 mo
111.559 103.36 li
112.759 103.6 li
112.759 105.04 li
111.319 105.04 li
110.119 104.8 li
f
111.319 103.6 mo
112.759 103.6 li
113.959 103.84 li
113.959 105.28 li
112.519 105.28 li
111.319 105.04 li
f
112.519 103.84 mo
113.959 103.84 li
115.159 104.32 li
115.159 105.76 li
113.719 105.76 li
112.519 105.28 li
f
113.719 104.32 mo
115.159 104.32 li
116.359 104.8 li
116.359 106.24 li
114.919 106.24 li
113.719 105.76 li
f
114.919 104.8 mo
116.359 104.8 li
117.799 105.04 li
117.799 106.48 li
116.359 106.48 li
114.919 106.24 li
f
116.359 105.04 mo
117.799 105.04 li
118.999 105.52 li
118.999 106.96 li
117.559 106.96 li
116.359 106.48 li
f
125.959 109.12 mo
127.399 109.12 li
128.839 109.84 li
128.839 111.28 li
127.399 111.28 li
125.959 110.56 li
f
127.399 109.84 mo
128.839 109.84 li
130.039 110.56 li
130.039 112 li
128.599 112 li
127.399 111.28 li
f
128.599 110.56 mo
130.039 110.56 li
131.239 111.04 li
131.239 112.48 li
129.799 112.48 li
128.599 112 li
f
129.799 111.04 mo
131.239 111.04 li
132.439 111.52 li
132.439 112.96 li
130.999 112.96 li
129.799 112.48 li
f
130.999 111.52 mo
132.439 111.52 li
133.639 112.24 li
133.639 113.68 li
132.199 113.68 li
130.999 112.96 li
f
132.199 112.24 mo
133.639 112.24 li
134.599 112.72 li
134.599 114.16 li
133.159 114.16 li
132.199 113.68 li
f
142.039 117.76 mo
143.479 117.76 li
144.919 118.48 li
144.919 119.92 li
143.479 119.92 li
142.039 119.2 li
f
143.479 118.48 mo
144.919 118.48 li
146.119 118.96 li
146.119 120.4 li
144.679 120.4 li
143.479 119.92 li
f
144.679 118.96 mo
146.119 118.96 li
147.319 119.44 li
147.319 120.88 li
145.879 120.88 li
144.679 120.4 li
f
145.879 119.44 mo
147.319 119.44 li
148.519 119.92 li
148.519 121.36 li
147.079 121.36 li
145.879 120.88 li
f
147.079 119.92 mo
148.519 119.92 li
149.719 120.64 li
149.719 122.08 li
148.279 122.08 li
147.079 121.36 li
f
148.279 120.64 mo
149.719 120.64 li
150.919 121.12 li
150.919 122.56 li
149.479 122.56 li
148.279 122.08 li
f
157.639 125.44 mo
159.559 125.44 li
@
158.119 124.72 mo
159.559 124.72 li
160.759 125.44 li
160.759 126.88 li
159.319 126.88 li
158.119 126.16 li
f
159.319 125.44 mo
160.759 125.44 li
162.199 125.92 li
162.199 127.36 li
160.759 127.36 li
159.319 126.88 li
f
160.759 125.92 mo
162.199 125.92 li
163.399 126.4 li
163.399 127.84 li
161.959 127.84 li
160.759 127.36 li
f
161.959 126.4 mo
163.399 126.4 li
164.599 126.88 li
164.599 128.32 li
163.159 128.32 li
161.959 127.84 li
f
163.159 126.88 mo
164.599 126.88 li
165.799 127.36 li
165.799 128.8 li
164.359 128.8 li
163.159 128.32 li
f
164.359 127.36 mo
165.799 127.36 li
166.519 127.84 li
166.519 129.28 li
165.079 129.28 li
164.359 128.8 li
f
173.719 131.68 mo
175.159 131.68 li
175.639 131.92 li
175.639 133.36 li
174.199 133.36 li
173.719 133.12 li
f
174.199 131.92 mo
175.639 131.92 li
176.839 132.64 li
176.839 134.08 li
175.399 134.08 li
174.199 133.36 li
f
175.399 132.64 mo
176.839 132.64 li
178.039 133.36 li
178.039 134.8 li
176.599 134.8 li
175.399 134.08 li
f
176.599 133.36 mo
178.039 133.36 li
179.239 133.84 li
179.239 135.28 li
177.799 135.28 li
176.599 134.8 li
f
177.799 133.84 mo
179.239 133.84 li
180.679 134.56 li
180.679 136 li
179.239 136 li
177.799 135.28 li
f
179.239 134.56 mo
180.679 134.56 li
181.879 135.04 li
181.879 136.48 li
180.439 136.48 li
179.239 136 li
f
180.439 135.04 mo
181.879 135.04 li
183.079 135.76 li
183.079 137.2 li
181.639 137.2 li
180.439 136.48 li
f
189.079 139.36 mo
190.519 139.36 li
191.719 140.08 li
191.719 141.52 li
190.279 141.52 li
189.079 140.8 li
f
190.279 140.08 mo
191.719 140.08 li
192.919 140.56 li
192.919 142 li
191.479 142 li
190.279 141.52 li
f
191.479 140.56 mo
192.919 140.56 li
194.119 141.28 li
194.119 142.72 li
192.679 142.72 li
191.479 142 li
f
192.679 141.28 mo
194.119 141.28 li
195.319 141.76 li
195.319 143.2 li
193.879 143.2 li
192.679 142.72 li
f
193.879 141.76 mo
195.319 141.76 li
196.759 142.24 li
196.759 143.68 li
195.319 143.68 li
193.879 143.2 li
f
195.319 142.24 mo
196.759 142.24 li
197.959 142.72 li
197.959 144.16 li
196.519 144.16 li
195.319 143.68 li
f
196.519 142.72 mo
197.959 142.72 li
198.439 142.96 li
198.439 144.4 li
196.999 144.4 li
196.519 144.16 li
f
205.639 146.56 mo
207.079 146.56 li
207.799 146.8 li
207.799 148.24 li
206.359 148.24 li
205.639 148 li
f
206.359 146.8 mo
207.799 146.8 li
208.999 147.28 li
208.999 148.72 li
207.559 148.72 li
206.359 148.24 li
f
207.559 147.28 mo
208.999 147.28 li
210.199 147.76 li
210.199 149.2 li
208.759 149.2 li
207.559 148.72 li
f
208.759 147.76 mo
210.199 147.76 li
211.399 148.24 li
211.399 149.68 li
209.959 149.68 li
208.759 149.2 li
f
209.959 148.24 mo
211.399 148.24 li
212.599 148.96 li
212.599 150.4 li
211.159 150.4 li
209.959 149.68 li
f
211.159 148.96 mo
212.599 148.96 li
213.799 149.68 li
213.799 151.12 li
212.359 151.12 li
211.159 150.4 li
f
212.359 149.68 mo
213.799 149.68 li
215.239 150.64 li
215.239 152.08 li
213.799 152.08 li
212.359 151.12 li
f
218.119 158.32 mo
219.559 158.32 li
220.039 159.28 li
220.039 160.72 li
218.599 160.72 li
218.119 159.76 li
f
218.599 159.28 mo
220.039 159.28 li
221.239 162.64 li
221.239 164.08 li
219.799 164.08 li
218.599 160.72 li
f
219.799 162.64 mo
221.239 162.64 li
222.439 165.76 li
222.439 167.2 li
220.999 167.2 li
219.799 164.08 li
f
223.639 174.4 mo
225.079 174.4 li
226.279 178.24 li
226.279 179.68 li
224.839 179.68 li
223.639 175.84 li
f
224.839 178.24 mo
226.279 178.24 li
227.479 181.84 li
227.479 183.28 li
226.039 183.28 li
224.839 179.68 li
f
229.399 190.24 mo
230.839 190.24 li
231.319 191.92 li
231.319 193.36 li
229.879 193.36 li
229.399 191.68 li
f
229.879 191.92 mo
231.319 191.92 li
232.519 195.041 li
232.519 196.48 li
231.079 196.48 li
229.879 193.36 li
f
231.079 195.041 mo
232.519 195.041 li
233.719 197.68 li
233.719 199.12 li
232.279 199.12 li
231.079 196.48 li
f
235.399 206.08 mo
236.839 206.08 li
237.319 207.041 li
237.319 208.48 li
235.879 208.48 li
235.399 207.52 li
f
235.879 207.041 mo
237.319 207.041 li
238.519 209.68 li
238.519 211.12 li
237.079 211.12 li
235.879 208.48 li
f
237.079 209.68 mo
238.519 209.68 li
239.719 212.32 li
239.719 213.76 li
238.279 213.76 li
237.079 211.12 li
f
238.279 212.32 mo
239.719 212.32 li
240.919 214.48 li
240.919 215.92 li
239.479 215.92 li
238.279 213.76 li
f
244.519 222.4 mo
245.959 222.4 li
247.159 224.08 li
247.159 225.52 li
245.719 225.52 li
244.519 223.84 li
f
245.719 224.08 mo
247.159 224.08 li
248.359 225.76 li
248.359 227.2 li
246.919 227.2 li
245.719 225.52 li
f
246.919 225.76 mo
248.359 225.76 li
249.799 226.96 li
249.799 228.4 li
248.359 228.4 li
246.919 227.2 li
f
248.359 226.96 mo
249.799 226.96 li
250.999 228.4 li
250.999 229.84 li
249.559 229.84 li
248.359 228.4 li
f
249.559 228.4 mo
250.999 228.4 li
251.959 229.36 li
251.959 230.8 li
250.519 230.8 li
249.559 229.84 li
f
258.199 236.08 mo
259.639 236.08 li
260.839 238.48 li
260.839 239.92 li
259.399 239.92 li
258.199 237.52 li
f
259.399 238.48 mo
260.839 238.48 li
262.039 240.88 li
262.039 242.32 li
260.599 242.32 li
259.399 239.92 li
f
260.599 240.88 mo
262.039 240.88 li
263.239 242.56 li
263.239 244 li
261.799 244 li
260.599 242.32 li
f
261.799 242.56 mo
263.239 242.56 li
264.679 243.52 li
264.679 244.96 li
263.239 244.96 li
261.799 244 li
f
271.639 249.041 mo
273.079 249.041 li
274.279 249.76 li
274.279 251.2 li
272.839 251.2 li
271.639 250.48 li
f
272.839 249.76 mo
274.279 249.76 li
275.719 250.48 li
275.719 251.92 li
274.279 251.92 li
272.839 251.2 li
f
274.279 250.48 mo
275.719 250.48 li
276.919 251.44 li
276.919 252.88 li
275.479 252.88 li
274.279 251.92 li
f
275.479 251.44 mo
276.919 251.44 li
278.119 252.16 li
278.119 253.6 li
276.679 253.6 li
275.479 252.88 li
f
276.679 252.16 mo
278.119 252.16 li
279.319 252.88 li
279.319 254.32 li
277.879 254.32 li
276.679 253.6 li
f
277.879 252.88 mo
279.319 252.88 li
280.519 253.36 li
280.519 254.8 li
279.079 254.8 li
277.879 254.32 li
f
287.719 258.64 mo
289.159 258.64 li
290.359 259.36 li
290.359 260.8 li
288.919 260.8 li
287.719 260.08 li
f
288.919 259.36 mo
290.359 259.36 li
291.799 260.08 li
291.799 261.52 li
290.359 261.52 li
288.919 260.8 li
f
290.359 260.08 mo
291.799 260.08 li
292.999 260.8 li
292.999 262.24 li
291.559 262.24 li
290.359 261.52 li
f
291.559 260.8 mo
292.999 260.8 li
294.199 261.52 li
294.199 262.96 li
292.759 262.96 li
291.559 262.24 li
f
292.759 261.52 mo
294.199 261.52 li
295.399 262.24 li
295.399 263.68 li
293.959 263.68 li
292.759 262.96 li
f
293.959 262.24 mo
295.399 262.24 li
296.599 262.96 li
296.599 264.4 li
295.159 264.4 li
293.959 263.68 li
f
303.799 268.48 mo
305.239 268.48 li
306.439 269.2 li
306.439 270.64 li
304.999 270.64 li
303.799 269.92 li
f
304.999 269.2 mo
306.439 269.2 li
307.639 269.92 li
307.639 271.36 li
306.199 271.36 li
304.999 270.64 li
f
306.199 269.92 mo
307.639 269.92 li
308.839 270.64 li
308.839 272.08 li
307.399 272.08 li
306.199 271.36 li
f
307.399 270.64 mo
308.839 270.64 li
310.279 271.6 li
310.279 273.041 li
308.839 273.041 li
307.399 272.08 li
f
308.839 271.6 mo
310.279 271.6 li
311.479 272.32 li
311.479 273.76 li
310.039 273.76 li
308.839 273.041 li
f
310.039 272.32 mo
311.479 272.32 li
312.439 272.8 li
312.439 274.24 li
310.999 274.24 li
310.039 273.76 li
f
1 lw
70.0391 295.72 mo
76.2793 295.72 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
70.0391 238.12 mo
76.2793 238.12 li
@
70.0391 180.76 mo
76.2793 180.76 li
@
70.0391 122.92 mo
76.2793 122.92 li
@
70.0391 65.3198 mo
76.2793 65.3198 li
@
70.0391 7.72021 mo
76.2793 7.72021 li
@
70.0391 284.2 mo
73.3994 284.2 li
@
70.0391 272.68 mo
73.3994 272.68 li
@
70.0391 261.16 mo
73.3994 261.16 li
@
70.0391 249.88 mo
73.3994 249.88 li
@
70.0391 226.6 mo
73.3994 226.6 li
@
70.0391 215.32 mo
73.3994 215.32 li
@
70.0391 203.56 mo
73.3994 203.56 li
@
70.0391 192.04 mo
73.3994 192.04 li
@
70.0391 169 mo
73.3994 169 li
@
70.0391 157.48 mo
73.3994 157.48 li
@
70.0391 146.2 mo
73.3994 146.2 li
@
70.0391 134.44 mo
73.3994 134.44 li
@
70.0391 111.64 mo
73.3994 111.64 li
@
70.0391 99.8799 mo
73.3994 99.8799 li
@
70.0391 88.3599 mo
73.3994 88.3599 li
@
70.0391 77.0801 mo
73.3994 77.0801 li
@
70.0391 53.7998 mo
73.3994 53.7998 li
@
70.0391 42.52 mo
73.3994 42.52 li
@
70.0391 30.7598 mo
73.3994 30.7598 li
@
70.0391 19.2397 mo
73.3994 19.2397 li
@
496.039 295.72 mo
502.279 295.72 li
@
496.039 238.12 mo
502.279 238.12 li
@
496.039 180.76 mo
502.279 180.76 li
@
496.039 122.92 mo
502.279 122.92 li
@
496.039 65.3198 mo
502.279 65.3198 li
@
496.039 7.72021 mo
502.279 7.72021 li
@
499.159 284.2 mo
502.279 284.2 li
@
499.159 272.68 mo
502.279 272.68 li
@
499.159 261.16 mo
502.279 261.16 li
@
499.159 249.88 mo
502.279 249.88 li
@
499.159 226.6 mo
502.279 226.6 li
@
499.159 215.32 mo
502.279 215.32 li
@
499.159 203.56 mo
502.279 203.56 li
@
499.159 192.04 mo
502.279 192.04 li
@
499.159 169 mo
502.279 169 li
@
499.159 157.48 mo
502.279 157.48 li
@
499.159 146.2 mo
502.279 146.2 li
@
499.159 134.44 mo
502.279 134.44 li
@
499.159 111.64 mo
502.279 111.64 li
@
499.159 99.8799 mo
502.279 99.8799 li
@
499.159 88.3599 mo
502.279 88.3599 li
@
499.159 77.0801 mo
502.279 77.0801 li
@
499.159 53.7998 mo
502.279 53.7998 li
@
499.159 42.52 mo
502.279 42.52 li
@
499.159 30.7598 mo
502.279 30.7598 li
@
499.159 19.2397 mo
502.279 19.2397 li
@
70.1592 289.6 mo
70.1592 295.84 li
@
131.839 289.6 mo
131.839 295.84 li
@
193.519 289.6 mo
193.519 295.84 li
@
255.199 289.6 mo
255.199 295.84 li
@
316.879 289.6 mo
316.879 295.84 li
@
378.799 289.6 mo
378.799 295.84 li
@
440.479 289.6 mo
440.479 295.84 li
@
502.159 289.6 mo
502.159 295.84 li
@
82.6392 292.72 mo
82.6392 295.84 li
@
94.8789 292.72 mo
94.8789 295.84 li
@
107.119 292.72 mo
107.119 295.84 li
@
119.599 292.72 mo
119.599 295.84 li
@
144.319 292.72 mo
144.319 295.84 li
@
156.559 292.72 mo
156.559 295.84 li
@
168.799 292.72 mo
168.799 295.84 li
@
181.279 292.72 mo
181.279 295.84 li
@
205.759 292.72 mo
205.759 295.84 li
@
218.239 292.72 mo
218.239 295.84 li
@
230.719 292.72 mo
230.719 295.84 li
@
242.959 292.72 mo
242.959 295.84 li
@
267.679 292.72 mo
267.679 295.84 li
@
279.919 292.72 mo
279.919 295.84 li
@
292.399 292.72 mo
292.399 295.84 li
@
304.639 292.72 mo
304.639 295.84 li
@
329.359 292.72 mo
329.359 295.84 li
@
341.6 292.72 mo
341.6 295.84 li
@
354.079 292.72 mo
354.079 295.84 li
@
366.319 292.72 mo
366.319 295.84 li
@
391.039 292.72 mo
391.039 295.84 li
@
403.52 292.72 mo
403.52 295.84 li
@
415.759 292.72 mo
415.759 295.84 li
@
427.999 292.72 mo
427.999 295.84 li
@
452.719 292.72 mo
452.719 295.84 li
@
465.199 292.72 mo
465.199 295.84 li
@
477.439 292.72 mo
477.439 295.84 li
@
489.679 292.72 mo
489.679 295.84 li
@
70.1592 7.6001 mo
70.1592 13.8398 li
@
131.839 7.6001 mo
131.839 13.8398 li
@
193.519 7.6001 mo
193.519 13.8398 li
@
255.199 7.6001 mo
255.199 13.8398 li
@
316.879 7.6001 mo
316.879 13.8398 li
@
378.799 7.6001 mo
378.799 13.8398 li
@
440.479 7.6001 mo
440.479 13.8398 li
@
502.159 7.6001 mo
502.159 13.8398 li
@
82.6392 7.6001 mo
82.6392 10.96 li
@
94.8789 7.6001 mo
94.8789 10.96 li
@
107.119 7.6001 mo
107.119 10.96 li
@
119.599 7.6001 mo
119.599 10.96 li
@
144.319 7.6001 mo
144.319 10.96 li
@
156.559 7.6001 mo
156.559 10.96 li
@
168.799 7.6001 mo
168.799 10.96 li
@
181.279 7.6001 mo
181.279 10.96 li
@
205.759 7.6001 mo
205.759 10.96 li
@
218.239 7.6001 mo
218.239 10.96 li
@
230.719 7.6001 mo
230.719 10.96 li
@
242.959 7.6001 mo
242.959 10.96 li
@
267.679 7.6001 mo
267.679 10.96 li
@
279.919 7.6001 mo
279.919 10.96 li
@
292.399 7.6001 mo
292.399 10.96 li
@
304.639 7.6001 mo
304.639 10.96 li
@
329.359 7.6001 mo
329.359 10.96 li
@
341.6 7.6001 mo
341.6 10.96 li
@
354.079 7.6001 mo
354.079 10.96 li
@
366.319 7.6001 mo
366.319 10.96 li
@
391.039 7.6001 mo
391.039 10.96 li
@
403.52 7.6001 mo
403.52 10.96 li
@
415.759 7.6001 mo
415.759 10.96 li
@
427.999 7.6001 mo
427.999 10.96 li
@
452.719 7.6001 mo
452.719 10.96 li
@
465.199 7.6001 mo
465.199 10.96 li
@
477.439 7.6001 mo
477.439 10.96 li
@
489.679 7.6001 mo
489.679 10.96 li
@
70.1592 7.6001 mo
70.1592 295.84 li
@
502.159 7.6001 mo
502.159 295.84 li
@
70.0391 295.72 mo
502.279 295.72 li
@
70.0391 7.72021 mo
502.279 7.72021 li
@
0.24 lw
70.1592 71.4399 mo
70.1592 71.6802 li
0.921569 0.843137 0 0 cmyk
@
71.3594 72.6401 mo
71.3594 72.8799 li
@
72.5591 73.8398 mo
72.5591 74.0801 li
@
73.7593 74.7998 mo
73.7593 75.04 li
@
75.1992 76 mo
75.1992 76.2397 li
@
76.3994 77.2002 mo
76.3994 77.4399 li
@
77.5991 78.3999 mo
77.5991 78.6401 li
@
78.7993 79.6001 mo
78.7993 79.8398 li
@
79.999 80.5601 mo
79.999 80.7998 li
@
81.1992 81.7598 mo
81.1992 82 li
@
82.6392 82.96 mo
82.6392 83.2002 li
@
83.8394 84.1602 mo
83.8394 84.3999 li
@
85.0391 85.1201 mo
85.0391 85.3599 li
@
86.2393 86.3198 mo
86.2393 86.5601 li
@
87.439 87.52 mo
87.439 87.7598 li
@
88.6392 88.7202 mo
88.6392 88.96 li
@
90.0791 89.9199 mo
90.0791 90.1602 li
@
91.2793 90.8799 mo
91.2793 91.1201 li
@
92.479 92.0801 mo
92.479 92.3198 li
@
93.6792 93.2798 mo
93.6792 93.52 li
@
94.8789 94.48 mo
94.8789 94.7202 li
@
96.0791 95.6802 mo
96.0791 95.9199 li
@
97.519 96.6401 mo
97.519 96.8799 li
@
98.7192 98.0801 mo
98.7192 98.3198 li
@
99.9189 99.04 mo
99.9189 99.2798 li
@
101.119 100.24 mo
101.119 100.48 li
@
102.319 101.44 mo
102.319 101.68 li
@
103.519 102.64 mo
103.519 102.88 li
@
104.719 103.6 mo
104.719 103.84 li
@
105.919 104.8 mo
105.919 105.04 li
@
107.119 106 mo
107.119 106.24 li
@
108.559 107.2 mo
108.559 107.44 li
@
109.759 108.4 mo
109.759 108.64 li
@
110.959 109.36 mo
110.959 109.6 li
@
112.159 110.56 mo
112.159 110.8 li
@
113.359 111.76 mo
113.359 112 li
@
114.559 112.96 mo
114.559 113.2 li
@
115.759 114.16 mo
115.759 114.4 li
@
117.199 115.12 mo
117.199 115.36 li
@
118.399 116.32 mo
118.399 116.56 li
@
119.599 117.52 mo
119.599 117.76 li
@
120.799 118.72 mo
120.799 118.96 li
@
121.999 119.92 mo
121.999 120.16 li
@
123.199 120.88 mo
123.199 121.12 li
@
124.639 122.08 mo
124.639 122.32 li
@
125.839 123.28 mo
125.839 123.52 li
@
127.039 124.48 mo
127.039 124.72 li
@
128.239 125.44 mo
128.239 125.68 li
@
129.439 126.64 mo
129.439 126.88 li
@
130.639 127.84 mo
130.639 128.08 li
@
132.079 129.04 mo
132.079 129.28 li
@
133.279 130.24 mo
133.279 130.48 li
@
134.479 131.2 mo
134.479 131.44 li
@
135.679 132.64 mo
135.679 132.88 li
@
136.879 133.6 mo
136.879 133.84 li
@
138.079 134.8 mo
138.079 135.04 li
@
139.279 136 mo
139.279 136.24 li
@
140.719 137.2 mo
140.719 137.44 li
@
141.919 138.4 mo
141.919 138.64 li
@
143.119 139.36 mo
143.119 139.6 li
@
144.319 140.56 mo
144.319 140.8 li
@
145.519 141.76 mo
145.519 142 li
@
146.719 142.96 mo
146.719 143.2 li
@
147.919 143.92 mo
147.919 144.16 li
@
149.119 145.12 mo
149.119 145.36 li
@
150.319 146.32 mo
150.319 146.56 li
@
151.759 147.52 mo
151.759 147.76 li
@
152.959 148.72 mo
152.959 148.96 li
@
154.159 149.68 mo
154.159 149.92 li
@
155.359 150.88 mo
155.359 151.12 li
@
156.559 152.08 mo
156.559 152.32 li
@
157.759 153.28 mo
157.759 153.52 li
@
159.199 154.48 mo
159.199 154.72 li
@
160.399 155.44 mo
160.399 155.68 li
@
161.599 156.64 mo
161.599 156.88 li
@
162.799 157.84 mo
162.799 158.08 li
@
163.999 159.04 mo
163.999 159.28 li
@
165.199 160 mo
165.199 160.24 li
@
166.639 161.2 mo
166.639 161.44 li
@
167.839 162.4 mo
167.839 162.64 li
@
169.039 163.6 mo
169.039 163.84 li
@
170.239 164.8 mo
170.239 165.04 li
@
171.439 165.76 mo
171.439 166 li
@
172.639 167.2 mo
172.639 167.44 li
@
174.079 168.16 mo
174.079 168.4 li
@
175.279 169.36 mo
175.279 169.6 li
@
176.479 170.56 mo
176.479 170.8 li
@
177.679 171.76 mo
177.679 172 li
@
178.879 172.72 mo
178.879 172.96 li
@
180.079 173.92 mo
180.079 174.16 li
@
181.279 175.12 mo
181.279 175.36 li
@
182.479 176.08 mo
182.479 176.32 li
@
183.679 177.28 mo
183.679 177.52 li
@
185.119 178.48 mo
185.119 178.72 li
@
186.319 179.68 mo
186.319 179.92 li
@
187.519 180.64 mo
187.519 180.88 li
@
188.719 181.84 mo
188.719 182.08 li
@
189.919 183.04 mo
189.919 183.28 li
@
191.119 184.24 mo
191.119 184.48 li
@
192.319 185.2 mo
192.319 185.44 li
@
193.759 186.4 mo
193.759 186.64 li
@
194.959 187.6 mo
194.959 187.84 li
@
196.159 188.8 mo
196.159 189.04 li
@
197.359 189.76 mo
197.359 190 li
@
198.559 190.96 mo
198.559 191.2 li
@
199.759 192.16 mo
199.759 192.4 li
@
201.199 193.12 mo
201.199 193.36 li
@
202.399 194.32 mo
202.399 194.56 li
@
203.599 195.52 mo
203.599 195.76 li
@
204.799 196.48 mo
204.799 196.72 li
@
205.999 197.68 mo
205.999 197.92 li
@
207.199 198.64 mo
207.199 198.88 li
@
208.639 199.84 mo
208.639 200.08 li
@
209.839 201.04 mo
209.839 201.28 li
@
211.039 202 mo
211.039 202.24 li
@
212.239 203.2 mo
212.239 203.44 li
@
213.439 204.16 mo
213.439 204.4 li
@
214.639 205.36 mo
214.639 205.6 li
@
215.839 206.32 mo
215.839 206.56 li
@
217.039 207.52 mo
217.039 207.76 li
@
218.479 208.48 mo
218.479 208.72 li
@
219.679 209.44 mo
219.679 209.68 li
@
220.879 210.64 mo
220.879 210.88 li
@
222.079 211.6 mo
222.079 211.84 li
@
223.279 212.56 mo
223.279 212.8 li
@
224.479 213.52 mo
224.479 213.76 li
@
225.679 214.48 mo
225.679 214.72 li
@
226.879 215.44 mo
226.879 215.68 li
@
228.319 216.4 mo
228.319 216.64 li
@
229.519 217.36 mo
229.519 217.6 li
@
230.719 218.08 mo
230.719 218.32 li
@
231.919 219.04 mo
231.919 219.28 li
@
233.119 220 mo
233.119 220.24 li
@
234.319 220.96 mo
234.319 221.2 li
@
235.759 221.68 mo
235.759 221.92 li
@
236.959 222.4 mo
236.959 222.64 li
@
238.159 223.12 mo
238.159 223.36 li
@
239.359 224.08 mo
239.359 224.32 li
@
240.559 224.8 mo
240.559 225.04 li
@
241.759 225.52 mo
241.759 225.76 li
@
243.199 226 mo
243.199 226.24 li
@
244.399 226.72 mo
244.399 226.96 li
@
245.599 227.44 mo
245.599 227.68 li
@
246.799 227.92 mo
246.799 228.16 li
@
247.999 228.64 mo
247.999 228.88 li
@
249.199 229.12 mo
249.199 229.36 li
@
250.399 229.6 mo
250.399 229.84 li
@
251.839 230.08 mo
251.839 230.32 li
@
253.039 230.56 mo
253.039 230.8 li
@
254.239 231.04 mo
254.239 231.28 li
@
255.439 231.52 mo
255.439 231.76 li
@
256.639 231.76 mo
256.639 232 li
@
257.839 232.24 mo
257.839 232.48 li
@
259.039 232.48 mo
259.039 232.72 li
@
260.239 232.72 mo
260.239 232.96 li
@
261.439 233.2 mo
261.439 233.44 li
@
262.879 233.2 mo
262.879 233.44 li
@
264.079 233.44 mo
264.079 233.68 li
@
265.279 233.68 mo
265.279 233.92 li
@
266.479 233.92 mo
266.479 234.16 li
@
267.679 234.16 mo
267.679 234.4 li
@
268.879 234.4 mo
268.879 234.64 li
@
270.319 234.64 mo
270.319 234.88 li
@
271.519 234.64 mo
271.519 234.88 li
@
272.719 234.64 mo
272.719 234.88 li
@
273.919 234.88 mo
273.919 235.12 li
@
275.119 234.88 mo
275.119 235.12 li
@
276.319 234.88 mo
276.319 235.12 li
@
277.759 235.12 mo
277.759 235.36 li
@
278.959 235.12 mo
278.959 235.36 li
@
280.159 235.12 mo
280.159 235.36 li
@
281.359 235.12 mo
281.359 235.36 li
@
282.559 235.12 mo
282.559 235.36 li
@
283.759 235.12 mo
283.759 235.36 li
@
285.199 235.12 mo
285.199 235.36 li
@
286.399 235.12 mo
286.399 235.36 li
@
287.599 235.12 mo
287.599 235.36 li
@
288.799 235.12 mo
288.799 235.36 li
@
289.999 235.12 mo
289.999 235.36 li
@
291.199 235.12 mo
291.199 235.36 li
@
292.399 235.12 mo
292.399 235.36 li
@
293.599 234.88 mo
293.599 235.12 li
@
294.799 234.88 mo
294.799 235.12 li
@
296.239 234.88 mo
296.239 235.12 li
@
297.439 234.64 mo
297.439 234.88 li
@
298.639 234.64 mo
298.639 234.88 li
@
299.839 234.64 mo
299.839 234.88 li
@
301.039 234.64 mo
301.039 234.88 li
@
302.239 234.4 mo
302.239 234.64 li
@
303.439 234.4 mo
303.439 234.64 li
@
304.639 234.16 mo
304.639 234.4 li
@
306.079 234.16 mo
306.079 234.4 li
@
307.279 233.92 mo
307.279 234.16 li
@
308.479 233.68 mo
308.479 233.92 li
@
309.679 233.68 mo
309.679 233.92 li
@
310.879 233.44 mo
310.879 233.68 li
@
312.319 233.2 mo
312.319 233.44 li
@
313.519 233.2 mo
313.519 233.44 li
@
314.719 232.96 mo
314.719 233.2 li
@
315.919 232.72 mo
315.919 232.96 li
@
317.119 232.48 mo
317.119 232.72 li
@
318.319 232.24 mo
318.319 232.48 li
@
319.759 232 mo
319.759 232.24 li
@
320.959 231.76 mo
320.959 232 li
@
322.159 231.52 mo
322.159 231.76 li
@
323.359 231.28 mo
323.359 231.52 li
@
324.56 230.8 mo
324.56 231.04 li
@
325.759 230.56 mo
325.759 230.8 li
@
326.959 230.32 mo
326.959 230.56 li
@
328.399 230.08 mo
328.399 230.32 li
@
329.6 229.6 mo
329.6 229.84 li
@
330.799 229.12 mo
330.799 229.36 li
@
331.999 228.64 mo
331.999 228.88 li
@
333.199 228.4 mo
333.199 228.64 li
@
334.399 227.92 mo
334.399 228.16 li
@
335.6 227.44 mo
335.6 227.68 li
@
336.799 226.96 mo
336.799 227.2 li
@
337.999 226.48 mo
337.999 226.72 li
@
339.439 225.76 mo
339.439 226 li
@
340.639 225.28 mo
340.639 225.52 li
@
341.839 224.56 mo
341.839 224.8 li
@
343.039 224.08 mo
343.039 224.32 li
@
344.239 223.36 mo
344.239 223.6 li
@
345.439 222.64 mo
345.439 222.88 li
@
346.639 221.92 mo
346.639 222.16 li
@
348.079 221.2 mo
348.079 221.44 li
@
349.279 220.24 mo
349.279 220.48 li
@
350.479 219.52 mo
350.479 219.76 li
@
351.679 218.56 mo
351.679 218.8 li
@
352.879 217.6 mo
352.879 217.84 li
@
354.319 216.64 mo
354.319 216.88 li
@
355.52 215.44 mo
355.52 215.68 li
@
356.719 214.24 mo
356.719 214.48 li
@
357.919 213.04 mo
357.919 213.28 li
@
359.119 212.08 mo
359.119 212.32 li
@
360.319 210.64 mo
360.319 210.88 li
@
361.759 209.44 mo
361.759 209.68 li
@
362.959 208 mo
362.959 208.24 li
@
364.159 206.8 mo
364.159 207.04 li
@
365.359 205.6 mo
365.359 205.84 li
@
366.56 204.4 mo
366.56 204.64 li
@
367.759 203.2 mo
367.759 203.44 li
@
368.959 202.48 mo
368.959 202.72 li
@
370.159 201.76 mo
370.159 202 li
@
371.359 201.04 mo
371.359 201.28 li
@
372.799 200.8 mo
372.799 201.04 li
@
373.999 200.8 mo
373.999 201.04 li
@
375.199 201.04 mo
375.199 201.28 li
@
376.399 201.52 mo
376.399 201.76 li
@
377.6 202.24 mo
377.6 202.48 li
@
378.799 202.96 mo
378.799 203.2 li
@
379.999 203.92 mo
379.999 204.16 li
@
381.199 204.64 mo
381.199 204.88 li
@
382.639 205.6 mo
382.639 205.84 li
@
383.839 206.32 mo
383.839 206.56 li
@
385.039 207.28 mo
385.039 207.52 li
@
386.239 208 mo
386.239 208.24 li
@
387.439 208.72 mo
387.439 208.96 li
@
388.639 209.2 mo
388.639 209.44 li
@
390.079 209.44 mo
390.079 209.68 li
@
391.279 209.92 mo
391.279 210.16 li
@
392.479 209.92 mo
392.479 210.16 li
@
393.679 210.16 mo
393.679 210.4 li
@
394.879 209.92 mo
394.879 210.16 li
@
396.319 209.68 mo
396.319 209.92 li
@
397.52 209.2 mo
397.52 209.44 li
@
398.719 208.72 mo
398.719 208.96 li
@
399.919 208 mo
399.919 208.24 li
@
401.119 207.04 mo
401.119 207.28 li
@
402.319 206.08 mo
402.319 206.32 li
@
403.52 204.64 mo
403.52 204.88 li
@
404.719 203.2 mo
404.719 203.44 li
@
406.159 201.76 mo
406.159 202 li
@
407.359 200.08 mo
407.359 200.32 li
@
408.56 198.4 mo
408.56 198.64 li
@
409.759 196.96 mo
409.759 197.2 li
@
410.959 195.52 mo
410.959 195.76 li
@
412.159 194.32 mo
412.159 194.56 li
@
413.359 193.84 mo
413.359 194.08 li
@
414.56 193.84 mo
414.56 194.08 li
@
415.759 194.08 mo
415.759 194.32 li
@
417.199 194.8 mo
417.199 195.04 li
@
418.399 195.76 mo
418.399 196 li
@
419.6 196.24 mo
419.6 196.48 li
@
420.799 196.96 mo
420.799 197.2 li
@
421.999 197.2 mo
421.999 197.44 li
@
423.199 197.44 mo
423.199 197.68 li
@
424.639 197.2 mo
424.639 197.44 li
@
425.839 196.48 mo
425.839 196.72 li
@
427.039 195.28 mo
427.039 195.52 li
@
428.239 193.84 mo
428.239 194.08 li
@
429.439 191.68 mo
429.439 191.92 li
@
430.639 189.52 mo
430.639 189.76 li
@
432.079 187.12 mo
432.079 187.36 li
@
433.279 184.96 mo
433.279 185.2 li
@
434.479 183.52 mo
434.479 183.76 li
@
435.679 183.28 mo
435.679 183.52 li
@
436.879 184 mo
436.879 184.24 li
@
438.079 185.2 mo
438.079 185.44 li
@
439.279 186.64 mo
439.279 186.88 li
@
440.719 187.84 mo
440.719 188.08 li
@
441.919 188.32 mo
441.919 188.56 li
@
443.119 188.08 mo
443.119 188.32 li
@
444.319 187.12 mo
444.319 187.36 li
@
445.52 185.44 mo
445.52 185.68 li
@
446.719 183.04 mo
446.719 183.28 li
@
447.919 180.4 mo
447.919 180.64 li
@
449.119 177.76 mo
449.119 178 li
@
450.319 176.8 mo
450.319 177.04 li
@
451.759 177.52 mo
451.759 177.76 li
@
452.959 179.2 mo
452.959 179.44 li
@
454.159 181.12 mo
454.159 181.36 li
@
455.359 182.08 mo
455.359 182.32 li
@
456.56 182.08 mo
456.56 182.32 li
@
457.759 180.88 mo
457.759 181.12 li
@
458.959 178.48 mo
458.959 178.72 li
@
460.159 175.12 mo
460.159 175.36 li
@
461.359 172 mo
461.359 172.24 li
@
462.56 171.04 mo
462.56 171.28 li
@
463.759 172.72 mo
463.759 172.96 li
@
465.199 175.36 mo
465.199 175.6 li
@
466.399 176.8 mo
466.399 177.04 li
@
467.6 176.8 mo
467.6 177.04 li
@
468.799 174.88 mo
468.799 175.12 li
@
469.999 171.28 mo
469.999 171.52 li
@
471.199 167.68 mo
471.199 167.92 li
@
472.399 166.96 mo
472.399 167.2 li
@
473.6 169.6 mo
473.6 169.84 li
@
474.799 172.24 mo
474.799 172.48 li
@
475.759 172.96 mo
475.759 173.2 li
@
476.239 172.96 mo
476.239 173.2 li
@
476.959 172 mo
476.959 172.24 li
@
477.679 170.08 mo
477.679 170.32 li
@
478.399 167.68 mo
478.399 167.92 li
@
479.119 165.04 mo
479.119 165.28 li
@
479.839 163.12 mo
479.839 163.36 li
@
480.56 162.88 mo
480.56 163.12 li
@
481.279 164.56 mo
481.279 164.8 li
@
481.999 166.72 mo
481.999 166.96 li
@
482.719 168.4 mo
482.719 168.64 li
@
483.439 169.36 mo
483.439 169.6 li
@
484.159 168.88 mo
484.159 169.12 li
@
484.879 167.44 mo
484.879 167.68 li
@
485.6 164.8 mo
485.6 165.04 li
@
486.319 161.92 mo
486.319 162.16 li
@
487.039 159.76 mo
487.039 160 li
@
487.759 160 mo
487.759 160.24 li
@
488.479 162.16 mo
488.479 162.4 li
@
489.199 164.56 mo
489.199 164.8 li
@
489.919 166 mo
489.919 166.24 li
@
490.639 166.24 mo
490.639 166.48 li
@
491.359 164.8 mo
491.359 165.04 li
@
492.319 161.92 mo
492.319 162.16 li
@
492.799 158.56 mo
492.799 158.8 li
@
493.52 156.64 mo
493.52 156.88 li
@
494.239 157.6 mo
494.239 157.84 li
@
494.959 160.24 mo
494.959 160.48 li
@
495.679 162.64 mo
495.679 162.88 li
@
496.399 163.36 mo
496.399 163.6 li
@
496.879 162.64 mo
496.879 162.88 li
@
497.6 161.2 mo
497.6 161.44 li
@
498.079 159.04 mo
498.079 159.28 li
@
498.56 156.4 mo
498.56 156.64 li
@
499.039 154.48 mo
499.039 154.72 li
@
499.52 154.24 mo
499.52 154.48 li
@
499.999 155.68 mo
499.999 155.92 li
@
500.479 158.08 mo
500.479 158.32 li
@
501.199 159.76 mo
501.199 160 li
@
501.439 160.96 mo
501.439 161.2 li
@
502.159 160.96 mo
502.159 161.2 li
@
70.1592 11.4399 mo
70.1592 11.6802 li
0.0705882 1 1 0.0117647 cmyk
@
71.3594 12.8799 mo
71.3594 13.1201 li
@
72.5591 14.0801 mo
72.5591 14.3198 li
@
73.7593 15.52 mo
73.7593 15.7598 li
@
74.959 16.7202 mo
74.959 16.96 li
@
76.1592 17.9199 mo
76.1592 18.1602 li
@
77.3594 19.3599 mo
77.3594 19.6001 li
@
78.7993 20.5601 mo
78.7993 20.7998 li
@
79.999 21.7598 mo
79.999 22 li
@
81.1992 23.1997 mo
81.1992 23.4399 li
@
82.3994 24.3999 mo
82.3994 24.6401 li
@
83.5991 25.8398 mo
83.5991 26.0801 li
@
84.7993 27.04 mo
84.7993 27.2798 li
@
85.999 28.2397 mo
85.999 28.48 li
@
87.1992 29.4399 mo
87.1992 29.6802 li
@
88.6392 30.6401 mo
88.6392 30.8799 li
@
89.8394 32.0801 mo
89.8394 32.3198 li
@
91.0391 33.2798 mo
91.0391 33.52 li
@
92.2393 34.7202 mo
92.2393 34.96 li
@
93.439 35.9199 mo
93.439 36.1602 li
@
94.6392 37.1201 mo
94.6392 37.3599 li
@
96.0791 38.3198 mo
96.0791 38.5601 li
@
97.2793 39.7598 mo
97.2793 40 li
@
98.479 40.96 mo
98.479 41.1997 li
@
99.6792 42.1602 mo
99.6792 42.3999 li
@
100.879 43.3599 mo
100.879 43.6001 li
@
102.319 44.5601 mo
102.319 44.7998 li
@
103.519 46 mo
103.519 46.2397 li
@
104.719 47.2002 mo
104.719 47.4399 li
@
105.919 48.3999 mo
105.919 48.6401 li
@
107.119 49.8398 mo
107.119 50.0801 li
@
108.319 51.04 mo
108.319 51.2798 li
@
109.519 52.2397 mo
109.519 52.48 li
@
110.719 53.4399 mo
110.719 53.6802 li
@
112.159 54.6401 mo
112.159 54.8799 li
@
113.359 56.0801 mo
113.359 56.3198 li
@
114.559 57.2798 mo
114.559 57.52 li
@
115.759 58 mo
115.759 58.2397 li
@
116.959 58.96 mo
116.959 59.2002 li
@
118.159 59.9199 mo
118.159 60.1602 li
@
119.359 61.1201 mo
119.359 61.3599 li
@
120.559 62.5601 mo
120.559 62.7998 li
@
121.759 64 mo
121.759 64.2397 li
@
123.199 65.4399 mo
123.199 65.6802 li
@
124.399 67.1201 mo
124.399 67.3599 li
@
125.599 68.3198 mo
125.599 68.5601 li
@
126.799 69.52 mo
126.799 69.7598 li
@
127.999 70.7202 mo
127.999 70.96 li
@
129.199 71.9199 mo
129.199 72.1602 li
@
130.639 72.6401 mo
130.639 72.8799 li
@
131.839 73.8398 mo
131.839 74.0801 li
@
133.039 74.7998 mo
133.039 75.04 li
@
134.239 75.7598 mo
134.239 76 li
@
135.439 76.96 mo
135.439 77.2002 li
@
136.639 78.1602 mo
136.639 78.3999 li
@
138.079 79.3599 mo
138.079 79.6001 li
@
139.279 80.5601 mo
139.279 80.7998 li
@
140.479 81.7598 mo
140.479 82 li
@
141.679 82.96 mo
141.679 83.2002 li
@
142.879 84.3999 mo
142.879 84.6401 li
@
144.079 85.6001 mo
144.079 85.8398 li
@
145.519 86.5601 mo
145.519 86.7998 li
@
146.719 87.7598 mo
146.719 88 li
@
147.919 89.2002 mo
147.919 89.4399 li
@
149.119 90.3999 mo
149.119 90.6401 li
@
150.319 91.6001 mo
150.319 91.8398 li
@
151.519 92.7998 mo
151.519 93.04 li
@
152.719 93.7598 mo
152.719 94 li
@
153.919 94.96 mo
153.919 95.2002 li
@
155.119 96.1602 mo
155.119 96.3999 li
@
156.559 97.1201 mo
156.559 97.3599 li
@
157.759 98.3198 mo
157.759 98.5601 li
@
158.959 99.52 mo
158.959 99.7598 li
@
160.159 100.48 mo
160.159 100.72 li
@
161.359 101.68 mo
161.359 101.92 li
@
162.559 102.64 mo
162.559 102.88 li
@
163.759 103.84 mo
163.759 104.08 li
@
165.199 105.04 mo
165.199 105.28 li
@
166.399 106.24 mo
166.399 106.48 li
@
167.599 107.2 mo
167.599 107.44 li
@
168.799 108.4 mo
168.799 108.64 li
@
169.999 109.36 mo
169.999 109.6 li
@
171.199 110.32 mo
171.199 110.56 li
@
172.639 111.52 mo
172.639 111.76 li
@
173.839 112.48 mo
173.839 112.72 li
@
175.039 113.44 mo
175.039 113.68 li
@
176.239 114.64 mo
176.239 114.88 li
@
177.439 115.6 mo
177.439 115.84 li
@
178.639 116.8 mo
178.639 117.04 li
@
180.079 118 mo
180.079 118.24 li
@
181.279 119.2 mo
181.279 119.44 li
@
182.479 120.64 mo
182.479 120.88 li
@
183.679 121.84 mo
183.679 122.08 li
@
184.879 123.04 mo
184.879 123.28 li
@
186.079 124 mo
186.079 124.24 li
@
187.279 125.2 mo
187.279 125.44 li
@
188.479 126.4 mo
188.479 126.64 li
@
189.919 127.36 mo
189.919 127.6 li
@
191.119 128.32 mo
191.119 128.56 li
@
192.319 129.52 mo
192.319 129.76 li
@
193.519 130.72 mo
193.519 130.96 li
@
194.719 131.68 mo
194.719 131.92 li
@
195.919 132.64 mo
195.919 132.88 li
@
197.119 133.84 mo
197.119 134.08 li
@
198.319 134.8 mo
198.319 135.04 li
@
199.759 136 mo
199.759 136.24 li
@
200.959 136.96 mo
200.959 137.2 li
@
202.159 138.16 mo
202.159 138.4 li
@
203.359 139.12 mo
203.359 139.36 li
@
204.559 140.32 mo
204.559 140.56 li
@
205.759 141.52 mo
205.759 141.76 li
@
207.199 142.48 mo
207.199 142.72 li
@
208.399 143.44 mo
208.399 143.68 li
@
209.599 144.64 mo
209.599 144.88 li
@
210.799 145.84 mo
210.799 146.08 li
@
211.999 146.8 mo
211.999 147.04 li
@
213.199 148 mo
213.199 148.24 li
@
214.639 149.2 mo
214.639 149.44 li
@
215.839 150.4 mo
215.839 150.64 li
@
217.039 151.36 mo
217.039 151.6 li
@
218.239 152.56 mo
218.239 152.8 li
@
219.439 153.76 mo
219.439 154 li
@
220.639 154.96 mo
220.639 155.2 li
@
222.079 155.92 mo
222.079 156.16 li
@
223.279 157.12 mo
223.279 157.36 li
@
224.479 158.32 mo
224.479 158.56 li
@
225.679 159.52 mo
225.679 159.76 li
@
226.879 160.48 mo
226.879 160.72 li
@
228.079 161.68 mo
228.079 161.92 li
@
229.279 162.64 mo
229.279 162.88 li
@
230.479 163.84 mo
230.479 164.08 li
@
231.679 165.04 mo
231.679 165.28 li
@
233.119 166 mo
233.119 166.24 li
@
234.319 167.2 mo
234.319 167.44 li
@
235.519 168.4 mo
235.519 168.64 li
@
236.719 169.6 mo
236.719 169.84 li
@
237.919 171.04 mo
237.919 171.28 li
@
239.119 172.24 mo
239.119 172.48 li
@
240.319 173.44 mo
240.319 173.68 li
@
241.759 174.64 mo
241.759 174.88 li
@
242.959 176.08 mo
242.959 176.32 li
@
244.159 177.04 mo
244.159 177.28 li
@
245.359 178 mo
245.359 178.24 li
@
246.559 179.2 mo
246.559 179.44 li
@
247.759 180.16 mo
247.759 180.4 li
@
249.199 181.12 mo
249.199 181.36 li
@
250.399 182.08 mo
250.399 182.32 li
@
251.599 183.28 mo
251.599 183.52 li
@
252.799 184.48 mo
252.799 184.72 li
@
253.999 185.68 mo
253.999 185.92 li
@
255.199 186.88 mo
255.199 187.12 li
@
256.639 188.08 mo
256.639 188.32 li
@
257.839 189.28 mo
257.839 189.52 li
@
259.039 190.48 mo
259.039 190.72 li
@
260.239 191.44 mo
260.239 191.68 li
@
261.439 192.64 mo
261.439 192.88 li
@
262.639 193.6 mo
262.639 193.84 li
@
263.839 194.56 mo
263.839 194.8 li
@
265.039 195.76 mo
265.039 196 li
@
266.479 196.72 mo
266.479 196.96 li
@
267.679 197.68 mo
267.679 197.92 li
@
268.879 198.64 mo
268.879 198.88 li
@
270.079 199.36 mo
270.079 199.6 li
@
271.279 200.32 mo
271.279 200.56 li
@
272.479 201.28 mo
272.479 201.52 li
@
273.679 202 mo
273.679 202.24 li
@
274.879 202.96 mo
274.879 203.2 li
@
276.319 203.68 mo
276.319 203.92 li
@
277.519 204.4 mo
277.519 204.64 li
@
278.719 205.12 mo
278.719 205.36 li
@
279.919 205.6 mo
279.919 205.84 li
@
281.119 206.32 mo
281.119 206.56 li
@
282.319 207.28 mo
282.319 207.52 li
@
283.759 207.76 mo
283.759 208 li
@
284.959 208.24 mo
284.959 208.48 li
@
286.159 208.72 mo
286.159 208.96 li
@
287.359 209.2 mo
287.359 209.44 li
@
288.559 209.44 mo
288.559 209.68 li
@
289.759 209.68 mo
289.759 209.92 li
@
291.199 210.16 mo
291.199 210.4 li
@
292.399 210.4 mo
292.399 210.64 li
@
293.599 210.64 mo
293.599 210.88 li
@
294.799 210.88 mo
294.799 211.12 li
@
295.999 211.12 mo
295.999 211.36 li
@
297.199 211.36 mo
297.199 211.6 li
@
298.399 211.6 mo
298.399 211.84 li
@
299.839 211.84 mo
299.839 212.08 li
@
301.039 212.08 mo
301.039 212.32 li
@
302.239 212.08 mo
302.239 212.32 li
@
303.439 212.32 mo
303.439 212.56 li
@
304.639 212.56 mo
304.639 212.8 li
@
305.839 212.56 mo
305.839 212.8 li
@
307.039 212.8 mo
307.039 213.04 li
@
308.239 212.8 mo
308.239 213.04 li
@
309.439 213.04 mo
309.439 213.28 li
@
310.879 213.04 mo
310.879 213.28 li
@
312.079 213.04 mo
312.079 213.28 li
@
313.279 213.28 mo
313.279 213.52 li
@
314.479 213.28 mo
314.479 213.52 li
@
315.679 213.28 mo
315.679 213.52 li
@
316.879 213.52 mo
316.879 213.76 li
@
318.319 213.52 mo
318.319 213.76 li
@
319.52 213.52 mo
319.52 213.76 li
@
320.719 213.52 mo
320.719 213.76 li
@
321.919 213.52 mo
321.919 213.76 li
@
323.119 213.76 mo
323.119 214 li
@
324.319 213.76 mo
324.319 214 li
@
325.759 213.76 mo
325.759 214 li
@
326.959 213.76 mo
326.959 214 li
@
328.159 213.76 mo
328.159 214 li
@
329.359 213.76 mo
329.359 214 li
@
330.56 213.76 mo
330.56 214 li
@
331.759 213.76 mo
331.759 214 li
@
333.199 213.76 mo
333.199 214 li
@
334.399 213.76 mo
334.399 214 li
@
335.6 213.76 mo
335.6 214 li
@
336.799 213.76 mo
336.799 214 li
@
337.999 213.76 mo
337.999 214 li
@
339.199 213.76 mo
339.199 214 li
@
340.399 213.76 mo
340.399 214 li
@
341.6 213.76 mo
341.6 214 li
@
342.799 213.76 mo
342.799 214 li
@
344.239 213.76 mo
344.239 214 li
@
345.439 213.76 mo
345.439 214 li
@
346.639 213.76 mo
346.639 214 li
@
347.839 213.76 mo
347.839 214 li
@
349.039 213.76 mo
349.039 214 li
@
350.239 213.76 mo
350.239 214 li
@
351.439 213.52 mo
351.439 213.76 li
@
352.639 213.52 mo
352.639 213.76 li
@
354.079 213.52 mo
354.079 213.76 li
@
355.279 213.52 mo
355.279 213.76 li
@
356.479 213.52 mo
356.479 213.76 li
@
357.679 213.52 mo
357.679 213.76 li
@
358.879 213.52 mo
358.879 213.76 li
@
360.319 213.28 mo
360.319 213.52 li
@
361.52 213.28 mo
361.52 213.52 li
@
362.719 213.28 mo
362.719 213.52 li
@
363.919 213.28 mo
363.919 213.52 li
@
365.119 213.28 mo
365.119 213.52 li
@
366.319 213.04 mo
366.319 213.28 li
@
367.759 213.04 mo
367.759 213.28 li
@
368.959 213.04 mo
368.959 213.28 li
@
370.159 213.04 mo
370.159 213.28 li
@
371.359 212.8 mo
371.359 213.04 li
@
372.56 212.8 mo
372.56 213.04 li
@
373.759 212.8 mo
373.759 213.04 li
@
374.959 212.56 mo
374.959 212.8 li
@
376.399 212.56 mo
376.399 212.8 li
@
377.6 212.56 mo
377.6 212.8 li
@
378.799 212.32 mo
378.799 212.56 li
@
379.999 212.32 mo
379.999 212.56 li
@
381.199 212.32 mo
381.199 212.56 li
@
382.399 212.08 mo
382.399 212.32 li
@
383.6 212.08 mo
383.6 212.32 li
@
384.799 212.08 mo
384.799 212.32 li
@
385.999 211.84 mo
385.999 212.08 li
@
387.439 211.84 mo
387.439 212.08 li
@
388.639 211.6 mo
388.639 211.84 li
@
389.839 211.6 mo
389.839 211.84 li
@
391.039 211.36 mo
391.039 211.6 li
@
392.239 211.12 mo
392.239 211.36 li
@
393.439 211.12 mo
393.439 211.36 li
@
394.639 210.88 mo
394.639 211.12 li
@
396.079 210.64 mo
396.079 210.88 li
@
397.279 210.64 mo
397.279 210.88 li
@
398.479 210.4 mo
398.479 210.64 li
@
399.679 210.16 mo
399.679 210.4 li
@
400.879 209.92 mo
400.879 210.16 li
@
402.319 209.68 mo
402.319 209.92 li
@
403.52 209.44 mo
403.52 209.68 li
@
404.719 209.2 mo
404.719 209.44 li
@
405.919 209.2 mo
405.919 209.44 li
@
407.119 208.96 mo
407.119 209.2 li
@
408.319 208.48 mo
408.319 208.72 li
@
409.759 208.24 mo
409.759 208.48 li
@
410.959 208 mo
410.959 208.24 li
@
412.159 207.76 mo
412.159 208 li
@
413.359 207.28 mo
413.359 207.52 li
@
414.56 207.04 mo
414.56 207.28 li
@
415.759 206.56 mo
415.759 206.8 li
@
416.959 206.08 mo
416.959 206.32 li
@
418.159 205.84 mo
418.159 206.08 li
@
419.359 205.36 mo
419.359 205.6 li
@
420.799 204.88 mo
420.799 205.12 li
@
421.999 204.64 mo
421.999 204.88 li
@
423.199 203.92 mo
423.199 204.16 li
@
424.399 203.44 mo
424.399 203.68 li
@
425.6 202.96 mo
425.6 203.2 li
@
426.799 202.48 mo
426.799 202.72 li
@
427.999 201.76 mo
427.999 202 li
@
429.199 201.04 mo
429.199 201.28 li
@
430.639 200.32 mo
430.639 200.56 li
@
431.839 199.84 mo
431.839 200.08 li
@
433.039 198.88 mo
433.039 199.12 li
@
434.239 198.16 mo
434.239 198.4 li
@
435.439 197.2 mo
435.439 197.44 li
@
436.639 196.48 mo
436.639 196.72 li
@
438.079 195.52 mo
438.079 195.76 li
@
439.279 194.56 mo
439.279 194.8 li
@
440.479 193.6 mo
440.479 193.84 li
@
441.679 192.64 mo
441.679 192.88 li
@
442.879 191.44 mo
442.879 191.68 li
@
444.319 190.24 mo
444.319 190.48 li
@
445.52 189.04 mo
445.52 189.28 li
@
446.719 187.84 mo
446.719 188.08 li
@
447.919 186.64 mo
447.919 186.88 li
@
449.119 185.2 mo
449.119 185.44 li
@
450.319 183.76 mo
450.319 184 li
@
451.52 182.56 mo
451.52 182.8 li
@
452.719 181.36 mo
452.719 181.6 li
@
454.159 180.4 mo
454.159 180.64 li
@
455.359 179.44 mo
455.359 179.68 li
@
456.56 178.72 mo
456.56 178.96 li
@
457.759 178.24 mo
457.759 178.48 li
@
458.959 178 mo
458.959 178.24 li
@
460.159 178 mo
460.159 178.24 li
@
461.359 178.24 mo
461.359 178.48 li
@
462.56 178.72 mo
462.56 178.96 li
@
463.759 179.2 mo
463.759 179.44 li
@
465.199 180.16 mo
465.199 180.4 li
@
466.399 180.88 mo
466.399 181.12 li
@
467.6 181.84 mo
467.6 182.08 li
@
468.799 182.56 mo
468.799 182.8 li
@
469.999 183.52 mo
469.999 183.76 li
@
471.199 184.24 mo
471.199 184.48 li
@
472.639 185.2 mo
472.639 185.44 li
@
473.839 185.68 mo
473.839 185.92 li
@
475.039 186.16 mo
475.039 186.4 li
@
476.239 186.64 mo
476.239 186.88 li
@
477.439 186.88 mo
477.439 187.12 li
@
478.639 187.12 mo
478.639 187.36 li
@
480.079 187.12 mo
480.079 187.36 li
@
481.279 186.88 mo
481.279 187.12 li
@
482.479 186.64 mo
482.479 186.88 li
@
483.679 186.4 mo
483.679 186.64 li
@
484.879 185.68 mo
484.879 185.92 li
@
486.079 184.96 mo
486.079 185.2 li
@
487.52 184 mo
487.52 184.24 li
@
488.719 183.04 mo
488.719 183.28 li
@
489.919 181.84 mo
489.919 182.08 li
@
491.119 180.4 mo
491.119 180.64 li
@
492.319 178.96 mo
492.319 179.2 li
@
493.52 177.28 mo
493.52 177.52 li
@
494.719 175.6 mo
494.719 175.84 li
@
495.919 173.92 mo
495.919 174.16 li
@
497.119 172.48 mo
497.119 172.72 li
@
498.56 171.52 mo
498.56 171.76 li
@
499.759 171.04 mo
499.759 171.28 li
@
500.959 170.8 mo
500.959 171.04 li
@
502.159 171.28 mo
502.159 171.52 li
@
70.1592 93.2798 mo
70.1592 93.52 li
0.882353 0.356863 1 0.317647 cmyk
@
71.3594 93.52 mo
71.3594 93.7598 li
@
72.5591 93.7598 mo
72.5591 94 li
@
73.7593 94.2397 mo
73.7593 94.48 li
@
75.1992 94.7202 mo
75.1992 94.96 li
@
76.3994 95.2002 mo
76.3994 95.4399 li
@
77.5991 95.6802 mo
77.5991 95.9199 li
@
78.7993 96.3999 mo
78.7993 96.6401 li
@
79.999 96.6401 mo
79.999 96.8799 li
@
81.1992 97.1201 mo
81.1992 97.3599 li
@
82.6392 97.3599 mo
82.6392 97.6001 li
@
83.8394 97.8398 mo
83.8394 98.0801 li
@
85.0391 98.0801 mo
85.0391 98.3198 li
@
86.2393 98.5601 mo
86.2393 98.7998 li
@
87.439 98.7998 mo
87.439 99.04 li
@
88.6392 99.2798 mo
88.6392 99.52 li
@
89.8394 99.52 mo
89.8394 99.7598 li
@
91.0391 99.7598 mo
91.0391 100 li
@
92.2393 100.24 mo
92.2393 100.48 li
@
93.6792 100.48 mo
93.6792 100.72 li
@
94.8789 100.72 mo
94.8789 100.96 li
@
96.0791 101.2 mo
96.0791 101.44 li
@
97.2793 101.2 mo
97.2793 101.44 li
@
98.479 101.44 mo
98.479 101.68 li
@
99.6792 101.92 mo
99.6792 102.16 li
@
100.879 102.16 mo
100.879 102.4 li
@
102.319 102.4 mo
102.319 102.64 li
@
103.519 102.64 mo
103.519 102.88 li
@
104.719 102.64 mo
104.719 102.88 li
@
105.919 102.88 mo
105.919 103.12 li
@
107.119 103.12 mo
107.119 103.36 li
@
108.319 103.6 mo
108.319 103.84 li
@
109.759 103.84 mo
109.759 104.08 li
@
110.959 104.08 mo
110.959 104.32 li
@
112.159 104.32 mo
112.159 104.56 li
@
113.359 104.56 mo
113.359 104.8 li
@
114.559 105.04 mo
114.559 105.28 li
@
115.759 105.52 mo
115.759 105.76 li
@
117.199 105.76 mo
117.199 106 li
@
118.399 106.24 mo
118.399 106.48 li
@
119.599 106.72 mo
119.599 106.96 li
@
120.799 107.2 mo
120.799 107.44 li
@
121.999 107.68 mo
121.999 107.92 li
@
123.199 108.16 mo
123.199 108.4 li
@
124.399 108.64 mo
124.399 108.88 li
@
125.599 109.36 mo
125.599 109.6 li
@
126.799 109.84 mo
126.799 110.08 li
@
128.239 110.56 mo
128.239 110.8 li
@
129.439 111.28 mo
129.439 111.52 li
@
130.639 111.76 mo
130.639 112 li
@
131.839 112.24 mo
131.839 112.48 li
@
133.039 112.96 mo
133.039 113.2 li
@
134.239 113.44 mo
134.239 113.68 li
@
135.439 114.16 mo
135.439 114.4 li
@
136.639 114.88 mo
136.639 115.12 li
@
138.079 115.84 mo
138.079 116.08 li
@
139.279 116.32 mo
139.279 116.56 li
@
140.479 117.28 mo
140.479 117.52 li
@
141.679 117.76 mo
141.679 118 li
@
142.879 118.48 mo
142.879 118.72 li
@
144.319 119.2 mo
144.319 119.44 li
@
145.519 119.68 mo
145.519 119.92 li
@
146.719 120.16 mo
146.719 120.4 li
@
147.919 120.64 mo
147.919 120.88 li
@
149.119 121.36 mo
149.119 121.6 li
@
150.319 121.84 mo
150.319 122.08 li
@
151.759 122.32 mo
151.759 122.56 li
@
152.959 123.04 mo
152.959 123.28 li
@
154.159 123.52 mo
154.159 123.76 li
@
155.359 124 mo
155.359 124.24 li
@
156.559 124.72 mo
156.559 124.96 li
@
157.759 125.2 mo
157.759 125.44 li
@
158.959 125.44 mo
158.959 125.68 li
@
160.159 126.16 mo
160.159 126.4 li
@
161.599 126.64 mo
161.599 126.88 li
@
162.799 127.12 mo
162.799 127.36 li
@
163.999 127.6 mo
163.999 127.84 li
@
165.199 128.08 mo
165.199 128.32 li
@
166.399 128.8 mo
166.399 129.04 li
@
167.599 129.28 mo
167.599 129.52 li
@
168.799 129.76 mo
168.799 130 li
@
169.999 130.24 mo
169.999 130.48 li
@
171.199 130.96 mo
171.199 131.2 li
@
172.639 131.44 mo
172.639 131.68 li
@
173.839 132.16 mo
173.839 132.4 li
@
175.039 132.64 mo
175.039 132.88 li
@
176.239 133.36 mo
176.239 133.6 li
@
177.439 134.08 mo
177.439 134.32 li
@
178.639 134.56 mo
178.639 134.8 li
@
180.079 135.28 mo
180.079 135.52 li
@
181.279 135.76 mo
181.279 136 li
@
182.479 136.48 mo
182.479 136.72 li
@
183.679 137.2 mo
183.679 137.44 li
@
184.879 137.68 mo
184.879 137.92 li
@
186.319 138.4 mo
186.319 138.64 li
@
187.519 138.88 mo
187.519 139.12 li
@
188.719 139.6 mo
188.719 139.84 li
@
189.919 140.08 mo
189.919 140.32 li
@
191.119 140.8 mo
191.119 141.04 li
@
192.319 141.28 mo
192.319 141.52 li
@
193.519 142 mo
193.519 142.24 li
@
194.719 142.48 mo
194.719 142.72 li
@
196.159 142.96 mo
196.159 143.2 li
@
197.359 143.44 mo
197.359 143.68 li
@
198.559 144.16 mo
198.559 144.4 li
@
199.759 144.64 mo
199.759 144.88 li
@
200.959 145.12 mo
200.959 145.36 li
@
202.159 145.6 mo
202.159 145.84 li
@
203.359 146.08 mo
203.359 146.32 li
@
204.559 146.56 mo
204.559 146.8 li
@
205.759 147.04 mo
205.759 147.28 li
@
207.199 147.52 mo
207.199 147.76 li
@
208.399 148 mo
208.399 148.24 li
@
209.599 148.48 mo
209.599 148.72 li
@
210.799 148.96 mo
210.799 149.2 li
@
211.999 149.68 mo
211.999 149.92 li
@
213.199 150.4 mo
213.199 150.64 li
@
214.639 151.36 mo
214.639 151.6 li
@
215.839 152.8 mo
215.839 153.04 li
@
217.039 154.72 mo
217.039 154.96 li
@
218.239 156.88 mo
218.239 157.12 li
@
219.439 160 mo
219.439 160.24 li
@
220.639 163.36 mo
220.639 163.6 li
@
222.079 167.2 mo
222.079 167.44 li
@
223.279 171.04 mo
223.279 171.28 li
@
224.479 175.12 mo
224.479 175.36 li
@
225.679 178.96 mo
225.679 179.2 li
@
226.879 182.56 mo
226.879 182.8 li
@
228.079 185.92 mo
228.079 186.16 li
@
229.519 189.28 mo
229.519 189.52 li
@
230.719 192.64 mo
230.719 192.88 li
@
231.919 195.76 mo
231.919 196 li
@
233.119 198.64 mo
233.119 198.88 li
@
234.319 201.76 mo
234.319 202 li
@
235.519 204.88 mo
235.519 205.12 li
@
236.719 207.76 mo
236.719 208 li
@
237.919 210.4 mo
237.919 210.64 li
@
239.119 213.04 mo
239.119 213.28 li
@
240.319 215.2 mo
240.319 215.44 li
@
241.759 217.36 mo
241.759 217.6 li
@
242.959 219.52 mo
242.959 219.76 li
@
244.159 221.44 mo
244.159 221.68 li
@
245.359 223.12 mo
245.359 223.36 li
@
246.559 224.8 mo
246.559 225.04 li
@
247.759 226.48 mo
247.759 226.72 li
@
249.199 227.68 mo
249.199 227.92 li
@
250.399 229.12 mo
250.399 229.36 li
@
251.599 230.32 mo
251.599 230.56 li
@
252.799 231.76 mo
252.799 232 li
@
253.999 232.72 mo
253.999 232.96 li
@
255.199 233.68 mo
255.199 233.92 li
@
256.639 234.4 mo
256.639 234.64 li
@
257.839 235.36 mo
257.839 235.6 li
@
259.039 236.8 mo
259.039 237.04 li
@
260.239 239.2 mo
260.239 239.44 li
@
261.439 241.6 mo
261.439 241.84 li
@
262.639 243.28 mo
262.639 243.52 li
@
264.079 244.24 mo
264.079 244.48 li
@
265.279 245.2 mo
265.279 245.44 li
@
266.479 245.92 mo
266.479 246.16 li
@
267.679 246.64 mo
267.679 246.88 li
@
268.879 247.36 mo
268.879 247.6 li
@
270.079 248.08 mo
270.079 248.32 li
@
271.279 249.04 mo
271.279 249.28 li
@
272.479 249.76 mo
272.479 250 li
@
273.679 250.48 mo
273.679 250.72 li
@
275.119 251.2 mo
275.119 251.44 li
@
276.319 252.16 mo
276.319 252.4 li
@
277.519 252.88 mo
277.519 253.12 li
@
278.719 253.6 mo
278.719 253.84 li
@
279.919 254.08 mo
279.919 254.32 li
@
281.119 255.04 mo
281.119 255.28 li
@
282.319 255.76 mo
282.319 256 li
@
283.759 256.48 mo
283.759 256.72 li
@
284.959 257.2 mo
284.959 257.44 li
@
286.159 257.92 mo
286.159 258.16 li
@
287.359 258.64 mo
287.359 258.88 li
@
288.559 259.36 mo
288.559 259.6 li
@
289.759 260.08 mo
289.759 260.32 li
@
291.199 260.8 mo
291.199 261.04 li
@
292.399 261.52 mo
292.399 261.76 li
@
293.599 262.24 mo
293.599 262.48 li
@
294.799 262.96 mo
294.799 263.2 li
@
295.999 263.68 mo
295.999 263.92 li
@
297.199 264.4 mo
297.199 264.64 li
@
298.639 265.12 mo
298.639 265.36 li
@
299.839 266.08 mo
299.839 266.32 li
@
301.039 266.8 mo
301.039 267.04 li
@
302.239 267.52 mo
302.239 267.76 li
@
303.439 268.24 mo
303.439 268.48 li
@
304.639 269.2 mo
304.639 269.44 li
@
305.839 269.92 mo
305.839 270.16 li
@
307.039 270.64 mo
307.039 270.88 li
@
308.239 271.36 mo
308.239 271.6 li
@
309.679 272.32 mo
309.679 272.56 li
@
310.879 273.04 mo
310.879 273.28 li
@
312.079 273.76 mo
312.079 274 li
@
313.279 274.72 mo
313.279 274.96 li
@
314.479 275.44 mo
314.479 275.68 li
@
315.679 276.16 mo
315.679 276.4 li
@
35.7451 294.811 mo
40.1572 294.811 li
40.1572 296.437 li
35.7451 296.437 li
35.7451 294.811 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
f
42.2271 297.808 mo
42.6167 297.005 43.377 296.276 44.5078 295.62 cv
46.1953 294.644 li
46.9512 294.205 47.4814 293.83 47.7861 293.518 cv
48.2666 293.031 48.5068 292.473 48.5068 291.845 cv
48.5068 291.111 48.2871 290.529 47.8477 290.097 cv
47.4082 289.666 46.8223 289.45 46.0898 289.45 cv
45.0059 289.45 44.2559 289.861 43.8398 290.684 cv
43.6172 291.125 43.4941 291.736 43.4707 292.517 cv
41.8623 292.517 li
41.8799 291.421 42.082 290.528 42.4688 289.836 cv
43.1543 288.618 44.3643 288.008 46.0986 288.008 cv
47.54 288.008 48.5933 288.398 49.2583 289.177 cv
49.9233 289.957 50.2559 290.824 50.2559 291.779 cv
50.2559 292.787 49.9014 293.648 49.1924 294.363 cv
48.7822 294.779 48.0469 295.283 46.9863 295.875 cv
45.7822 296.542 li
45.208 296.859 44.7568 297.161 44.4287 297.448 cv
43.8428 297.958 43.4736 298.523 43.3213 299.144 cv
50.1943 299.144 li
50.1943 300.638 li
41.5547 300.638 li
41.6133 299.554 41.8374 298.611 42.2271 297.808 cv
cp
f
52.7256 291.726 mo
52.7256 290.513 li
53.8682 290.402 54.665 290.216 55.1162 289.955 cv
55.5674 289.695 55.9043 289.078 56.127 288.105 cv
57.375 288.105 li
57.375 300.638 li
55.6875 300.638 li
55.6875 291.726 li
52.7256 291.726 li
cp
f
35.7451 237.212 mo
40.1572 237.212 li
40.1572 238.837 li
35.7451 238.837 li
35.7451 237.212 li
cp
f
42.2271 240.208 mo
42.6167 239.406 43.377 238.677 44.5078 238.021 cv
46.1953 237.044 li
46.9512 236.605 47.4814 236.23 47.7861 235.919 cv
48.2666 235.431 48.5068 234.875 48.5068 234.246 cv
48.5068 233.511 48.2871 232.929 47.8477 232.498 cv
47.4082 232.066 46.8223 231.851 46.0898 231.851 cv
45.0059 231.851 44.2559 232.261 43.8398 233.085 cv
43.6172 233.525 43.4941 234.136 43.4707 234.917 cv
41.8623 234.917 li
41.8799 233.822 42.082 232.929 42.4688 232.238 cv
43.1543 231.019 44.3643 230.41 46.0986 230.41 cv
47.54 230.41 48.5933 230.798 49.2583 231.578 cv
49.9233 232.357 50.2559 233.224 50.2559 234.179 cv
50.2559 235.187 49.9014 236.048 49.1924 236.763 cv
48.7822 237.179 48.0469 237.683 46.9863 238.275 cv
45.7822 238.943 li
45.208 239.259 44.7568 239.562 44.4287 239.849 cv
43.8428 240.359 43.4736 240.923 43.3213 241.544 cv
50.1943 241.544 li
50.1943 243.039 li
41.5547 243.039 li
41.6133 241.955 41.8374 241.011 42.2271 240.208 cv
cp
f
57.813 240.851 mo
58.3003 240.125 58.5439 238.771 58.5439 236.791 cv
58.5439 235.361 58.3677 234.183 58.0156 233.261 cv
57.6636 232.337 56.98 231.876 55.9644 231.876 cv
55.0313 231.876 54.3491 232.316 53.9175 233.191 cv
53.4863 234.068 53.2705 235.357 53.2705 237.062 cv
53.2705 238.345 53.4082 239.376 53.6841 240.156 cv
54.1069 241.345 54.8286 241.941 55.8501 241.941 cv
56.6714 241.941 57.3262 241.578 57.813 240.851 cv
cp
59.4053 232.466 mo
59.9678 233.503 60.249 234.923 60.249 236.728 cv
60.249 238.439 59.9941 239.855 59.4844 240.974 cv
58.7461 242.58 57.5391 243.382 55.8633 243.382 cv
54.3516 243.382 53.2266 242.726 52.4883 241.414 cv
51.873 240.318 51.5654 238.847 51.5654 237.001 cv
51.5654 235.572 51.75 234.343 52.1191 233.318 cv
52.8105 231.408 54.0615 230.453 55.8721 230.453 cv
57.501 230.453 58.6787 231.125 59.4053 232.466 cv
cp
f
35.7451 179.612 mo
40.1572 179.612 li
40.1572 181.238 li
35.7451 181.238 li
35.7451 179.612 li
cp
f
42.7148 176.527 mo
42.7148 175.314 li
43.8574 175.203 44.6543 175.017 45.1055 174.755 cv
45.5566 174.496 45.8936 173.878 46.1162 172.906 cv
47.3643 172.906 li
47.3643 185.439 li
45.6768 185.439 li
45.6768 176.527 li
42.7148 176.527 li
cp
f
57.5112 179.186 mo
58.0298 178.774 58.2891 178.053 58.2891 177.023 cv
58.2891 176.099 58.0562 175.411 57.5903 174.957 cv
57.1245 174.503 56.5313 174.277 55.8105 174.277 cv
55.0371 174.277 54.4233 174.536 53.9692 175.053 cv
53.5151 175.571 53.2881 176.263 53.2881 177.128 cv
53.2881 177.948 53.4873 178.599 53.8857 179.082 cv
54.2842 179.564 54.9199 179.805 55.793 179.805 cv
56.4199 179.805 56.9927 179.599 57.5112 179.186 cv
cp
53.3936 182.389 mo
53.4404 183.262 53.7773 183.866 54.4043 184.2 cv
54.7266 184.375 55.0898 184.463 55.4941 184.463 cv
56.25 184.463 56.8945 184.149 57.4277 183.519 cv
57.9609 182.889 58.3389 181.61 58.5615 179.682 cv
58.21 180.239 57.7749 180.63 57.2563 180.855 cv
56.7378 181.082 56.1797 181.194 55.582 181.194 cv
54.3691 181.194 53.4097 180.816 52.7036 180.061 cv
51.9976 179.306 51.6445 178.334 51.6445 177.146 cv
51.6445 176.005 51.9932 175.001 52.6904 174.135 cv
53.3877 173.269 54.416 172.835 55.7754 172.835 cv
57.6094 172.835 58.875 173.661 59.5723 175.312 cv
59.959 176.22 60.1523 177.356 60.1523 178.72 cv
60.1523 180.26 59.9209 181.625 59.458 182.813 cv
58.6904 184.792 57.3896 185.782 55.5557 185.782 cv
54.3252 185.782 53.3906 185.459 52.752 184.815 cv
52.1133 184.17 51.7939 183.362 51.7939 182.389 cv
53.3936 182.389 li
cp
f
35.7451 122.012 mo
40.1572 122.012 li
40.1572 123.638 li
35.7451 123.638 li
35.7451 122.012 li
cp
f
42.7148 118.927 mo
42.7148 117.714 li
43.8574 117.603 44.6543 117.417 45.1055 117.156 cv
45.5566 116.896 45.8936 116.279 46.1162 115.306 cv
47.3643 115.306 li
47.3643 127.839 li
45.6768 127.839 li
45.6768 118.927 li
42.7148 118.927 li
cp
f
57.5254 119.941 mo
57.9175 119.551 58.1133 119.085 58.1133 118.545 cv
58.1133 118.075 57.9263 117.644 57.5518 117.25 cv
57.1777 116.856 56.6074 116.66 55.8413 116.66 cv
55.0811 116.66 54.5313 116.856 54.1924 117.25 cv
53.853 117.644 53.6836 118.104 53.6836 118.633 cv
53.6836 119.226 53.9028 119.69 54.3413 120.025 cv
54.7803 120.359 55.2974 120.527 55.894 120.527 cv
56.5898 120.527 57.1338 120.332 57.5254 119.941 cv
cp
57.8188 126.165 mo
58.3022 125.77 58.5439 125.179 58.5439 124.394 cv
58.5439 123.58 58.2949 122.961 57.7969 122.54 cv
57.2988 122.118 56.6602 121.907 55.8809 121.907 cv
55.125 121.907 54.5083 122.122 54.0308 122.553 cv
53.5532 122.983 53.3145 123.58 53.3145 124.341 cv
53.3145 124.998 53.5327 125.564 53.9692 126.042 cv
54.4058 126.52 55.0811 126.758 55.9951 126.758 cv
56.7275 126.758 57.3354 126.561 57.8188 126.165 cv
cp
52.7168 120.474 mo
52.2539 120.005 52.0225 119.396 52.0225 118.646 cv
52.0225 117.708 52.3618 116.903 53.0405 116.229 cv
53.7197 115.555 54.6826 115.218 55.9292 115.218 cv
57.1348 115.218 58.0801 115.536 58.7646 116.172 cv
59.4497 116.808 59.792 117.55 59.792 118.4 cv
59.792 119.185 59.5928 119.821 59.1948 120.307 cv
58.9722 120.583 58.6265 120.852 58.1582 121.116 cv
58.6816 121.356 59.0933 121.631 59.3936 121.942 cv
59.9521 122.528 60.2314 123.29 60.2314 124.227 cv
60.2314 125.334 59.8594 126.273 59.1152 127.044 cv
58.3711 127.814 57.3193 128.2 55.96 128.2 cv
54.7354 128.2 53.6997 127.867 52.853 127.202 cv
52.0063 126.537 51.583 125.572 51.583 124.306 cv
51.583 123.562 51.7646 122.919 52.1279 122.377 cv
52.4912 121.835 53.0303 121.42 53.7451 121.133 cv
53.3057 120.946 52.9629 120.726 52.7168 120.474 cv
cp
f
35.7451 64.4116 mo
40.1572 64.4116 li
40.1572 66.0376 li
35.7451 66.0376 li
35.7451 64.4116 li
cp
f
42.7148 61.3267 mo
42.7148 60.1138 li
43.8574 60.0024 44.6543 59.8164 45.1055 59.5557 cv
45.5566 59.2949 45.8936 58.6782 46.1162 57.7056 cv
47.3643 57.7056 li
47.3643 70.2388 li
45.6768 70.2388 li
45.6768 61.3267 li
42.7148 61.3267 li
cp
f
60.416 57.8638 mo
60.416 59.2437 li
60.0117 59.6362 59.4741 60.3188 58.8032 61.2915 cv
58.1323 62.2642 57.5391 63.313 57.0234 64.438 cv
56.5137 65.5337 56.127 66.5327 55.8633 67.4351 cv
55.6934 68.0151 55.4736 68.9497 55.2041 70.2388 cv
53.4551 70.2388 li
53.8535 67.8364 54.7324 65.4458 56.0918 63.0669 cv
56.8945 61.6724 57.7383 60.4683 58.623 59.4546 cv
51.6621 59.4546 li
51.6621 57.8638 li
60.416 57.8638 li
cp
f
35.7451 6.81152 mo
40.1572 6.81152 li
40.1572 8.4375 li
35.7451 8.4375 li
35.7451 6.81152 li
cp
f
42.7148 3.72656 mo
42.7148 2.51367 li
43.8574 2.40234 44.6543 2.21631 45.1055 1.95557 cv
45.5566 1.69482 45.8936 1.07813 46.1162 0.105469 cv
47.3643 0.105469 li
47.3643 12.6387 li
45.6768 12.6387 li
45.6768 3.72656 li
42.7148 3.72656 li
cp
f
58.021 10.7183 mo
58.4341 10.1587 58.6406 9.49805 58.6406 8.73633 cv
58.6406 8.0918 58.4561 7.47803 58.0869 6.89502 cv
57.7178 6.31201 57.0469 6.02051 56.0742 6.02051 cv
55.3945 6.02051 54.7983 6.24609 54.2856 6.69727 cv
53.7729 7.14844 53.5166 7.82813 53.5166 8.73633 cv
53.5166 9.5332 53.7495 10.2026 54.2153 10.7446 cv
54.6812 11.2866 55.3271 11.5576 56.1533 11.5576 cv
56.9854 11.5576 57.6079 11.2778 58.021 10.7183 cv
cp
59.2075 1.09424 mo
59.7612 1.82373 60.0381 2.5752 60.0381 3.34863 cv
58.4736 3.34863 li
58.3799 2.85059 58.2305 2.46094 58.0254 2.17969 cv
57.6445 1.65234 57.0674 1.38867 56.2939 1.38867 cv
55.4092 1.38867 54.7061 1.79736 54.1846 2.61475 cv
53.6631 3.43213 53.373 4.60254 53.3145 6.12598 cv
53.6777 5.59277 54.1348 5.19434 54.6855 4.93066 cv
55.1895 4.69629 55.752 4.5791 56.373 4.5791 cv
57.4277 4.5791 58.3477 4.91602 59.1328 5.58984 cv
59.918 6.26367 60.3105 7.26855 60.3105 8.60449 cv
60.3105 9.74707 59.9385 10.7593 59.1943 11.6411 cv
58.4502 12.5229 57.3896 12.9639 56.0127 12.9639 cv
54.835 12.9639 53.8184 12.5171 52.9629 11.6235 cv
52.1074 10.73 51.6797 9.22559 51.6797 7.11035 cv
51.6797 5.5459 51.8701 4.21875 52.251 3.12891 cv
52.9834 1.04297 54.3223 0 56.2676 0 cv
57.6738 0 58.6538 0.364746 59.2075 1.09424 cv
cp
f
62.8652 312.811 mo
67.2773 312.811 li
67.2773 314.437 li
62.8652 314.437 li
62.8652 312.811 li
cp
f
74.0625 314.182 mo
74.0625 308.465 li
70.0283 314.182 li
74.0625 314.182 li
cp
74.0889 318.638 mo
74.0889 315.562 li
68.5693 315.562 li
68.5693 314.015 li
74.335 306.017 li
75.6709 306.017 li
75.6709 314.182 li
77.5254 314.182 li
77.5254 315.562 li
75.6709 315.562 li
75.6709 318.638 li
74.0889 318.638 li
cp
f
116.865 312.811 mo
121.277 312.811 li
121.277 314.437 li
116.865 314.437 li
116.865 312.811 li
cp
f
123.549 317.755 mo
122.878 316.937 122.543 315.943 122.543 314.771 cv
124.195 314.771 li
124.266 315.585 124.418 316.177 124.652 316.546 cv
125.063 317.208 125.804 317.54 126.876 317.54 cv
127.708 317.54 128.376 317.317 128.88 316.872 cv
129.384 316.426 129.636 315.852 129.636 315.149 cv
129.636 314.282 129.371 313.675 128.84 313.33 cv
128.31 312.984 127.573 312.811 126.63 312.811 cv
126.524 312.811 126.417 312.813 126.309 312.816 cv
126.201 312.819 126.091 312.823 125.979 312.829 cv
125.979 311.431 li
126.144 311.449 126.281 311.46 126.393 311.466 cv
126.504 311.472 126.624 311.475 126.753 311.475 cv
127.345 311.475 127.831 311.381 128.212 311.194 cv
128.88 310.866 129.214 310.28 129.214 309.436 cv
129.214 308.809 128.991 308.326 128.546 307.986 cv
128.101 307.646 127.582 307.476 126.99 307.476 cv
125.936 307.476 125.206 307.828 124.802 308.531 cv
124.579 308.917 124.453 309.468 124.424 310.183 cv
122.859 310.183 li
122.859 309.246 123.047 308.449 123.422 307.792 cv
124.066 306.621 125.2 306.035 126.823 306.035 cv
128.106 306.035 129.1 306.32 129.803 306.892 cv
130.506 307.462 130.857 308.291 130.857 309.375 cv
130.857 310.148 130.649 310.775 130.233 311.255 cv
129.976 311.554 129.642 311.789 129.231 311.958 cv
129.894 312.14 130.411 312.49 130.783 313.009 cv
131.155 313.527 131.341 314.162 131.341 314.912 cv
131.341 316.113 130.945 317.091 130.154 317.847 cv
129.363 318.603 128.241 318.981 126.788 318.981 cv
125.3 318.981 124.22 318.572 123.549 317.755 cv
cp
f
133.661 316.722 mo
135.498 316.722 li
135.498 318.638 li
133.661 318.638 li
133.661 316.722 li
cp
f
139.348 315.43 mo
139.453 316.333 139.872 316.957 140.604 317.302 cv
140.979 317.478 141.413 317.566 141.905 317.566 cv
142.843 317.566 143.537 317.267 143.988 316.669 cv
144.439 316.072 144.665 315.41 144.665 314.683 cv
144.665 313.804 144.397 313.125 143.861 312.644 cv
143.325 312.164 142.682 311.923 141.932 311.923 cv
141.387 311.923 140.919 312.029 140.53 312.24 cv
140.14 312.451 139.808 312.744 139.532 313.119 cv
138.161 313.04 li
139.12 306.263 li
145.658 306.263 li
145.658 307.792 li
140.306 307.792 li
139.77 311.291 li
140.063 311.068 140.341 310.901 140.604 310.79 cv
141.073 310.596 141.615 310.5 142.23 310.5 cv
143.385 310.5 144.363 310.872 145.166 311.616 cv
145.969 312.36 146.37 313.303 146.37 314.446 cv
146.37 315.635 146.002 316.684 145.267 317.592 cv
144.532 318.5 143.358 318.955 141.747 318.955 cv
140.722 318.955 139.815 318.666 139.027 318.089 cv
138.239 317.512 137.798 316.625 137.704 315.43 cv
139.348 315.43 li
cp
f
186.225 312.811 mo
190.637 312.811 li
190.637 314.437 li
186.225 314.437 li
186.225 312.811 li
cp
f
192.909 317.755 mo
192.238 316.937 191.903 315.943 191.903 314.771 cv
193.555 314.771 li
193.625 315.585 193.778 316.177 194.012 316.546 cv
194.422 317.208 195.164 317.54 196.236 317.54 cv
197.068 317.54 197.736 317.317 198.24 316.872 cv
198.744 316.426 198.996 315.852 198.996 315.149 cv
198.996 314.282 198.73 313.675 198.2 313.33 cv
197.67 312.984 196.933 312.811 195.99 312.811 cv
195.884 312.811 195.777 312.813 195.669 312.816 cv
195.561 312.819 195.451 312.823 195.339 312.829 cv
195.339 311.431 li
195.503 311.449 195.641 311.46 195.752 311.466 cv
195.864 311.472 195.984 311.475 196.113 311.475 cv
196.705 311.475 197.191 311.381 197.572 311.194 cv
198.24 310.866 198.574 310.28 198.574 309.436 cv
198.574 308.809 198.351 308.326 197.906 307.986 cv
197.46 307.646 196.942 307.476 196.35 307.476 cv
195.295 307.476 194.566 307.828 194.162 308.531 cv
193.939 308.917 193.813 309.468 193.784 310.183 cv
192.219 310.183 li
192.219 309.246 192.407 308.449 192.782 307.792 cv
193.426 306.621 194.56 306.035 196.183 306.035 cv
197.466 306.035 198.459 306.32 199.163 306.892 cv
199.866 307.462 200.217 308.291 200.217 309.375 cv
200.217 310.148 200.009 310.775 199.593 311.255 cv
199.335 311.554 199.001 311.789 198.591 311.958 cv
199.253 312.14 199.771 312.49 200.143 313.009 cv
200.515 313.527 200.701 314.162 200.701 314.912 cv
200.701 316.113 200.305 317.091 199.514 317.847 cv
198.723 318.603 197.601 318.981 196.148 318.981 cv
194.66 318.981 193.58 318.572 192.909 317.755 cv
cp
f
240.225 312.811 mo
244.637 312.811 li
244.637 314.437 li
240.225 314.437 li
240.225 312.811 li
cp
f
246.707 315.808 mo
247.097 315.005 247.857 314.276 248.988 313.62 cv
250.675 312.644 li
251.431 312.205 251.961 311.83 252.266 311.518 cv
252.747 311.031 252.987 310.473 252.987 309.845 cv
252.987 309.111 252.767 308.529 252.328 308.097 cv
251.888 307.666 251.302 307.45 250.57 307.45 cv
249.486 307.45 248.736 307.861 248.32 308.684 cv
248.097 309.125 247.974 309.736 247.951 310.517 cv
246.342 310.517 li
246.36 309.421 246.562 308.528 246.949 307.836 cv
247.634 306.618 248.844 306.008 250.579 306.008 cv
252.02 306.008 253.073 306.398 253.738 307.177 cv
254.403 307.957 254.736 308.824 254.736 309.779 cv
254.736 310.787 254.381 311.648 253.672 312.363 cv
253.262 312.779 252.527 313.283 251.466 313.875 cv
250.262 314.542 li
249.688 314.859 249.237 315.161 248.909 315.448 cv
248.323 315.958 247.954 316.523 247.801 317.144 cv
254.674 317.144 li
254.674 318.638 li
246.035 318.638 li
246.093 317.554 246.317 316.611 246.707 315.808 cv
cp
f
257.021 316.722 mo
258.858 316.722 li
258.858 318.638 li
257.021 318.638 li
257.021 316.722 li
cp
f
262.708 315.43 mo
262.813 316.333 263.232 316.957 263.964 317.302 cv
264.339 317.478 264.773 317.566 265.265 317.566 cv
266.203 317.566 266.897 317.267 267.348 316.669 cv
267.799 316.072 268.025 315.41 268.025 314.683 cv
268.025 313.804 267.757 313.125 267.221 312.644 cv
266.685 312.164 266.042 311.923 265.292 311.923 cv
264.747 311.923 264.279 312.029 263.89 312.24 cv
263.5 312.451 263.167 312.744 262.892 313.119 cv
261.521 313.04 li
262.479 306.263 li
269.018 306.263 li
269.018 307.792 li
263.666 307.792 li
263.129 311.291 li
263.422 311.068 263.701 310.901 263.964 310.79 cv
264.433 310.596 264.975 310.5 265.59 310.5 cv
266.745 310.5 267.723 310.872 268.526 311.616 cv
269.329 312.36 269.73 313.303 269.73 314.446 cv
269.73 315.635 269.362 316.684 268.627 317.592 cv
267.892 318.5 266.718 318.955 265.107 318.955 cv
264.082 318.955 263.175 318.666 262.387 318.089 cv
261.599 317.512 261.158 316.625 261.064 315.43 cv
262.708 315.43 li
cp
f
309.585 312.811 mo
313.997 312.811 li
313.997 314.437 li
309.585 314.437 li
309.585 312.811 li
cp
f
316.066 315.808 mo
316.456 315.005 317.217 314.276 318.348 313.62 cv
320.035 312.644 li
320.791 312.205 321.321 311.83 321.626 311.518 cv
322.106 311.031 322.347 310.473 322.347 309.845 cv
322.347 309.111 322.127 308.529 321.688 308.097 cv
321.248 307.666 320.662 307.45 319.93 307.45 cv
318.846 307.45 318.096 307.861 317.68 308.684 cv
317.457 309.125 317.334 309.736 317.311 310.517 cv
315.702 310.517 li
315.72 309.421 315.922 308.528 316.309 307.836 cv
316.994 306.618 318.204 306.008 319.938 306.008 cv
321.38 306.008 322.433 306.398 323.098 307.177 cv
323.763 307.957 324.096 308.824 324.096 309.779 cv
324.096 310.787 323.741 311.648 323.032 312.363 cv
322.622 312.779 321.887 313.283 320.826 313.875 cv
319.622 314.542 li
319.048 314.859 318.597 315.161 318.269 315.448 cv
317.683 315.958 317.313 316.523 317.161 317.144 cv
324.034 317.144 li
324.034 318.638 li
315.395 318.638 li
315.453 317.554 315.678 316.611 316.066 315.808 cv
cp
f
363.825 312.811 mo
368.237 312.811 li
368.237 314.437 li
363.825 314.437 li
363.825 312.811 li
cp
f
370.795 309.726 mo
370.795 308.513 li
371.938 308.402 372.734 308.216 373.186 307.955 cv
373.637 307.695 373.974 307.078 374.196 306.105 cv
375.444 306.105 li
375.444 318.638 li
373.757 318.638 li
373.757 309.726 li
370.795 309.726 li
cp
f
380.621 316.722 mo
382.458 316.722 li
382.458 318.638 li
380.621 318.638 li
380.621 316.722 li
cp
f
386.308 315.43 mo
386.413 316.333 386.832 316.957 387.564 317.302 cv
387.939 317.478 388.373 317.566 388.865 317.566 cv
389.803 317.566 390.497 317.267 390.948 316.669 cv
391.399 316.072 391.625 315.41 391.625 314.683 cv
391.625 313.804 391.357 313.125 390.82 312.644 cv
390.285 312.164 389.642 311.923 388.892 311.923 cv
388.347 311.923 387.879 312.029 387.49 312.24 cv
387.1 312.451 386.768 312.744 386.492 313.119 cv
385.121 313.04 li
386.079 306.263 li
392.618 306.263 li
392.618 307.792 li
387.266 307.792 li
386.729 311.291 li
387.022 311.068 387.301 310.901 387.564 310.79 cv
388.033 310.596 388.575 310.5 389.19 310.5 cv
390.345 310.5 391.323 310.872 392.126 311.616 cv
392.929 312.36 393.33 313.303 393.33 314.446 cv
393.33 315.635 392.962 316.684 392.227 317.592 cv
391.491 318.5 390.318 318.955 388.707 318.955 cv
387.682 318.955 386.774 318.666 385.986 318.089 cv
385.198 317.512 384.758 316.625 384.664 315.43 cv
386.308 315.43 li
cp
f
433.185 312.811 mo
437.597 312.811 li
437.597 314.437 li
433.185 314.437 li
433.185 312.811 li
cp
f
440.154 309.726 mo
440.154 308.513 li
441.297 308.402 442.094 308.216 442.545 307.955 cv
442.996 307.695 443.333 307.078 443.556 306.105 cv
444.804 306.105 li
444.804 318.638 li
443.116 318.638 li
443.116 309.726 li
440.154 309.726 li
cp
f
487.185 312.811 mo
491.597 312.811 li
491.597 314.437 li
487.185 314.437 li
487.185 312.811 li
cp
f
499.242 316.45 mo
499.729 315.723 499.973 314.37 499.973 312.389 cv
499.973 310.959 499.797 309.783 499.444 308.861 cv
499.092 307.937 498.408 307.476 497.394 307.476 cv
496.46 307.476 495.777 307.915 495.347 308.791 cv
494.915 309.667 494.699 310.957 494.699 312.662 cv
494.699 313.945 494.837 314.976 495.113 315.755 cv
495.535 316.945 496.258 317.54 497.278 317.54 cv
498.101 317.54 498.755 317.176 499.242 316.45 cv
cp
500.834 308.065 mo
501.396 309.102 501.678 310.523 501.678 312.328 cv
501.678 314.039 501.423 315.454 500.913 316.573 cv
500.175 318.178 498.968 318.981 497.292 318.981 cv
495.78 318.981 494.655 318.325 493.917 317.012 cv
493.302 315.917 492.994 314.446 492.994 312.6 cv
492.994 311.17 493.179 309.943 493.548 308.917 cv
494.239 307.007 495.49 306.052 497.301 306.052 cv
498.93 306.052 500.107 306.723 500.834 308.065 cv
cp
f
503.98 316.722 mo
505.817 316.722 li
505.817 318.638 li
503.98 318.638 li
503.98 316.722 li
cp
f
509.667 315.43 mo
509.772 316.333 510.191 316.957 510.924 317.302 cv
511.299 317.478 511.732 317.566 512.225 317.566 cv
513.162 317.566 513.856 317.267 514.308 316.669 cv
514.759 316.072 514.984 315.41 514.984 314.683 cv
514.984 313.804 514.717 313.125 514.18 312.644 cv
513.645 312.164 513.001 311.923 512.251 311.923 cv
511.706 311.923 511.238 312.029 510.85 312.24 cv
510.459 312.451 510.127 312.744 509.852 313.119 cv
508.48 313.04 li
509.438 306.263 li
515.978 306.263 li
515.978 307.792 li
510.625 307.792 li
510.089 311.291 li
510.382 311.068 510.66 310.901 510.924 310.79 cv
511.393 310.596 511.935 310.5 512.55 310.5 cv
513.704 310.5 514.683 310.872 515.485 311.616 cv
516.288 312.36 516.689 313.303 516.689 314.446 cv
516.689 315.635 516.321 316.684 515.586 317.592 cv
514.851 318.5 513.678 318.955 512.066 318.955 cv
511.041 318.955 510.134 318.666 509.346 318.089 cv
508.558 317.512 508.117 316.625 508.023 315.43 cv
509.667 315.43 li
cp
f
364.279 17.2002 mo
487.639 17.2002 li
487.639 62.3198 li
364.279 62.3198 li
364.279 17.2002 li
cp
0 0 0 0 cmyk
f
1 lw
364.399 17.3198 mo
487.52 17.3198 li
487.52 62.2002 li
364.399 62.2002 li
364.399 17.3198 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
365.239 18.1602 mo
364.279 17.2002 li
364.279 62.3198 li
367.159 65.2002 li
490.52 65.2002 li
490.52 20.0801 li
487.639 17.2002 li
364.279 17.2002 li
365.239 18.1602 li
365.239 62.0801 li
487.399 62.0801 li
487.399 18.1602 li
365.239 18.1602 li
ef
1.92 lw
371.239 28.96 mo
407.239 28.96 li
0.921569 0.843137 0 0 cmyk
@
0.24 lw
389.359 28.96 mo
389.359 29.1997 li
@
411.032 23.9521 mo
412.198 23.9521 li
412.198 31.5342 li
416.517 31.5342 li
416.517 32.5596 li
411.032 32.5596 li
411.032 23.9521 li
cp
f
417.97 23.9521 mo
419.147 23.9521 li
419.147 32.5596 li
417.97 32.5596 li
417.97 23.9521 li
cp
f
421.802 29.7822 mo
421.828 30.2705 421.939 30.667 422.135 30.9717 cv
422.507 31.542 423.164 31.8271 424.104 31.8271 cv
424.526 31.8271 424.91 31.7646 425.256 31.6396 cv
425.926 31.3975 426.261 30.9639 426.261 30.3389 cv
426.261 29.8701 426.119 29.5361 425.835 29.3369 cv
425.548 29.1416 425.097 28.9717 424.484 28.8271 cv
423.354 28.5635 li
422.616 28.3916 422.095 28.2021 421.788 27.9951 cv
421.258 27.6357 420.993 27.0986 420.993 26.3838 cv
420.993 25.6104 421.254 24.9756 421.774 24.4795 cv
422.295 23.9834 423.032 23.7354 423.986 23.7354 cv
424.864 23.7354 425.61 23.9531 426.225 24.3887 cv
426.839 24.8242 427.146 25.5205 427.146 26.4775 cv
426.05 26.4775 li
425.993 26.0166 425.874 25.6631 425.69 25.417 cv
425.35 24.9678 424.771 24.7432 423.954 24.7432 cv
423.295 24.7432 422.821 24.8877 422.533 25.1768 cv
422.245 25.4658 422.101 25.8018 422.101 26.1846 cv
422.101 26.6064 422.271 26.915 422.611 27.1104 cv
422.835 27.2354 423.34 27.3916 424.127 27.5791 cv
425.297 27.8545 li
425.86 27.9873 426.296 28.1689 426.603 28.3994 cv
427.133 28.8018 427.397 29.3857 427.397 30.1514 cv
427.397 31.1045 427.06 31.7861 426.383 32.1963 cv
425.707 32.6064 424.921 32.8115 424.026 32.8115 cv
422.982 32.8115 422.165 32.5381 421.574 31.9912 cv
420.983 31.4482 420.694 30.7119 420.706 29.7822 cv
421.802 29.7822 li
cp
f
433.489 29.0322 mo
432.164 25.2295 li
430.787 29.0322 li
433.489 29.0322 li
cp
431.556 23.9521 mo
432.872 23.9521 li
435.996 32.5596 li
434.719 32.5596 li
433.82 29.9814 li
430.443 29.9814 li
429.51 32.5596 li
428.314 32.5596 li
431.556 23.9521 li
cp
f
443.019 23.8115 mo
442.405 25.0029 442.007 25.8799 441.823 26.4424 cv
441.546 27.2979 441.407 28.2861 441.407 29.4072 cv
441.407 30.54 441.565 31.5752 441.882 32.5127 cv
442.077 33.0908 442.462 33.9229 443.036 35.0088 cv
442.327 35.0088 li
441.757 34.1182 441.403 33.5498 441.267 33.3037 cv
441.13 33.0576 440.981 32.7236 440.821 32.3018 cv
440.603 31.7236 440.45 31.1064 440.364 30.4502 cv
440.321 30.1104 440.3 29.7861 440.3 29.4775 cv
440.3 28.3213 440.481 27.292 440.845 26.3896 cv
441.075 25.8154 441.556 24.9561 442.286 23.8115 cv
443.019 23.8115 li
cp
f
444.946 30.4209 mo
445.017 31.0225 445.296 31.4385 445.784 31.6689 cv
446.034 31.7861 446.323 31.8447 446.651 31.8447 cv
447.276 31.8447 447.739 31.6455 448.04 31.2471 cv
448.341 30.8486 448.491 30.4072 448.491 29.9229 cv
448.491 29.3369 448.313 28.8838 447.955 28.5635 cv
447.598 28.2432 447.169 28.083 446.669 28.083 cv
446.306 28.083 445.994 28.1533 445.734 28.2939 cv
445.475 28.4346 445.253 28.6299 445.069 28.8799 cv
444.155 28.8271 li
444.794 24.3096 li
449.153 24.3096 li
449.153 25.3291 li
445.585 25.3291 li
445.228 27.6611 li
445.423 27.5127 445.608 27.4014 445.784 27.3271 cv
446.097 27.1982 446.458 27.1338 446.868 27.1338 cv
447.638 27.1338 448.29 27.3818 448.825 27.8779 cv
449.36 28.374 449.628 29.0029 449.628 29.7646 cv
449.628 30.5576 449.383 31.2568 448.893 31.8623 cv
448.402 32.4678 447.62 32.7705 446.546 32.7705 cv
445.862 32.7705 445.258 32.5781 444.732 32.1934 cv
444.207 31.8086 443.913 31.2178 443.851 30.4209 cv
444.946 30.4209 li
cp
f
460.115 24.1982 mo
460.958 24.6475 461.475 25.4346 461.663 26.5596 cv
460.509 26.5596 li
460.371 25.9307 460.086 25.4727 459.653 25.1855 cv
459.222 24.8984 458.677 24.7549 458.019 24.7549 cv
457.238 24.7549 456.581 25.0537 456.048 25.6514 cv
455.514 26.249 455.247 27.1396 455.247 28.3232 cv
455.247 29.3467 455.467 30.1797 455.907 30.8223 cv
456.348 31.4648 457.065 31.7861 458.061 31.7861 cv
458.822 31.7861 459.453 31.5605 459.953 31.1094 cv
460.452 30.6582 460.708 29.9287 460.72 28.9209 cv
458.024 28.9209 li
458.024 27.9541 li
461.804 27.9541 li
461.804 32.5596 li
461.054 32.5596 li
460.772 31.4521 li
460.384 31.8857 460.04 32.1865 459.741 32.3545 cv
459.237 32.6436 458.598 32.7881 457.821 32.7881 cv
456.818 32.7881 455.956 32.458 455.233 31.7979 cv
454.445 30.9697 454.052 29.833 454.052 28.3877 cv
454.052 26.9463 454.437 25.7998 455.207 24.9482 cv
455.938 24.1357 456.886 23.7295 458.048 23.7295 cv
458.845 23.7295 459.534 23.8857 460.115 24.1982 cv
cp
f
463.579 26.2842 mo
464.622 26.2842 li
464.622 27.1748 li
464.872 26.8662 465.099 26.6416 465.302 26.501 cv
465.649 26.2627 466.044 26.1436 466.485 26.1436 cv
466.985 26.1436 467.388 26.2666 467.692 26.5127 cv
467.864 26.6533 468.021 26.8604 468.161 27.1338 cv
468.396 26.7979 468.671 26.5488 468.987 26.3867 cv
469.304 26.2246 469.659 26.1436 470.054 26.1436 cv
470.897 26.1436 471.472 26.4482 471.776 27.0576 cv
471.94 27.3857 472.022 27.8271 472.022 28.3818 cv
472.022 32.5596 li
470.927 32.5596 li
470.927 28.2002 li
470.927 27.7822 470.822 27.4951 470.613 27.3389 cv
470.404 27.1826 470.149 27.1045 469.849 27.1045 cv
469.435 27.1045 469.078 27.2432 468.779 27.5205 cv
468.48 27.7979 468.331 28.2607 468.331 28.9092 cv
468.331 32.5596 li
467.259 32.5596 li
467.259 28.4639 li
467.259 28.0381 467.208 27.7275 467.106 27.5322 cv
466.946 27.2393 466.647 27.0928 466.21 27.0928 cv
465.812 27.0928 465.449 27.2471 465.123 27.5557 cv
464.797 27.8643 464.634 28.4229 464.634 29.2314 cv
464.634 32.5596 li
463.579 32.5596 li
463.579 26.2842 li
cp
f
473.218 35.0088 mo
473.839 33.7979 474.239 32.915 474.419 32.3604 cv
474.692 31.5205 474.829 30.5361 474.829 29.4072 cv
474.829 28.2783 474.671 27.2451 474.354 26.3076 cv
474.159 25.7295 473.774 24.8975 473.2 23.8115 cv
473.909 23.8115 li
474.511 24.7725 474.875 25.3652 475.002 25.5898 cv
475.129 25.8145 475.267 26.124 475.415 26.5186 cv
475.603 27.0068 475.736 27.4893 475.816 27.9658 cv
475.896 28.4424 475.937 28.9014 475.937 29.3428 cv
475.937 30.499 475.753 31.5303 475.386 32.4365 cv
475.155 33.0186 474.677 33.876 473.95 35.0088 cv
473.218 35.0088 li
cp
f
1.92 lw
374.119 40 mo
377.959 40 li
0.0705882 1 1 0.0117647 cmyk
@
379.159 40 mo
382.999 40 li
@
384.199 40 mo
388.039 40 li
@
390.199 40 mo
394.039 40 li
@
395.239 40 mo
399.079 40 li
@
400.279 40 mo
404.119 40 li
@
0.24 lw
389.359 40 mo
389.359 40.2397 li
@
411.794 40.8218 mo
411.82 41.3101 411.932 41.7065 412.127 42.0112 cv
412.499 42.5815 413.156 42.8667 414.097 42.8667 cv
414.519 42.8667 414.902 42.8042 415.248 42.6792 cv
415.918 42.437 416.253 42.0034 416.253 41.3784 cv
416.253 40.9097 416.111 40.5757 415.827 40.3765 cv
415.54 40.1812 415.089 40.0112 414.477 39.8667 cv
413.347 39.603 li
412.608 39.4312 412.087 39.2417 411.78 39.0347 cv
411.25 38.6753 410.985 38.1382 410.985 37.4233 cv
410.985 36.6499 411.246 36.0151 411.767 35.519 cv
412.287 35.0229 413.024 34.7749 413.979 34.7749 cv
414.856 34.7749 415.603 34.9927 416.217 35.4282 cv
416.831 35.8638 417.138 36.5601 417.138 37.5171 cv
416.042 37.5171 li
415.985 37.0562 415.866 36.7026 415.683 36.4565 cv
415.342 36.0073 414.763 35.7827 413.946 35.7827 cv
413.287 35.7827 412.813 35.9272 412.525 36.2163 cv
412.237 36.5054 412.093 36.8413 412.093 37.2241 cv
412.093 37.646 412.263 37.9546 412.604 38.1499 cv
412.827 38.2749 413.332 38.4312 414.119 38.6187 cv
415.289 38.894 li
415.853 39.0269 416.288 39.2085 416.595 39.439 cv
417.125 39.8413 417.39 40.4253 417.39 41.1909 cv
417.39 42.144 417.052 42.8257 416.375 43.2358 cv
415.699 43.646 414.913 43.8511 414.019 43.8511 cv
412.975 43.8511 412.157 43.5776 411.566 43.0308 cv
410.976 42.4878 410.687 41.7515 410.698 40.8218 cv
411.794 40.8218 li
cp
f
424.766 35.2378 mo
425.608 35.687 426.125 36.4741 426.313 37.5991 cv
425.159 37.5991 li
425.021 36.9702 424.736 36.5122 424.304 36.2251 cv
423.872 35.938 423.327 35.7944 422.669 35.7944 cv
421.889 35.7944 421.231 36.0933 420.698 36.6909 cv
420.164 37.2886 419.897 38.1792 419.897 39.3628 cv
419.897 40.3862 420.117 41.2192 420.558 41.8618 cv
420.998 42.5044 421.716 42.8257 422.711 42.8257 cv
423.473 42.8257 424.104 42.6001 424.604 42.1489 cv
425.103 41.6978 425.358 40.9683 425.37 39.9604 cv
422.675 39.9604 li
422.675 38.9937 li
426.454 38.9937 li
426.454 43.5991 li
425.704 43.5991 li
425.423 42.4917 li
425.034 42.9253 424.69 43.2261 424.392 43.394 cv
423.888 43.6831 423.248 43.8276 422.472 43.8276 cv
421.469 43.8276 420.606 43.4976 419.884 42.8374 cv
419.096 42.0093 418.702 40.8726 418.702 39.4272 cv
418.702 37.9858 419.087 36.8394 419.857 35.9878 cv
420.589 35.1753 421.536 34.769 422.698 34.769 cv
423.495 34.769 424.185 34.9253 424.766 35.2378 cv
cp
f
434.432 41.7085 mo
434.891 40.9717 435.12 40.124 435.12 39.1665 cv
435.12 38.1538 434.855 37.3389 434.326 36.7212 cv
433.797 36.1035 433.073 35.7944 432.155 35.7944 cv
431.265 35.7944 430.538 36.1006 429.976 36.7124 cv
429.413 37.3242 429.132 38.2261 429.132 39.4185 cv
429.132 40.3726 429.373 41.1768 429.855 41.8315 cv
430.338 42.4868 431.12 42.814 432.202 42.814 cv
433.229 42.814 433.973 42.4458 434.432 41.7085 cv
cp
435.46 36.2222 mo
436.03 36.9839 436.315 37.9585 436.315 39.146 cv
436.315 40.4312 435.989 41.4995 435.337 42.3511 cv
434.571 43.3511 433.479 43.8511 432.062 43.8511 cv
430.737 43.8511 429.696 43.4136 428.938 42.5386 cv
428.263 41.6948 427.925 40.6284 427.925 39.3394 cv
427.925 38.1753 428.214 37.1792 428.792 36.3511 cv
429.534 35.2886 430.632 34.7573 432.085 34.7573 cv
433.604 34.7573 434.729 35.2456 435.46 36.2222 cv
cp
f
443.675 34.8511 mo
443.062 36.0425 442.663 36.9194 442.479 37.4819 cv
442.202 38.3374 442.063 39.3257 442.063 40.4468 cv
442.063 41.5796 442.222 42.6147 442.538 43.5522 cv
442.733 44.1304 443.118 44.9624 443.692 46.0483 cv
442.983 46.0483 li
442.413 45.1577 442.06 44.5894 441.923 44.3433 cv
441.786 44.0972 441.638 43.7632 441.478 43.3413 cv
441.259 42.7632 441.106 42.146 441.021 41.4897 cv
440.978 41.1499 440.956 40.8257 440.956 40.5171 cv
440.956 39.3608 441.138 38.3315 441.501 37.4292 cv
441.731 36.855 442.212 35.9956 442.942 34.8511 cv
443.675 34.8511 li
cp
f
444.943 41.7124 mo
445.203 41.1772 445.71 40.6909 446.464 40.2534 cv
447.589 39.603 li
448.093 39.3101 448.446 39.0601 448.649 38.8525 cv
448.97 38.5273 449.13 38.1558 449.13 37.7368 cv
449.13 37.2476 448.983 36.8594 448.69 36.5718 cv
448.397 36.2842 448.007 36.1401 447.519 36.1401 cv
446.796 36.1401 446.296 36.4146 446.019 36.9629 cv
445.87 37.2568 445.788 37.6641 445.772 38.1851 cv
444.7 38.1851 li
444.712 37.4546 444.847 36.8589 445.104 36.3979 cv
445.562 35.5854 446.368 35.1792 447.524 35.1792 cv
448.485 35.1792 449.188 35.439 449.631 35.9585 cv
450.074 36.478 450.296 37.0562 450.296 37.6929 cv
450.296 38.3647 450.06 38.939 449.587 39.4155 cv
449.313 39.6929 448.823 40.0288 448.116 40.4233 cv
447.313 40.8687 li
446.931 41.0796 446.63 41.2808 446.411 41.4722 cv
446.021 41.812 445.774 42.189 445.673 42.603 cv
450.255 42.603 li
450.255 43.5991 li
444.495 43.5991 li
444.534 42.8765 444.684 42.2476 444.943 41.7124 cv
cp
f
457.438 35.2378 mo
458.28 35.687 458.797 36.4741 458.985 37.5991 cv
457.831 37.5991 li
457.693 36.9702 457.408 36.5122 456.976 36.2251 cv
456.544 35.938 455.999 35.7944 455.341 35.7944 cv
454.561 35.7944 453.903 36.0933 453.37 36.6909 cv
452.836 37.2886 452.569 38.1792 452.569 39.3628 cv
452.569 40.3862 452.789 41.2192 453.229 41.8618 cv
453.67 42.5044 454.388 42.8257 455.383 42.8257 cv
456.145 42.8257 456.775 42.6001 457.275 42.1489 cv
457.774 41.6978 458.03 40.9683 458.042 39.9604 cv
455.347 39.9604 li
455.347 38.9937 li
459.126 38.9937 li
459.126 43.5991 li
458.376 43.5991 li
458.095 42.4917 li
457.706 42.9253 457.362 43.2261 457.063 43.394 cv
456.56 43.6831 455.92 43.8276 455.144 43.8276 cv
454.141 43.8276 453.278 43.4976 452.556 42.8374 cv
451.768 42.0093 451.374 40.8726 451.374 39.4272 cv
451.374 37.9858 451.759 36.8394 452.529 35.9878 cv
453.261 35.1753 454.208 34.769 455.37 34.769 cv
456.167 34.769 456.856 34.9253 457.438 35.2378 cv
cp
f
460.901 37.3237 mo
461.944 37.3237 li
461.944 38.2144 li
462.194 37.9058 462.421 37.6812 462.624 37.5405 cv
462.972 37.3022 463.366 37.1831 463.808 37.1831 cv
464.308 37.1831 464.71 37.3062 465.015 37.5522 cv
465.187 37.6929 465.343 37.8999 465.483 38.1733 cv
465.718 37.8374 465.993 37.5884 466.31 37.4263 cv
466.626 37.2642 466.981 37.1831 467.376 37.1831 cv
468.22 37.1831 468.794 37.4878 469.099 38.0972 cv
469.263 38.4253 469.345 38.8667 469.345 39.4214 cv
469.345 43.5991 li
468.249 43.5991 li
468.249 39.2397 li
468.249 38.8218 468.145 38.5347 467.936 38.3784 cv
467.727 38.2222 467.472 38.144 467.171 38.144 cv
466.757 38.144 466.4 38.2827 466.102 38.5601 cv
465.803 38.8374 465.653 39.3003 465.653 39.9487 cv
465.653 43.5991 li
464.581 43.5991 li
464.581 39.5034 li
464.581 39.0776 464.53 38.7671 464.429 38.5718 cv
464.269 38.2788 463.97 38.1323 463.532 38.1323 cv
463.134 38.1323 462.771 38.2866 462.445 38.5952 cv
462.119 38.9038 461.956 39.4624 461.956 40.271 cv
461.956 43.5991 li
460.901 43.5991 li
460.901 37.3237 li
cp
f
470.54 46.0483 mo
471.161 44.8374 471.562 43.9546 471.741 43.3999 cv
472.015 42.5601 472.151 41.5757 472.151 40.4468 cv
472.151 39.3179 471.993 38.2847 471.677 37.3472 cv
471.481 36.769 471.097 35.937 470.522 34.8511 cv
471.231 34.8511 li
471.833 35.812 472.197 36.4048 472.324 36.6294 cv
472.451 36.854 472.589 37.1636 472.737 37.5581 cv
472.925 38.0464 473.059 38.5288 473.139 39.0054 cv
473.219 39.4819 473.259 39.9409 473.259 40.3823 cv
473.259 41.5386 473.075 42.5698 472.708 43.4761 cv
472.478 44.0581 471.999 44.9155 471.272 46.0483 cv
470.54 46.0483 li
cp
f
1.44 lw
379.399 51.04 mo
388.759 51.04 li
0.882353 0.356863 1 0.317647 cmyk
@
395.479 51.04 mo
404.839 51.04 li
@
0.24 lw
389.359 51.04 mo
389.359 51.2798 li
@
411.604 46.0313 mo
413.227 53.0244 li
415.172 46.0313 li
416.433 46.0313 li
418.382 53.0376 li
420.005 46.0313 li
421.283 46.0313 li
419.021 54.6387 li
417.797 54.6387 li
415.811 47.502 li
413.813 54.6387 li
412.588 54.6387 li
410.338 46.0313 li
411.604 46.0313 li
cp
f
422.218 46.002 mo
423.272 46.002 li
423.272 49.2129 li
423.522 48.8965 423.747 48.6738 423.946 48.5449 cv
424.286 48.3223 424.71 48.2109 425.218 48.2109 cv
426.128 48.2109 426.745 48.5293 427.069 49.166 cv
427.245 49.5137 427.333 49.9961 427.333 50.6133 cv
427.333 54.6387 li
426.249 54.6387 li
426.249 50.6836 li
426.249 50.2227 426.19 49.8848 426.073 49.6699 cv
425.882 49.3262 425.522 49.1543 424.995 49.1543 cv
424.558 49.1543 424.161 49.3047 423.806 49.6055 cv
423.45 49.9063 423.272 50.4746 423.272 51.3105 cv
423.272 54.6387 li
422.218 54.6387 li
422.218 46.002 li
cp
f
428.892 48.3926 mo
429.964 48.3926 li
429.964 54.6387 li
428.892 54.6387 li
428.892 48.3926 li
cp
428.892 46.0313 mo
429.964 46.0313 li
429.964 47.2266 li
428.892 47.2266 li
428.892 46.0313 li
cp
f
431.769 46.6113 mo
432.835 46.6113 li
432.835 48.3633 li
433.837 48.3633 li
433.837 49.2246 li
432.835 49.2246 li
432.835 53.3203 li
432.835 53.5391 432.909 53.6855 433.058 53.7598 cv
433.14 53.8027 433.276 53.8242 433.468 53.8242 cv
433.519 53.8242 433.573 53.8228 433.632 53.8203 cv
433.69 53.8179 433.759 53.811 433.837 53.8008 cv
433.837 54.6387 li
433.716 54.6738 433.59 54.6992 433.459 54.7148 cv
433.328 54.7305 433.187 54.7383 433.034 54.7383 cv
432.542 54.7383 432.208 54.6123 432.032 54.3604 cv
431.856 54.1084 431.769 53.7813 431.769 53.3789 cv
431.769 49.2246 li
430.919 49.2246 li
430.919 48.3633 li
431.769 48.3633 li
431.769 46.6113 li
cp
f
439.146 51 mo
439.103 50.543 439.004 50.1777 438.85 49.9043 cv
438.563 49.3965 438.084 49.1426 437.414 49.1426 cv
436.934 49.1426 436.531 49.3174 436.206 49.667 cv
435.88 50.0166 435.708 50.4609 435.688 51 cv
439.146 51 li
cp
438.768 48.5361 mo
439.184 48.7451 439.5 49.0156 439.717 49.3477 cv
439.927 49.6641 440.066 50.0332 440.137 50.4551 cv
440.198 50.7441 440.229 51.2051 440.229 51.8379 cv
435.665 51.8379 li
435.685 52.4766 435.834 52.9888 436.112 53.3745 cv
436.392 53.7603 436.824 53.9531 437.409 53.9531 cv
437.956 53.9531 438.392 53.7705 438.717 53.4058 cv
438.899 53.1938 439.028 52.9487 439.104 52.6699 cv
440.142 52.6699 li
440.114 52.9004 440.023 53.1572 439.869 53.4404 cv
439.715 53.7236 439.543 53.9551 439.353 54.1348 cv
439.035 54.4473 438.642 54.6582 438.172 54.7676 cv
437.92 54.8301 437.636 54.8613 437.317 54.8613 cv
436.541 54.8613 435.883 54.5771 435.344 54.0088 cv
434.804 53.4404 434.534 52.6445 434.534 51.6211 cv
434.534 50.6133 434.806 49.7949 435.35 49.166 cv
435.893 48.5371 436.604 48.2227 437.48 48.2227 cv
437.924 48.2227 438.353 48.3271 438.768 48.5361 cv
cp
f
448.305 53.6426 mo
448.69 53.6426 449.007 53.6016 449.256 53.5195 cv
449.698 53.3672 450.062 53.0742 450.344 52.6406 cv
450.569 52.293 450.731 51.8477 450.831 51.3047 cv
450.889 50.9805 450.917 50.6797 450.917 50.4023 cv
450.917 49.3359 450.71 48.5078 450.295 47.918 cv
449.881 47.3281 449.214 47.0332 448.293 47.0332 cv
446.271 47.0332 li
446.271 53.6426 li
448.305 53.6426 li
cp
445.093 46.0313 mo
448.533 46.0313 li
449.701 46.0313 450.607 46.4512 451.251 47.291 cv
451.825 48.0488 452.112 49.0195 452.112 50.2031 cv
452.112 51.1172 451.942 51.9434 451.604 52.6816 cv
451.006 53.9863 449.979 54.6387 448.521 54.6387 cv
445.093 54.6387 li
445.093 46.0313 li
cp
f
454.055 48.3633 mo
455.262 53.3086 li
456.486 48.3633 li
457.67 48.3633 li
458.9 53.2793 li
460.184 48.3633 li
461.238 48.3633 li
459.416 54.6387 li
458.32 54.6387 li
457.043 49.7813 li
455.807 54.6387 li
454.711 54.6387 li
452.9 48.3633 li
454.055 48.3633 li
cp
f
463.374 53.6899 mo
463.597 53.8657 463.86 53.9531 464.165 53.9531 cv
464.536 53.9531 464.896 53.8672 465.243 53.6958 cv
465.829 53.4111 466.122 52.9448 466.122 52.2974 cv
466.122 51.4492 li
465.993 51.5317 465.828 51.6001 465.625 51.6553 cv
465.422 51.71 465.224 51.749 465.028 51.7725 cv
464.392 51.8545 li
464.009 51.9053 463.722 51.9849 463.529 52.0942 cv
463.203 52.2773 463.04 52.5698 463.04 52.9712 cv
463.04 53.2749 463.151 53.5146 463.374 53.6899 cv
cp
465.595 50.8408 mo
465.837 50.8096 465.999 50.7085 466.081 50.5366 cv
466.128 50.4424 466.151 50.3076 466.151 50.1309 cv
466.151 49.77 466.023 49.5083 465.769 49.3457 cv
465.513 49.1831 465.147 49.1016 464.672 49.1016 cv
464.122 49.1016 463.732 49.251 463.502 49.5488 cv
463.374 49.7139 463.29 49.9595 463.251 50.2852 cv
462.267 50.2852 li
462.286 49.5098 462.537 48.9697 463.019 48.6665 cv
463.5 48.3628 464.06 48.2109 464.695 48.2109 cv
465.433 48.2109 466.031 48.3516 466.492 48.6328 cv
466.948 48.9141 467.177 49.3516 467.177 49.9453 cv
467.177 53.561 li
467.177 53.6704 467.199 53.7583 467.244 53.8242 cv
467.289 53.8906 467.384 53.9238 467.528 53.9238 cv
467.575 53.9238 467.628 53.9209 467.687 53.915 cv
467.745 53.9092 467.808 53.9004 467.874 53.8887 cv
467.874 54.668 li
467.71 54.7148 467.585 54.7441 467.499 54.7559 cv
467.413 54.7676 467.296 54.7734 467.147 54.7734 cv
466.784 54.7734 466.521 54.6445 466.356 54.3867 cv
466.271 54.25 466.21 54.0566 466.175 53.8066 cv
465.96 54.0879 465.651 54.332 465.249 54.5391 cv
464.847 54.7461 464.403 54.8496 463.919 54.8496 cv
463.337 54.8496 462.861 54.6729 462.492 54.3198 cv
462.123 53.9668 461.938 53.5249 461.938 52.9946 cv
461.938 52.4131 462.12 51.9624 462.483 51.6426 cv
462.847 51.3228 463.323 51.1255 463.913 51.0518 cv
465.595 50.8408 li
cp
f
468.935 48.3633 mo
469.937 48.3633 li
469.937 49.4473 li
470.019 49.2363 470.22 48.9795 470.54 48.6768 cv
470.86 48.374 471.229 48.2227 471.647 48.2227 cv
471.667 48.2227 471.7 48.2246 471.747 48.2285 cv
471.794 48.2324 471.874 48.2402 471.987 48.252 cv
471.987 49.3652 li
471.925 49.3535 471.867 49.3457 471.814 49.3418 cv
471.762 49.3379 471.704 49.3359 471.642 49.3359 cv
471.11 49.3359 470.702 49.5068 470.417 49.8486 cv
470.132 50.1904 469.989 50.584 469.989 51.0293 cv
469.989 54.6387 li
468.935 54.6387 li
468.935 48.3633 li
cp
f
473.394 46.4473 mo
473.64 46.0879 474.114 45.9082 474.817 45.9082 cv
474.884 45.9082 474.952 45.9102 475.022 45.9141 cv
475.093 45.918 475.173 45.9238 475.263 45.9316 cv
475.263 46.8926 li
475.152 46.8848 475.072 46.8799 475.022 46.8779 cv
474.974 46.876 474.927 46.875 474.884 46.875 cv
474.56 46.875 474.366 46.958 474.303 47.124 cv
474.239 47.29 474.208 47.7129 474.208 48.3926 cv
475.263 48.3926 li
475.263 49.2246 li
474.208 49.2246 li
474.208 54.6387 li
473.165 54.6387 li
473.165 49.2246 li
472.292 49.2246 li
472.292 48.3926 li
473.165 48.3926 li
473.165 47.4082 li
473.181 46.9707 473.257 46.6504 473.394 46.4473 cv
cp
f
476.862 52.6699 mo
476.895 53.0215 476.983 53.291 477.132 53.4785 cv
477.402 53.8184 477.873 53.9883 478.543 53.9883 cv
478.941 53.9883 479.292 53.9033 479.596 53.7334 cv
479.898 53.5635 480.05 53.3008 480.05 52.9453 cv
480.05 52.6758 479.929 52.4707 479.687 52.3301 cv
479.531 52.2441 479.226 52.1445 478.77 52.0313 cv
477.918 51.8203 li
477.374 51.6875 476.974 51.5391 476.715 51.375 cv
476.255 51.0898 476.024 50.6953 476.024 50.1914 cv
476.024 49.5977 476.241 49.1172 476.675 48.75 cv
477.108 48.3828 477.691 48.1992 478.424 48.1992 cv
479.382 48.1992 480.072 48.4766 480.496 49.0313 cv
480.761 49.3828 480.89 49.7617 480.882 50.168 cv
479.886 50.168 li
479.865 49.9312 479.779 49.7153 479.628 49.521 cv
479.38 49.2456 478.95 49.1074 478.338 49.1074 cv
477.931 49.1074 477.621 49.1831 477.411 49.335 cv
477.201 49.4868 477.097 49.6875 477.097 49.9365 cv
477.097 50.209 477.234 50.4268 477.511 50.5903 cv
477.67 50.6875 477.904 50.7734 478.215 50.8477 cv
478.926 51.0176 li
479.697 51.2012 480.215 51.3789 480.478 51.5508 cv
480.888 51.8203 481.093 52.2441 481.093 52.8223 cv
481.093 53.3809 480.878 53.8633 480.449 54.2695 cv
480.02 54.6758 479.366 54.8789 478.488 54.8789 cv
477.543 54.8789 476.874 54.667 476.48 54.2432 cv
476.087 53.8193 475.876 53.2949 475.849 52.6699 cv
476.862 52.6699 li
cp
f
251.478 329.787 mo
251.478 342.638 li
248.922 342.638 li
248.922 329.787 li
251.478 329.787 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
f
255.87 339.083 mo
255.942 339.437 256.065 339.755 256.239 340.038 cv
256.413 340.319 256.644 340.544 256.932 340.712 cv
257.22 340.88 257.58 340.964 258.012 340.964 cv
258.444 340.964 258.807 340.88 259.101 340.712 cv
259.395 340.544 259.629 340.319 259.803 340.038 cv
259.977 339.755 260.1 339.437 260.172 339.083 cv
260.244 338.729 260.28 338.367 260.28 337.995 cv
260.28 337.623 260.244 337.256 260.172 336.896 cv
260.1 336.537 259.977 336.218 259.803 335.942 cv
259.629 335.667 259.395 335.441 259.101 335.267 cv
258.807 335.093 258.444 335.006 258.012 335.006 cv
257.58 335.006 257.22 335.093 256.932 335.267 cv
256.644 335.441 256.413 335.667 256.239 335.942 cv
256.065 336.218 255.942 336.537 255.87 336.896 cv
255.798 337.256 255.762 337.623 255.762 337.995 cv
255.762 338.367 255.798 338.729 255.87 339.083 cv
cp
253.548 335.969 mo
253.776 335.364 254.1 334.847 254.52 334.421 cv
254.94 333.996 255.444 333.666 256.032 333.431 cv
256.62 333.197 257.28 333.081 258.012 333.081 cv
258.744 333.081 259.407 333.197 260.001 333.431 cv
260.595 333.666 261.102 333.996 261.522 334.421 cv
261.942 334.847 262.266 335.364 262.494 335.969 cv
262.722 336.576 262.836 337.25 262.836 337.995 cv
262.836 338.739 262.722 339.411 262.494 340.01 cv
262.266 340.611 261.942 341.124 261.522 341.549 cv
261.102 341.975 260.595 342.302 260.001 342.53 cv
259.407 342.758 258.744 342.873 258.012 342.873 cv
257.28 342.873 256.62 342.758 256.032 342.53 cv
255.444 342.302 254.94 341.975 254.52 341.549 cv
254.1 341.124 253.776 340.611 253.548 340.01 cv
253.32 339.411 253.206 338.739 253.206 337.995 cv
253.206 337.25 253.32 336.576 253.548 335.969 cv
cp
f
269.784 340.226 mo
270.06 340.083 270.288 339.89 270.468 339.65 cv
270.647 339.411 270.783 339.137 270.873 338.832 cv
270.962 338.525 271.007 338.205 271.007 337.869 cv
271.007 337.484 270.972 337.122 270.899 336.779 cv
270.828 336.437 270.708 336.134 270.54 335.871 cv
270.372 335.606 270.149 335.396 269.874 335.24 cv
269.597 335.084 269.25 335.006 268.83 335.006 cv
268.47 335.006 268.161 335.079 267.902 335.222 cv
267.645 335.366 267.428 335.561 267.254 335.807 cv
267.081 336.053 266.955 336.335 266.876 336.653 cv
266.798 336.971 266.76 337.304 266.76 337.652 cv
266.76 337.988 266.792 338.321 266.858 338.651 cv
266.924 338.981 267.039 339.279 267.201 339.542 cv
267.362 339.806 267.575 340.022 267.839 340.19 cv
268.104 340.358 268.434 340.442 268.83 340.442 cv
269.189 340.442 269.507 340.371 269.784 340.226 cv
cp
273.285 343.322 mo
273.183 343.802 272.963 344.25 272.627 344.664 cv
272.292 345.078 271.806 345.428 271.169 345.716 cv
270.533 346.004 269.682 346.148 268.614 346.148 cv
268.157 346.148 267.692 346.091 267.219 345.977 cv
266.744 345.863 266.313 345.686 265.922 345.446 cv
265.532 345.206 265.208 344.897 264.951 344.519 cv
264.692 344.141 264.545 343.688 264.51 343.161 cv
267.047 343.161 li
267.167 343.64 267.401 343.973 267.75 344.16 cv
268.098 344.345 268.5 344.438 268.956 344.438 cv
269.675 344.438 270.2 344.222 270.531 343.791 cv
270.86 343.358 271.02 342.812 271.007 342.152 cv
271.007 340.928 li
270.972 340.928 li
270.695 341.42 270.302 341.783 269.792 342.017 cv
269.282 342.251 268.746 342.369 268.182 342.369 cv
267.485 342.369 266.886 342.246 266.381 342 cv
265.877 341.753 265.463 341.417 265.14 340.991 cv
264.815 340.565 264.579 340.067 264.429 339.498 cv
264.278 338.927 264.204 338.325 264.204 337.688 cv
264.204 337.088 264.291 336.509 264.464 335.952 cv
264.638 335.393 264.894 334.901 265.229 334.475 cv
265.565 334.049 265.982 333.71 266.48 333.458 cv
266.979 333.207 267.552 333.081 268.2 333.081 cv
268.812 333.081 269.349 333.195 269.811 333.422 cv
270.272 333.65 270.659 334.035 270.972 334.574 cv
271.007 334.574 li
271.007 333.333 li
273.438 333.333 li
273.438 342.044 li
273.438 342.417 273.386 342.842 273.285 343.322 cv
cp
f
279.521 335.042 mo
279.521 333.333 li
281.051 333.333 li
281.051 332.612 li
281.051 331.785 281.31 331.106 281.826 330.579 cv
282.341 330.05 283.122 329.787 284.166 329.787 cv
284.393 329.787 284.622 329.795 284.85 329.813 cv
285.077 329.832 285.299 329.846 285.516 329.858 cv
285.516 331.766 li
285.215 331.73 284.903 331.712 284.58 331.712 cv
284.231 331.712 283.982 331.793 283.833 331.956 cv
283.682 332.117 283.607 332.39 283.607 332.774 cv
283.607 333.333 li
285.372 333.333 li
285.372 335.042 li
283.607 335.042 li
283.607 342.638 li
281.051 342.638 li
281.051 335.042 li
279.521 335.042 li
cp
f
289.734 350.63 mo
289.918 350.535 290.07 350.407 290.19 350.247 cv
290.31 350.086 290.4 349.905 290.46 349.701 cv
290.52 349.497 290.55 349.283 290.55 349.059 cv
290.55 348.803 290.526 348.561 290.478 348.333 cv
290.43 348.105 290.35 347.903 290.238 347.727 cv
290.126 347.551 289.978 347.411 289.794 347.307 cv
289.61 347.203 289.378 347.151 289.098 347.151 cv
288.858 347.151 288.652 347.199 288.48 347.294 cv
288.308 347.391 288.164 347.521 288.048 347.685 cv
287.932 347.849 287.848 348.037 287.796 348.249 cv
287.744 348.46 287.718 348.683 287.718 348.915 cv
287.718 349.139 287.74 349.361 287.784 349.581 cv
287.828 349.801 287.904 349.999 288.012 350.174 cv
288.12 350.351 288.262 350.495 288.438 350.607 cv
288.614 350.719 288.834 350.775 289.098 350.775 cv
289.338 350.775 289.55 350.727 289.734 350.63 cv
cp
292.068 352.695 mo
292 353.014 291.854 353.313 291.63 353.588 cv
291.406 353.865 291.082 354.099 290.658 354.291 cv
290.234 354.483 289.666 354.579 288.954 354.579 cv
288.65 354.579 288.34 354.541 288.024 354.464 cv
287.708 354.388 287.42 354.271 287.16 354.111 cv
286.9 353.951 286.684 353.745 286.512 353.493 cv
286.34 353.241 286.242 352.939 286.218 352.586 cv
287.91 352.586 li
287.99 352.907 288.146 353.128 288.378 353.252 cv
288.61 353.376 288.878 353.439 289.182 353.439 cv
289.662 353.439 290.012 353.294 290.232 353.006 cv
290.452 352.719 290.558 352.355 290.55 351.915 cv
290.55 351.099 li
290.526 351.099 li
290.342 351.427 290.08 351.668 289.74 351.825 cv
289.4 351.981 289.042 352.059 288.666 352.059 cv
288.202 352.059 287.802 351.977 287.466 351.813 cv
287.13 351.649 286.854 351.425 286.638 351.141 cv
286.422 350.857 286.264 350.525 286.164 350.145 cv
286.064 349.765 286.014 349.363 286.014 348.939 cv
286.014 348.539 286.072 348.153 286.188 347.781 cv
286.304 347.409 286.474 347.081 286.698 346.796 cv
286.922 346.513 287.2 346.287 287.532 346.119 cv
287.864 345.951 288.246 345.867 288.678 345.867 cv
289.086 345.867 289.444 345.943 289.752 346.095 cv
290.06 346.247 290.318 346.502 290.526 346.863 cv
290.55 346.863 li
290.55 346.035 li
292.17 346.035 li
292.17 351.842 li
292.17 352.091 292.136 352.375 292.068 352.695 cv
cp
f
298.878 352.239 mo
297.774 348.075 li
297.75 348.075 li
296.694 352.239 li
294.93 352.239 li
292.962 346.035 li
294.762 346.035 li
295.902 350.247 li
295.926 350.247 li
296.958 346.035 li
298.614 346.035 li
299.67 350.235 li
299.694 350.235 li
300.834 346.035 li
302.586 346.035 li
300.63 352.239 li
298.878 352.239 li
cp
f
313.578 329.48 mo
313.578 331.497 li
311.382 331.497 li
311.382 343.88 li
313.578 343.88 li
313.578 345.896 li
308.826 345.896 li
308.826 329.48 li
313.578 329.48 li
cp
f
317.664 329.787 mo
317.664 334.718 li
322.865 334.718 li
322.865 329.787 li
325.691 329.787 li
325.691 342.638 li
322.865 342.638 li
322.865 337.094 li
317.664 337.094 li
317.664 342.638 li
314.838 342.638 li
314.838 329.787 li
317.664 329.787 li
cp
f
332.172 335.258 mo
327.689 335.258 li
327.689 333.333 li
335.537 333.333 li
335.537 335.258 li
330.695 340.712 li
335.88 340.712 li
335.88 342.638 li
327.33 342.638 li
327.33 340.712 li
332.172 335.258 li
cp
f
336.294 345.896 mo
336.294 343.88 li
338.49 343.88 li
338.49 331.497 li
336.294 331.497 li
336.294 329.48 li
341.046 329.48 li
341.046 345.896 li
336.294 345.896 li
cp
f
0.306641 231.28 mo
13.1587 231.28 li
13.1587 233.835 li
0.306641 233.835 li
0.306641 231.28 li
cp
f
9.60352 226.888 mo
9.95801 226.816 10.2759 226.693 10.5576 226.519 cv
10.8398 226.345 11.0649 226.114 11.2329 225.826 cv
11.4009 225.538 11.4849 225.178 11.4849 224.746 cv
11.4849 224.314 11.4009 223.951 11.2329 223.657 cv
11.0649 223.363 10.8398 223.129 10.5576 222.955 cv
10.2759 222.781 9.95801 222.658 9.60352 222.585 cv
9.25 222.514 8.88672 222.478 8.51465 222.478 cv
8.14307 222.478 7.77686 222.514 7.4165 222.585 cv
7.05664 222.658 6.73877 222.781 6.46289 222.955 cv
6.18701 223.129 5.96191 223.363 5.7876 223.657 cv
5.61377 223.951 5.52686 224.314 5.52686 224.746 cv
5.52686 225.178 5.61377 225.538 5.7876 225.826 cv
5.96191 226.114 6.18701 226.345 6.46289 226.519 cv
6.73877 226.693 7.05664 226.816 7.4165 226.888 cv
7.77686 226.959 8.14307 226.996 8.51465 226.996 cv
8.88672 226.996 9.25 226.959 9.60352 226.888 cv
cp
6.48975 229.209 mo
5.88379 228.982 5.36768 228.658 4.94189 228.238 cv
4.51611 227.818 4.18555 227.314 3.95166 226.726 cv
3.71777 226.138 3.60059 225.478 3.60059 224.746 cv
3.60059 224.014 3.71777 223.351 3.95166 222.757 cv
4.18555 222.163 4.51611 221.656 4.94189 221.236 cv
5.36768 220.816 5.88379 220.492 6.48975 220.264 cv
7.0957 220.036 7.771 219.921 8.51465 219.921 cv
9.25879 219.921 9.93066 220.036 10.5308 220.264 cv
11.1309 220.492 11.644 220.816 12.0698 221.236 cv
12.4956 221.656 12.8228 222.163 13.0508 222.757 cv
13.2783 223.351 13.3926 224.014 13.3926 224.746 cv
13.3926 225.478 13.2783 226.138 13.0508 226.726 cv
12.8228 227.314 12.4956 227.818 12.0698 228.238 cv
11.644 228.658 11.1309 228.982 10.5308 229.209 cv
9.93066 229.438 9.25879 229.552 8.51465 229.552 cv
7.771 229.552 7.0957 229.438 6.48975 229.209 cv
cp
f
10.7466 212.974 mo
10.6025 212.698 10.4106 212.47 10.1709 212.29 cv
9.93066 212.11 9.65771 211.975 9.35156 211.885 cv
9.0459 211.794 8.72461 211.75 8.38867 211.75 cv
8.00488 211.75 7.6416 211.786 7.2998 211.858 cv
6.95752 211.93 6.65479 212.05 6.39063 212.218 cv
6.12695 212.386 5.91699 212.608 5.76074 212.884 cv
5.60498 213.16 5.52686 213.508 5.52686 213.928 cv
5.52686 214.288 5.59863 214.597 5.74268 214.855 cv
5.88672 215.113 6.08203 215.329 6.32764 215.502 cv
6.57373 215.677 6.85596 215.803 7.17383 215.88 cv
7.4917 215.958 7.82471 215.998 8.17285 215.998 cv
8.50879 215.998 8.8418 215.965 9.17188 215.899 cv
9.50195 215.833 9.79883 215.719 10.0625 215.557 cv
10.3267 215.395 10.543 215.182 10.7104 214.917 cv
10.8789 214.654 10.9629 214.324 10.9629 213.928 cv
10.9629 213.568 10.8906 213.25 10.7466 212.974 cv
cp
13.8428 209.473 mo
14.3223 209.575 14.7695 209.794 15.1836 210.129 cv
15.5977 210.466 15.9487 210.952 16.2368 211.587 cv
16.5249 212.224 16.6685 213.076 16.6685 214.144 cv
16.6685 214.6 16.6118 215.065 16.4976 215.539 cv
16.3833 216.013 16.2065 216.445 15.9668 216.834 cv
15.7266 217.225 15.4175 217.549 15.0396 217.807 cv
14.6616 218.065 14.2085 218.211 13.6807 218.248 cv
13.6807 215.709 li
14.1606 215.59 14.4937 215.356 14.6797 215.007 cv
14.8657 214.66 14.9585 214.258 14.9585 213.802 cv
14.9585 213.082 14.7427 212.557 14.3105 212.227 cv
13.8789 211.897 13.3325 211.738 12.6729 211.75 cv
11.4487 211.75 li
11.4487 211.786 li
11.9409 212.062 12.3037 212.455 12.5376 212.964 cv
12.7715 213.475 12.8887 214.012 12.8887 214.576 cv
12.8887 215.272 12.7656 215.872 12.5195 216.375 cv
12.2739 216.879 11.938 217.293 11.5117 217.618 cv
11.0859 217.942 10.5879 218.179 10.0176 218.329 cv
9.44775 218.479 8.84473 218.554 8.2085 218.554 cv
7.60889 218.554 7.02979 218.467 6.47168 218.292 cv
5.91357 218.119 5.42188 217.864 4.99561 217.528 cv
4.56982 217.192 4.23047 216.775 3.97852 216.277 cv
3.72656 215.779 3.60059 215.206 3.60059 214.558 cv
3.60059 213.946 3.71484 213.409 3.94287 212.947 cv
4.1709 212.485 4.55469 212.098 5.09473 211.786 cv
5.09473 211.75 li
3.85254 211.75 li
3.85254 209.32 li
12.5645 209.32 li
12.937 209.32 13.3628 209.371 13.8428 209.473 cv
cp
f
0.306641 199.708 mo
5.14893 199.708 li
5.14893 199.654 li
4.60889 199.33 4.21582 198.916 3.96973 198.412 cv
3.72412 197.908 3.60059 197.416 3.60059 196.936 cv
3.60059 196.251 3.69385 195.691 3.87988 195.252 cv
4.06592 194.815 4.32373 194.47 4.65381 194.218 cv
4.98389 193.966 5.38574 193.789 5.85986 193.687 cv
6.33398 193.585 6.85889 193.534 7.43457 193.534 cv
13.1587 193.534 li
13.1587 196.089 li
7.90283 196.089 li
7.13477 196.089 6.56152 196.209 6.18359 196.45 cv
5.80566 196.69 5.6167 197.116 5.6167 197.728 cv
5.6167 198.424 5.82373 198.928 6.23779 199.24 cv
6.65186 199.552 7.33301 199.708 8.28076 199.708 cv
13.1587 199.708 li
13.1587 202.264 li
0.306641 202.264 li
0.306641 199.708 li
cp
f
17.6943 192.638 mo
16.5542 192.638 li
16.5542 191.619 li
16.0742 191.619 li
15.5225 191.619 15.0703 191.446 14.7183 191.102 cv
14.3662 190.758 14.1904 190.238 14.1904 189.542 cv
14.1904 189.39 14.1963 189.238 14.2085 189.086 cv
14.2202 188.934 14.2305 188.787 14.2383 188.642 cv
15.5103 188.642 li
15.4863 188.842 15.4741 189.05 15.4741 189.266 cv
15.4741 189.499 15.5283 189.665 15.6362 189.764 cv
15.7441 189.865 15.9263 189.915 16.1821 189.915 cv
16.5542 189.915 li
16.5542 188.738 li
17.6943 188.738 li
17.6943 189.915 li
22.7583 189.915 li
22.7583 191.619 li
17.6943 191.619 li
17.6943 192.638 li
cp
f
0 177.58 mo
2.01611 177.58 li
2.01611 179.775 li
14.4004 179.775 li
14.4004 177.58 li
16.416 177.58 li
16.416 182.332 li
0 182.332 li
0 177.58 li
cp
f
11.2324 170.838 mo
11.0645 170.556 10.8452 170.329 10.5752 170.154 cv
10.3052 169.98 9.99023 169.857 9.63037 169.785 cv
9.27002 169.713 8.9043 169.677 8.53223 169.677 cv
8.16016 169.677 7.79443 169.716 7.43408 169.794 cv
7.07422 169.873 6.75342 170.001 6.47119 170.181 cv
6.18945 170.361 5.96143 170.592 5.78711 170.875 cv
5.61328 171.156 5.52637 171.501 5.52637 171.909 cv
5.52637 172.33 5.61328 172.68 5.78711 172.962 cv
5.96143 173.244 6.18652 173.472 6.4624 173.646 cv
6.73828 173.82 7.05615 173.943 7.41602 174.015 cv
7.77637 174.087 8.14844 174.123 8.53223 174.123 cv
8.9043 174.123 9.27002 174.084 9.63037 174.006 cv
9.99023 173.928 10.3052 173.802 10.5752 173.628 cv
10.8452 173.455 11.0645 173.223 11.2324 172.935 cv
11.4004 172.647 11.4844 172.299 11.4844 171.891 cv
11.4844 171.471 11.4004 171.121 11.2324 170.838 cv
cp
3.85205 174.159 mo
5.04004 174.159 li
5.04004 174.123 li
4.53613 173.811 4.17041 173.416 3.94238 172.935 cv
3.71436 172.456 3.6001 171.927 3.6001 171.351 cv
3.6001 170.62 3.73828 169.989 4.01416 169.461 cv
4.29053 168.933 4.65625 168.496 5.1123 168.147 cv
5.56836 167.799 6.09961 167.542 6.70508 167.373 cv
7.31152 167.206 7.94434 167.121 8.604 167.121 cv
9.22852 167.121 9.82813 167.206 10.4043 167.373 cv
10.98 167.542 11.4902 167.796 11.9341 168.138 cv
12.3784 168.48 12.7324 168.906 12.9961 169.417 cv
13.2603 169.926 13.3921 170.523 13.3921 171.208 cv
13.3921 171.783 13.2754 172.314 13.041 172.8 cv
12.8071 173.286 12.4624 173.685 12.0063 173.997 cv
12.0063 174.033 li
16.416 174.033 li
16.416 176.589 li
3.85205 176.589 li
3.85205 174.159 li
cp
f
6.03027 159.966 mo
5.69434 160.272 5.52637 160.737 5.52637 161.361 cv
5.52637 161.769 5.59521 162.108 5.7334 162.378 cv
5.87109 162.648 6.04248 162.864 6.24609 163.026 cv
6.4502 163.188 6.6665 163.302 6.89404 163.368 cv
7.12207 163.434 7.32617 163.473 7.50635 163.485 cv
7.50635 159.327 li
6.8584 159.447 6.36621 159.66 6.03027 159.966 cv
cp
10.9263 162.855 mo
11.2983 162.471 11.4844 161.919 11.4844 161.199 cv
11.4844 160.683 11.3555 160.239 11.0972 159.867 cv
10.8394 159.496 10.5664 159.267 10.2783 159.183 cv
10.2783 156.933 li
11.394 157.293 12.1924 157.845 12.6724 158.589 cv
13.1523 159.333 13.3921 160.233 13.3921 161.289 cv
13.3921 162.021 13.2754 162.681 13.041 163.269 cv
12.8071 163.857 12.4741 164.355 12.042 164.763 cv
11.6104 165.171 11.0942 165.486 10.4941 165.708 cv
9.89453 165.93 9.23438 166.041 8.51416 166.041 cv
7.81836 166.041 7.17041 165.927 6.57031 165.699 cv
5.97021 165.471 5.45117 165.147 5.01318 164.727 cv
4.5752 164.307 4.22998 163.806 3.97803 163.224 cv
3.72607 162.642 3.6001 161.998 3.6001 161.289 cv
3.6001 160.497 3.75342 159.807 4.05908 159.219 cv
4.36523 158.631 4.77637 158.148 5.29199 157.77 cv
5.80811 157.392 6.39648 157.119 7.05615 156.951 cv
7.71631 156.783 8.40625 156.723 9.12598 156.771 cv
9.12598 163.485 li
9.9541 163.449 10.5542 163.239 10.9263 162.855 cv
cp
f
3.85205 152.83 mo
5.58008 152.83 li
5.58008 152.793 li
5.29199 152.674 5.02539 152.512 4.7793 152.308 cv
4.5332 152.104 4.32324 151.87 4.14941 151.605 cv
3.97559 151.342 3.84033 151.06 3.74414 150.759 cv
3.64844 150.459 3.6001 150.147 3.6001 149.823 cv
3.6001 149.656 3.63037 149.47 3.69043 149.266 cv
6.06641 149.266 li
6.04248 149.386 6.021 149.529 6.00342 149.697 cv
5.98535 149.866 5.97607 150.028 5.97607 150.184 cv
5.97607 150.651 6.0542 151.047 6.20996 151.372 cv
6.36621 151.695 6.5791 151.957 6.84912 152.154 cv
7.11914 152.353 7.43408 152.494 7.79443 152.578 cv
8.1543 152.662 8.54443 152.704 8.96436 152.704 cv
13.1582 152.704 li
13.1582 155.259 li
3.85205 155.259 li
3.85205 152.83 li
cp
f
3.85205 140.824 mo
5.58008 140.824 li
5.58008 140.788 li
5.29199 140.668 5.02539 140.506 4.7793 140.302 cv
4.5332 140.098 4.32324 139.864 4.14941 139.6 cv
3.97559 139.336 3.84033 139.054 3.74414 138.753 cv
3.64844 138.454 3.6001 138.142 3.6001 137.817 cv
3.6001 137.65 3.63037 137.464 3.69043 137.26 cv
6.06641 137.26 li
6.04248 137.38 6.021 137.523 6.00342 137.691 cv
5.98535 137.86 5.97607 138.022 5.97607 138.178 cv
5.97607 138.646 6.0542 139.042 6.20996 139.366 cv
6.36621 139.689 6.5791 139.951 6.84912 140.148 cv
7.11914 140.347 7.43408 140.488 7.79443 140.572 cv
8.1543 140.656 8.54443 140.698 8.96436 140.698 cv
13.1582 140.698 li
13.1582 143.253 li
3.85205 143.253 li
3.85205 140.824 li
cp
f
3.85205 131.14 mo
5.56201 131.14 li
5.56201 133.012 li
10.1704 133.012 li
10.6021 133.012 10.8901 132.939 11.0342 132.795 cv
11.1782 132.652 11.25 132.364 11.25 131.932 cv
11.25 131.788 11.2441 131.65 11.2324 131.518 cv
11.2202 131.386 11.2021 131.26 11.1782 131.14 cv
13.1582 131.14 li
13.1943 131.355 13.2183 131.596 13.23 131.86 cv
13.2422 132.124 13.248 132.382 13.248 132.634 cv
13.248 133.03 13.2212 133.405 13.167 133.759 cv
13.1133 134.113 13.0083 134.425 12.8521 134.695 cv
12.6963 134.965 12.4741 135.178 12.186 135.333 cv
11.8984 135.49 11.52 135.568 11.0522 135.568 cv
5.56201 135.568 li
5.56201 137.116 li
3.85205 137.116 li
3.85205 135.568 li
1.06201 135.568 li
1.06201 133.012 li
3.85205 133.012 li
3.85205 131.14 li
cp
f
0.306152 126.82 mo
5.23828 126.82 li
5.23828 121.618 li
0.306152 121.618 li
0.306152 118.792 li
13.1582 118.792 li
13.1582 121.618 li
7.61426 121.618 li
7.61426 126.82 li
13.1582 126.82 li
13.1582 129.646 li
0.306152 129.646 li
0.306152 126.82 li
cp
f
5.77832 112.313 mo
5.77832 116.794 li
3.85205 116.794 li
3.85205 108.946 li
5.77832 108.946 li
11.2324 113.788 li
11.2324 108.604 li
13.1582 108.604 li
13.1582 117.154 li
11.2324 117.154 li
5.77832 112.313 li
cp
f
16.416 108.19 mo
14.4004 108.19 li
14.4004 105.994 li
2.01611 105.994 li
2.01611 108.19 li
0 108.19 li
0 103.438 li
16.416 103.438 li
16.416 108.19 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.1%%For: (shane) ()%%Title: (masterLogPlot_wdSensitivity.eps)%%CreationDate: 9/24/12 11:04 AM%AI9_DataStream%Gb!Q;l$Dp3Y4-W;g]Op[b`IK$5Uduj!\LdUKar3:.]$]+_clrn5L-ZdQCXEhKOI#jTC]3u;+MZuQ6f[sXk<$d:R:&/@,0((rfqXR%BdZV$Saf\%),!@<DKgAFgRIMtKTetW"ms0+JrZVGa`*cHU?Dn1S;:$!HAnJ<QD<;];4C9@^%o;p),=f8['T8"20N<7qWL\tg$B0'%PJ<[a@B9"[E-(44G@<2l$'X&@[;`"['O7E$p\]%cls;86mG9D]N%t*JoGp<3Rj1`8.XWV1cc;U8ZJ2E'R(_q`#i2)i%JCflYP/e?%e."eOcrdeo<n-c<SQ(u9V'lQH9sD`APf@(/GVY,iUaS9hTUjs&gKo@`?d)]3_.<K/,A8%0d<+#EoItolWC/`6N)FZj<5+8B;&=4&%?um_k3>9LOr(l`1D!V$Wkl%&A]]opFMokmTFLX6m&5I5O7=FZDe9<gi3"n,9Y21dd^"M4dYWt@iQVunLb=T0%`17[9'o"<u!epZL%Pu#i$d@0`T$T.:8i=^Hn`gdZ[TlI$>rq'fD&R+JuHJ0;s-MNn]:bp1fNl@1f)A>ad)2TU6?kO:Wl73ei;:-5O8.Rt9k9[np)OhW`%Xm=Z558^:sPV\Pua=*?dK<?tc/E9Ee%nq@1WVSh*rD0@[*F::CA!(LO<J='L%Rl()lNBN6$OPOs2#qMK8LGGP,bcWHL4%4S(+mI]%.%P=CHiJ-Ks"$FD..f/2L!N-g5#Wp*//4n\d4"pP7cA5A$?r7BE`Wh1C%>4I!Nct@pm"B8X$d"m,nbeP_+^\u9e$<`;Wo2bSOu2K%<!lgF2u&&,K`\V2']@)"!U^X/cpeT)Xrnu&n?a=RI6f"%&;ge-KH>`-gk@,Pqb^l@i"K9[TAUAd6(asEP'bP#pk1QP,PZq@9:R-N%6D*0LIR0%Q'-IlN&]i<Dpk4+6?apGk!h=q5"@'8FI_dD=&HoTjN=Si\GYGV<\-/Gb8^_ZH4e\Fn7^*!VdMPP-a?O>ArI[mr6q3:1%RbT,4#(N<]oM6B6_A2VmoFF.E(\E`H5C=*di<js!/*J(&P#3K&6MO1B"%GidJ9"51UbO+d&["JO_Dd<)V!!DWTUa@tn.NgjG``ci%5A1/4P9^ff#>^OiPIo1+pk2[9^7g%0-feG*KJq1=LKfpX8TtI'#R2L/Opk!h,"W_M:*bP7Jts42QkI+Hl3PuJ?G\Xo>T+3RDhN:I%-"/1Jan+RWq*uh\RRs<CN&fi+JKWm#7",kf-dOd-P-uj/-1OQhI3RL1gahq#:Fe1GBt?(B&snl'!/`$s_UAiN,[)L?-+j@5H'5$R%r"&c>X%80K(l$gCrfVc9)#:<3-3"tQGar#9rfVa^97AC@aZnjHi.&kEKKCX^j#D'Lq+L_KoAmCOQi(p7H(J8<rfVcM,5JA=-3#Ch%+0ju_G48)CQ2HqsOh[iE9WSe`$TuB7!gej%K#"TA0CWcbI`$Xdcgl&[>nc-'bEMtb5DPa+6;PXeX6/$@s.`.<C#!1jqC4<.[o$q9%mg91(2uH*G$d^CiJ6u2-iKHAom]!t=-TnO/>5bW(<1jeo9CVUuN,\$rPGaE!P;0Is:ATrrc*,Jf(S^JCSeAuVRbpXLGq-R$Vt'f`%qk1tj3dEajIg],hNMKAndUjaXdYM'+:IYn*k38ho]0*B+*/uYj#R7P@.J+G4/`b;dA3]&^_lDrFFQNsb)"]m*'qZ4;CR.V5d6aEl%f2r(,!r._:n*!N(9qj.00$4OLGSA.*<ESt1<^e`KN!((a=_*f477;EY^dgjA`hk^"^;I@'SDiBf\s<E_it<&_HCg"&gI\nJbC/QH%cQ'hK$SdYjE!;nj_;@54_,TO<?\reD57q/ML<CAemBe-Y#TA^&kMU906Sf3]7_XuDTU4mB,l1,qhr8bgYRnt-nc7\NPU#%+!Zr.f%c3*OqLsA+F$'`>W#Ykg&JX1cfDYVKh\;#E>!C$,u>#]Qt.r&XT6[76M1+LI%9thQE%FPCN1u`_D=&Fsk-)8UiA80sdOM=m;oE=-3%-_j35i^c`#1S-Ft>I7N-.N-cM6&PoV-L!Sh"'R!T#aj$.,%/CAMt!6?DU=ms;[p;`aXi^oglC@@aNIK$9/Mf4kioaUpB2i='`$!F%dLHhmXsFr$rZcn5DYOE!Ktdsh@%R`gn<@HD$3IJ#TUc&pqRt`HR/Kfm+p%e]/Lo<ZpEE)n"d,*q?IWIAk"H,15ed\[5PT\"-YmN\%`c0S]'I41,PDZ50<fn,a]\Ej8R^CLH%(=5"SQ0'KAVqkbH8!H.MM\T,$!mts`V!C7\5AJ!@ieXXNhUFMenUQp59N6C:GJXkYq<Jf%Ch\_iKBs`@Pa#bfr%1\)SjCp>nV#+4Z:r33$KV[(&/\G*3tn#PW0e:H4u?_;;;\ktdK:[HP3`hfdaMs5M$`+l&8=G!=!ZAu#&l[O%aANg!RXr5[MME>#hjF,)&1bnE.+XOq*k>BMbn$I:lqN'o%D9N?00P0%'ItpY_(/HM+>urG7rX[kM1(6pSKPY)A</!lCeB:-c,?"4%kS^V?#\lZi'@B?jb[TiT*9La6>-K%j\1qtcOTf0<@SrfeGol]DYDaci"LW(iqLt_.-??Pn[)Om'+60`V"E\(59--mgNrTTi0e>jM%,PHeco*#7AV7)<O1lQt=US0+\oo^+6d8>]KcRVeT0p=$$cbk,KV5!PP8O<NGbU:Ku6p)A3/^b%n1IO#F9og[TK[`oa1DsVoQ&N2R%ZRLP\.QtmNGSFSn;UW(+<(Xb+]-d@U?jd*7]/_]?P!=K0#cu9+<jgKjT$q]LH'r-/aiUUm4pcpf&<Eu'(S=01OdD4T&fJ`rWAJOu%WE9aH2!P&kHPLd3OSb"tQ37KG"r"Nq@XU[/>;V'&TRfBC`&P_#PI3fZ^DajC"WA2<'3[hn85IW<_BR7%U;X7PEZ%kH#38pOKfG35%,3.*23SZGnL175T/-<(Xi*0WYM&-AdB,PN,Ofq295r=BAf46B]>JZ\hStfTl:I+ub"N#Bs0*Bs?R&_[;-.)i39;!e\m-2No7u0j4%_@PXI9@cE"(DL3pO!M^kc=F$;?V3*SK4eT14YBcgcU&=7_K"!S^kR8(:=e9TatI.FILGZrP,d2s_\gbLaO<n9egI_n!EqdT@2:,[%SjF1VK?-2NR0?"2A.FU:kTlq5hiNK+ErZ<T#5uJ<:U">FMX?64Rnb57SA0>QZq+<F^b1On,IWnH,Zt;ObbYYDinI(+;4/qFaKhXN%-rC)C^(mJibM`XiRV3S!"9d-dXDpL$P%,%Egb28rq$'FDSeJ0F1Gft4ak$R^*on';#L%3.el>9`+TF_s$oA2f5c\AsD/>4/^duls%fi2sO9+m/9GTXneK/c(d1Fr0Dcr4a8`Zl.]-W'seDpaJ?chYM&Lcp?0N&.!&[Gm\^?5hc@jpV)'_f8(<r/5g=-=\St/='Sk5*]bp%&fm)HUNO"KAJ+K*hjKik6Ud8C%k&g6!;[%)`P9JP`0.B75nIZ=4F>EnM$"aW/1AeO9L?#.?us,9";tW)hO%mZ<lQA@4cVW,;1U\s%!4?L97G>/:7;7nV?M"[EX<hNiLpKOOXTG)PU0s0op^33]4O$l5LfdHl_Z2cM+\)!hVa-sgkOT5eU]2/N=i45j8Z2fQiL,p6mg57O%2Lp&H,/#85J[d`e8(`D1D1biK8o9g?KVo+]Pt23[MV9dE%Z)MYHR"LZ.q_p/lbLRrAs?Nil?PkM8T\>$btCjMXHAI]ao)r-*aL"s%&%2jCfl&6E0"D#q-,*"k4IqSH`[IVWr'],1dL7JNW26!USDfYdRCCnJoBP25E@*Y^jID=,-K7)uInM@2PR'Y!9[UNHY@uh3\:hen%U=U__&WAhB#`;EZs";9BlIP+.3n^8>V!OWFNoERpY:4_(dJI[Z<U-tKi*PRm5F(kDP!LC`At9s-nu:qYfmA$D-qYi=rmOt-1suG'%OHaQH?Hm[_T9Z?Oih..5.<0)gc$)#reMm:FRLNpb=!HM?er=3?`%/uS@S+Nsk_^44b&[fM<qU:'I$8)DoP$`c"`'!.]bJ:NXIeM%%OmDR<Yncfr,S++-SOe\2PXLS"<Q/#cH,?mR9'RFZ2R/mK>g!";8U)MMbfR-)%%/?1du5iUiggpcP'c2EV,Y#Kqfn:SJ>[(GAh,)V%7BrS9nJ&0l&4u>pD+SGkkDMqp7V3NP/ekWJ]];j5MjBTTGg^LG9.J/8dPFdmK?t"X'*O%LWjo1LeMp^46/Rme%QpY8"u;$'(.A'm%F@)dV4H1d?8DKMIOLW:Sa`38Y*j5XmUb0^6JY]ProiN@V+!Xh8>o\&s<s&1uR#GG=aB[H&:n(16P<QN)J&ccu]u>"ap0Q\7moL1P%H8(*@&<88g-i%'f0%$fLCpKS&O$>!%0@uc%Hd5f1n`@t*HfOPLk7k+^T2+q[\lp-PeK`\_XhiM"$*Q(9*A2d'Fo/f&=eLPh$d,sT%Ej4c0#?:0-%Zd#65?lFJS;kX$.+>*--'Kca``Jl4Ig:uPIUIOd-CeD],W="Zib",K3\75;3<jTs^DV?k2&m,&Ze"bacnRjpE*pUQ%mVRJJ(q+$>ja$c&qJ/GLs,>ZqiF"iIUeu92es\/pSRJ`$B>3ShejJJET9Ir!`AW+O3<#s;S4lpNb#_d,Y4J>ERp(At@JUt&]1>;n%4tCH>N2EhkcrpB`9m`8_`Ku*Zenp65YVg=CSG9Z('$LlL?Y%Ki-AbukJ]?T0@8r`1:rq?;VT9e1HFNZ*m*-Q5b'<LO)#nQP&P;!h%65@%GNI&mC,>oVBVMOQt?-7H[TYeer'9,MQ<&bdl,SO&-[hb"PCa-ln03"0rZM5bOJ6Ok`F84C.8A"LBkMmZVirXZ)7[O*t`giC@%k?#gZ79:RLEP'8o,=8tkic%B6E2()OUcOpn)JU_,pCV>p$WAmV1Ch%_@$?G%?4(h48c;Ru7]A7UVAM@cJA$E9AM_Jd"Q0`?KYi4r%0R=1:CH%H7'^_I(B6:Ph*%kR"$'b16_LIr1gC:+DCf=&t:lTT).A<J5CXo`A)YVOrKP@Wtm8L(C[Yqcrpi"3qG2?EC;9R.)8E_t:%$WR=)4Tm:k`!s.05VtoI&aKp7rh"EQ!Rb71!A;eMm5$*Gj*O2jN?eUT%6D:af'EqH9fjSF1lEOKMGQ;ta\H#MaJZB$]Ji3$Fn/UP%2?bqY,n*s>cl!=jcHZRRn6aHYU15qoT:elLQn0&k_78Z5o_u8&f+JPSjJO@;6D<Q)W*B,LZPJu;B;*)%b;ktNgFY7AFF'tnBP1CU%b[<Vc%GoAgppJa=`<bJ%q/*<hS#;dC4lce%@b?<_@u54U];R<ts,8=r+4LO.T1ihC1eMJ4?S<3oeA)tb,PO.Y6pa&.:QYl:mef@i%#@6M?n8GRuM0M-$=1(I\6@7.LFj][e&P$Nac_]HprE6<OU5q)b->D>&;1W$-F;(mb?IpO/E_BRl&2d%F)bADI`U7-]C(H&O`?0BT%,Vc$aZEiCJb#rS@qo`"^\JLI/1j"$YMC,-]S@6"7SKs.to,euIoBAXrmk*VGO\;c4aPH)'9J4<&/#\djEodF[F`P[E7$a3?!Db_R%aQ]-:\JQoR/ObP1;\"ufhWN'gGH`'d`"/`6]CDOMl(U1M"qdCLZNOD70uk)*R%?^;4^M0md,Tj=#^,<;UZ!'G%NthY6$p/(PWZh-%AhDHrT*DP*po7AcYJIG)lfg6-\dKU<5?!\)hW+/(rNFdgIY.>G0j*9(YEl7mq"idAh,rgK8BG-.l[L@-O?;%"_3cB$ZCq6`3?tre%P@/:_YP%rl2RJIX+lP[97au.#s4"1F2#KFUK!s`nXo8i7BQgg/phNCm5HO(>ja8d#rDT`q^WDA0s0CH@BPLn=s#E)5cWf>dJnp?F%bcWr)j*H8iq(ErRs+6Q^5QC^9SrNcfC+p_>3rdrOEL]dW'?O3Yo%hReqY-Yppp)]m@`/5I&WXk@iAd<#XR"D<Dp\Ni@l*23s4MkC%_38#Wg62]/<NEgZ"fX&]e$[_=rj//[MXT/Uh7mdZS,[SCj>R@Gl-1;3^%q8,1&GIe=._$VSK<5o_LHt08!DGPRY4OVdHVooBNI5m%448*sA_ZR-PH$@JJn25ER<<j^,"lZ6ECR)X$dENlSRWO5PROO40ZG!WaW)sc=X6pF=VSltSQfZ#e>Y"S[K)08Js^5b<@:sQ,rnG`%P2oI#Sn(1Zl:e-'\OftkB!(J$Z8o/O8$\\s"JdAY8KOlu?5D+%i?=^udm(42"gkU<X4u_:Bl)(Je[F(=p:.9N*ijQTRb;9gBtc%*%aA_EX[79qeA7\.`J<B:l45:l.7P.0blP%\sXZOF'\2,!ITj9o1Ec0]2(@F)nai1"AX;dbTJ0D$PkY]5n1jWMmftTsObbQ!),;h$h%b8%+7_I73urj(5F06>jErR"CXR0jYJM!6)OC?BU!!><b/%Yd.Dc_)Fc$l78)<1&L]Oc>iRH_2Fp.ehAUoP(A`)iR!/CRWLIX(#k5%ik04L"n`YT`=3F&HJQ^+B6]6f.GKguPH!rX1W9m4d@0iRUj9haq5?1JR;8e1d9*:"7U$VX2Hm/\2B%e*nKQa/:1p2_Z'F<Dk@'a5%O>WD0&+Mc@$n\QNNDWW>eQQ\_YA&6Y2_N`4)R\qd0ghn1BSD]D5MEC`=oC.33:"lP>4&/G30'J"X+g/U3TeU8/?OMI7XqLUT@.\a%q!-*T(d=LIk/&)i[-<bHAPm?l9PYn6W1D'Z^q6=7>,akK0AlXpethVJs)IV9_-]I0V6rY9/&%4PERdoqhFL@s+X<Zm?J2\s8R^K)%ct57iNR6/?VM86'rUbZpr$@%TVQK!Of!$O<>2.>3.O'kL_p0>3!QAn:j1,mt;4GO4-nf>)>5C8G?<GY\>M"!R`_<[u7O/WLVAU#a%2Y1Kal;c?dE"./DonJd0XZZY3b-K.!f131*?WR+0;`\7C,q+[06Q-AN9-W&6i5+2t[CX%SDf0!UVSkME[YZk^OH<Vplte@3S]K9c%[)%r?a22,t%H\F3`soUQ92FG3K@/`1$;?EOEnmp2&9-sdGV#u#.oF;YX*%G[flTYT]m&F]f_Nm0UQD7Y5fWE7>CX/c^%e+I1"I&t%WF;OrL5[i:jBj.P9et,]*F;dN-c9@'`sS8+Ba+K`0pF"!m)_m6e/Dr9@q'drN9iY_m/lI*A(sCGm5`qj#T5Pr#s)cYk7-@7O=I_W%>t`kKMl1%8/QEi4)`O=/8R%`MB/XrXf5KNPnnlM8WG?)_#BkIc6%?Pe[>0J^W"[W^CE'9AfWndu:'+9QeKSnHJa<Xi[<FrnCFe+M%iX#^'!40ZQjRnl/cHWr5s2AZW:n!#j*iQRI(eLUS*!Q+eprVE'ZJnq'N4\DJ_%[bMAAg=L6[<g5A_IjTS9Z^lGa?iH-3`'Pq43if%Ning:&2S8]$R&`dM/S@h6fJB5n\+a-5Qpc&EXIo,]C#8E+\o=ZM*^%DHW]8GC]#4[ZI#$nOE$'-Pcer[QjlM73iqBU,cIBS@>Zno%A<FBKp!6h@0SH[]FP=&:;V\LjBT9X+fk.UQ%>ok]\@X@@,P=52c=4[H^t1EF=sje:D/U..Ct2ILN7B8mJa?#KL:@kJ3c[B1$NW89%\+&I)[CMT$A9OruX(MU"e;mqk*`Shs[8d@/di(YnisS;R:8gKFiMfbGG+E^E*P'J1^NsDQ]_*'LIV\:4*tFVs4Z&Qe_<a6fF1<b:%Aak;aYr1l9RKan^V\[pWajN1<hPkQOG4n11&7e%#_"Coa1$$JWLk8BT9R_)BR,hLG!(<aJ*8nb]b;jD;JPELBb0a%K*O>9Jk6o?m%+7ja6;nrr\A&QqEU2KP$THDCKbOH*ZW=Ral<1V]MC-AE9(7KJA0OtW<q81ST&6%:ZmH7b.E^X=?iucBQ<0,^]]gno/,f?=m<$W\m%BMHTtg-O&2P#3)0FITp.*/4S%;![:f-L&1$+:^R?2Vm+FoW7M;fGMAfI'0q42AjQ08@dP[O;DE17u+d2!mZJP`3t+"rVG^$GP)nE%V=o,mX-Q_l!,QMZ2[Q^*n"ei';Uq`s\kcA+'Nm.an&f\SG27l*A;$JR^F.)^=QY]>+0/T.WD0!`:H:-;iOk\>-_2p_>gLc:Z'&na%;+%P?0Ni5YC[4K+Z``/"1@E_"[p^YD1Z2<ie.ZZS=^@,no'ciOh^hu(0GCe2$?RdhnVIQWHh*L4bHGts2)lJn`!dLU<0,Q*@BE5e%T1,G"C.*0J+AZS>FDJ/bgfR]o:mtM93T66@_e%mdnZ-X2$:i:<4(ue*>OW`'c$orH2DUa;Wt3Qneq7\1#Das4+.soRqlPRh6reV`%0kj!kWJ\tM1EID(OgNK?dAsd:A?]J+F+Ts^\UGb+,/AIuDQ+EO=dG&HOf2J55&MW1O9U9:(XC?jEP;[d*,`dAY)f1WR>4_e8aA*U%&O!i<j`@cVkUYI2].O4fd-E+h>2f9SiiZN[*2[e$V<hd[/7!\o>ioYA%P&6]bG:Vf`==>3c@>Ha+E`o1GmjLjRG`1YRobu5_jrlg%\n4j8Mab?e^8^6MZ!P*t36cXAE7iWH5um;1&O)KsghHJ][,A]+o<G2iO;gooF7-]Tp^1OFLJ*2Z*BiJuLRna+S,]9:g4mD'f[M9q%J+NTT2%&;hF/8)El.92&7sN:TkM]9g&%\*Z\((@u\1t=C&*+`#T<AcAI[D'<VEaZZMo$;-6u1HFEQiXjl>J:rk'8(g&BXO\>Q8Pl%^)d7EkM:2\5*Yt/ip*5T0qmR2eQk5kWGc^J;s_G@]S3QAqalN`7umcJX5HJj=7FuOL#17M]tZQ)3pC`i5O`M$."543#\KN_[+O'i%kT`68]BJC4mP@XP(3iu&eb\ehd-o/K>^XB($7GSO3H!XBMuooD-P:OoE]RU]aS[j:brY$0i$V7B&3Kg/r#W,&p%6ml.+M$&$BZ)B%?i'?C)[c<06aels4_RmP\\`XSn=^[m`TLo>cCYc*=gg#0$Y8\;cY98)pkln"a)9D#Cr1Z-6h6al8DK/T:YGZ,0+egco=eG*kh!^F%517Rn$a.:o%'V#8`Z'YaRlK2&qqsSk^B_&27f8Qt-rrn16Ep5NJ2'd\*/X).(!(!F6&%ViT8IS/:,=9Rn#JB0OtsiZhK;"7@R6"E%(GZ#p$3@O.oG/A<@ea-^Q07$ZX&4[p(/$b9^,oSPrsnOjOihUIeaa^A'CEE$<6bAda'BMP2?'pGps&cOVY^jI51XP_'4sES\kg:h%3cL^P4`]-Us8DFn(jm\T-_DW-?RU<uBuIgR#KttI-ORRurHD6"Y,hPZ_#(\X_Ae?Z7/#$l0;d]t^tF/%QZOXF8@EOdNPtqM\6(:`%];FViM@\-#4O.1EW&i@slb^Nt/j=F6IHDbq``'`I/rE(?o8sW0,TZkl+?rH2l,QE>=nTR&"$n3qlta>R>XEj9oBDuQinc>%/2<R.%o]/C/ITF<*Q"`?8^8&.G+[jM6`:>h:'>2@a?f<MTqbmo&_h')38-,.mYV>`Z(F1hmP\P<!\p!9foY69)p7ubRbHXjeK745Djl*lW%p-GYp$FWl&6^%<1<T*Q?NQZ2>=dX#_cW?T#7b$F`Wck3cqh^Q7aA>PZG.B(_MjiS)%8R*jrknrFV2p_UXn3"oWq.YRq)Fj>KWadK%_$STPq]JAN7m<gLr:cpIaq)Pe'<^luG_A=]!]#:?0fZ^QK]<X@bh[_sH-g')a8&,rqF.K^O8nj:'8YAa(U8S2qo?!Q_@_CBCEk=i%qPTB^i'7![m-B57F*Hd#G/rBTj*@$i*elH&U+$`V_P5hX>YpjdO*<Vr1*tYTZL(Gsrg'!#BJ*."CRSukMr)q?#A'd[h*mLn?*J`F%?E_(`5PYmN3M1dFMqpCPkNV*tRB(gB'Z@U4mN\&I(W*,ma$$^0e`/dj[!_'%b=519M]3m&L+\F*ZVL@aN0[X3,L+HcF^`M"Q.@+$%Z$=Pk(%8)W5.Z$>6?bH\m@nlp6JiijkZTL7^..kgp^)UBh6J=j=Rl(mdY$H@RkIbdc\P@i#RDCOCau*$B=I*Z2c#luNMco;9HH#g%_nfGE]H2``Gkm2ST.Vcp6V%:<0GHnW?m4@E&:l6:^.thf^i6J2(3j$/,+2t)dV;84%>'B4npI<\qI4H86&k<Xd)Rr?AgKq8IEP2e%bhT.!5kt09\WWVuE=-=j(@=@)&+-4rTc41R$f`^.bX-u?c(D<TT/>mWm?F52?EiJjk#E<nqI4).E"C#K$)2ZGo+T%D`l1>"/B$Pi%<E8cc&X?@.i>[<dLfpOWQkL)o<.0M@L.oRlU$Au*5ac-Y?DD.$HnksZ2(Bmuh0mR`O9.OroJ)9s72[]EW"Rqf7+*&p_FRZpKnRK3%!RsGn;14XJJbtqBHEFhfQ9UP8.5E4\]^cJ._gZ#E0uQF'Fr,3.CGOiA-*F(_\3nUPdSnJMf(JWUNVgk#aE`(@jQV.Ll3S]SNR;"a%Y6lA<c*ZF"LX@YBp"JZ+1u!eGOQXL\j;ng"qLuc?H`l#sq)p''RED(V05BY.N8!Y)4Q(/_`F@PO"r#/R6bYA9qUNl>0?P94M70A#%gqCat.XWgdTD2%?2m;XGrk6A.Nqr!GrGC+T*pbR>U:"))3-Ii";8`-%kX1a$mm[e7cR9(4T,'N)7O4T31*KZQ8E\`U^?7/8(#K?\%V2JnW@>sE(]d0d]Tpsbm5bTXF[],rSq'>C]$@p/6H7Un0>i*265Ss!UOLH9\g*J_`&Xn6JZt"&a,;^"G5$:3>cnuFkCLZ21+!j6F%%`>WY3!OTp+43<!]Z=SA<oK5DlMjmqJHKU8SgqMEQ$gH$&GXuTS(t>7J)bu`@!A!L.+,*sT@C+O(AhpB''@NTfp9K5'NkFr7.t]^%14)6e2Rr(b$5.QYSO>FP6Hk#g_U!$BiKk:PPTM7Kce/-8#IoThs!j_UCVKH$mNM87aZrb!K>%L*V<L9-PmX&"Y-_T;-:(8D6S(of%Wt07PoQ:,"mbFC>1V#SK8rQ^grZ5P":M`bPcTM.G(;=*[BghIf]/9Af@FX*edf'*iAH2lX[Ek5A+DD)ihXWnTWCscF$TjXANeS5V%dtK,<:?7+&nKf_R@>20ls.N7/09K9jmaNXV,V+*RGttZ9l:(]LQE)aSk3,D_FP1bW2co[!Lpa&u&)U6Ha-1"jrE6RE<-9*#QKHf4%R1?R%Prd^t`p@Zf+t;SbZ`guCqXWSR,<2CB:-Kf3.o;k;_RU$Ioe^%$a-M".%c5H9RPB&9j&.7iOF3f8q[F&q*/bPa\_4ef=n)<?%0k@F.:j`rCNm[38.gYT-f,+'9R`i(q`jpko^iB3$:`l@P0D1=d>\0I-&fB^AIkgPE&/e];(frFb>0?]B!G5,SR07_mB0aPUXOH(*%P'"(^?54WV]dOSbHklqX5m">!TkEFN'RpKOLc1uT("aHAR^ja3NRFXiAVchOl(mVPl+X?(>B#iSh'Ks`>.Nqhh,,XM$(pql`T_"L%?RR"ZaXAucA]#c*5dG#5Vt"ltj1$K-WEbABLZ)GU!NhEfgYm)bN)t5FfAc[sq\^"'GNF;FDdI_/qNBqM=l%#Y)f['E%WbC[fT&''%Zp"o,fZuO#([(+!+*gKF_r\8.S\%Hd2A7\9MJq,6GN>6`JAM'R'fuH]Ko:4T2otn[,`+/sU5pAX11tgOr:t$qS<)PlL:J7QXj>f]%!WpddGNkC;s3TSig/T:0b%ZMnJ$/Xafso!qOEJjuNJL@gNfWJBqr)OYs$Ze-&!KLLrke!m@cp53II'Pth*4FW;?nSA8+eM;UbO]_%hTh#[J)XBi]tmfFht(csqkM+s``tr"gik%[<<5O9q04,(dbOE'W:T1M7Kam\Y;emrq>L,W*dDQTO\6MO"MS%4)g+m(/fnuA:L5Ep%034)#rTmPIjBC0rV"a$K_0NE[<W?T+$r3C-A/XDa=-!`mV:!0KJTfq6KisP4_`=/Y0#*2eF-_&%'s7o<B0+]W="e0gBB1uNhP*<]%rMmLt&JPsLm!Y6^girk<?jsnC5:_T/WUO-;nAB!GEIu.qHolH?TCn7:@;p0"7tMbnk/Q*GM3/4_\:Dq3:HHtSj_'8/Y1(?^mNb"s%HeorX)/jC.8hIk+k;`1CHc:K34sItDhVqYXcd_^5dm3O(>EbP(?2G5S[)+$!9DI\.69HIWls(h_g!`@=83g';>d;,MWE\^I^@RsU%F#5*T;^#%C4qn@ZCL8LNqR>R];u3"W7=I5V-Ck)tGMbAu#oS2cU'=c[_h24jU"@U:VmCT;QX%L-A:/hg<_/*_?ZpcggcR0Q9PJ`3%$=qgf)9jhL:FAk^TVBM((?^dV^Hp<<I@RqLCb/SjZ\aSd+27,sEp9Xn+-go-4rT7[@9aA1?=\3Wjd7M9r=PLs2!jrF,@A-n%uJiM%R$o&WlQoneS'Un<>:=*28+&GaMp:/WkW0YiQ'[sB1k#<bJZ!TVH]akW\WNrDM"%$r)%-)9c]Lg%cf_JR-+Dg4jCX0c$iY3&$QB@f%$I,#f+0=il$AHg4W1lIbquY.E$]/!F@L5PchZJams*X@5XLj6mN)YDi?p"*YEuF>$i'$Nm5]HN#2WBkfA_nP/=9aui:g2t;qRsUR%I!5(2]V<h5G>77q.*OmPa^qd,6a\O=D@lZqNMs?Xc%AfKls6^6`C#n00GO./(>K0/qBdm*_`?sHW/ce,p_[ELKma0Lno/FD;F"a=%XDnpAdqamGEP@Sm"5u]*'@flc#,5cXD&g0(BrXYhagd]E^79SK(.a9$@ub$DKGu19+&oMoSAk;/H29$K%Sjg59+XB=202-tE%$#K%J^]OT$Pdm4XRhl&ZFM2"8r*kC$!:G?rCa@2\*;7PAg[7OSV"@&ql'F33;q2-n;<1(VX8Q39k?G%%pjpV+?-f=Ws>[<LTjko5XC&&%601rmrKB@`"MsZQ5"%1Yp>kAI`mpE"bj%S.T)nf!;!@"2BVlXoKTAcMb/.tm1Ui(]DY4R!S9dn72u+h"P=VV(Ss2T3_Pq;%3.?*(%[Q_tI^l6W0Qk:*m]68Aja>N_n]/!M\^nd7TSD-:;UKB]+0m)<OD,U;pfAS>e'lWqX5aF!Jn04@ANn=6NpM+r_AFR6n4*eM,D@h..%^re3G-!3:DLeCQqlBdXNZSIH,\3,`SfUjTJArUMR31;,#p@ZnO^=J=,%s,m!HX;W("?YQmQ#]FRDI#%LkpO/Dk?cBW,VJN7&)MO9%aK'77(9[H.'?jDNPKFL;_@,/hKsJ-321@PRhRL%X:SJCD`.M"R?PTc*(n)7*VoToKN_a$WoRoHthCOcKkS;1-nP/.pJ.s9[ikig0%rp!uHaLb!=gXjJNZ8>pM>m@cteelYPj'FqCe*X/kJq6HDDf-ZE/9VgTk)memN)W8B;NSHQr?GpFk!EEoTFPuT9;SOsj/(CGE"@=\%IQYE+LGE8C6'<d]CqYY`'"s34]%cU/OQ#TA'Y^.p^B.K[:",I#ji$-/V@+&o?TN>QG7(GohEQg<Lu\O-H!Z^[9\cG(oXlf,JST8I%;"t$"Xcg'$=aOTs+6A<o00*,erP!iqjk,4*AB\>Rd;Sg,e<pVs`kb,\"_&Pk_"t@a<AnQ)^nTL@mLpe`DOU%ciTm\+EYl\JNK;(&%:(5=Y]AmcVeW3,lfCu%4X(!^E4dg%>pmQE#V\s&:#dZ;&ji[Wek.fj/O1j<GpNO&NC;*J.Y`+iFZ85t,H$OA)&.]ZRODpSSh3?5.%*^&"dHBGEbd!XZl,joF'#\:*"`!C87gBRaGToJB%>&?I"'DK86**+?$?"MJsYa<5s;h'`GOOjKX4K:0M.W5<&Of1X$I&"%W:Z&\)%P:rno4uWG[cLTmFH!QFg;UOFAM=;S!:M]IA:`;bJA&tI#RQ<`uiI%:(7I\)JG1%5G1f<6Z^[h_446g)BYCku2C9.VX_*0WjF6&=Y%03\+:9)gb/p)E);>RDN_]uhSL]LAT?naM<L4<0(NMnib+NHr#n.X'O^DEdd0S;Gie#KJObms$e@;auuLIV!RJDkSHa8_A5$]loH6%5T4A\hkVVJj:O@K06[J@3mWi4)`7TKIq9ar(Qgt2UpsTpmi]e<aIj$d#lra^iODjX.U.tNY2e#[,&o@$-Q8]@'2s",nr^+q[rmr#%5Kj\HAT*%MbL;/rle-naIHQrpN^@6Gf87*HIMt]UIY>Aek$>S%#tm2trL^1(7o-baNQ3\W,!5R#p)GQchUfII*d7CB(W=5Z4mAO?%n$c8'1#,)3aMpHs^tF,t6:CsBIUjiC;>A/L1,nHrI,d]qL2WSMcPh^($K4TAjhoj%(3oCQq(<=?]hNmbI*qMa.hqNH!$3Th:WDM.%H:k`"?NYE9j"p$//CS`CnFD]cKr@Y!MOZT<(d2>tmj9r*k*Ll`rWf_!,9+lTUIf"X7Sc"'L%fO8GH(.[YMaBGB%bWk(S"f;j=7-S%2He<fKS@NHm(PH+H(t']U"KuP\^M&UkLd%q-$jYH."qN-#[]Gtem6^tE3u&p66'3D<1V?I-h@O/&j3'9Yr_-(6J4IM/FJq8aj2]l%4f0srCBa(kQ'u=sm,Tp`/\-m]a76\/5N0[G=c+MT:VP6&dL\RtjL%NcB!7OS2o\B]lruT#rY@C[qK?t7ghRp6"_hFB.CkG#AmF3G%S9E5;Ok/`_fE%30.nC[u"mt(Y]F:2NNIQ4XSn?@eBrq,$$'bJ<&F"bm7?6gKHgA:!l74/;*dA?oM*lKhc>dGe5H*#he")()D`O*1%Q9mUXGrtq;aP`ER<^K2Xo6>BDNLh\U?&TK>@_8QZdjC7==6AKLd/$d52>eFU]ds9tdb&)!Phn0I.FS"\qI$!><@"!*D9^pth=i6e%Khc+D8OO#McFMQ*):C;"f]9S'1%&i>^cV:pa"ns9ZfMGZp3FuU?]C.F6E6DQO<Q70;*Cr:cVBF]`gX)qn63O`m-0'T5B6]kmd!>5%;:&MS0!@tFRQ0s3qRLC*T"6,Pq6Y;J8Gt(*]b10TCsI0[OKqf?>Mn$^Rr=0TRj"sFBqer4\L0q+00b&cVb]=QqHSsu+a(<X#Nai'%qf@"G^hEC30E&5..FR"tH\!t=qWt!Bl/!C)"W>cD\.X+eFF1iX+k$5afnh0+X-`BGh?YQ4rn):C](\<6%2jOi4^?S8m;C>`l$\hg%Qm03o77oq+eDW=LCPB?l7WTnIc[>J*%j.;bdYG0;hZt[:aaj*`SQe4D0_cq`]j<XF`^m;9qqmH^`c$\*FV2@(87?sMmH^\d3.<\O%.T#Rm^DUOWf/_aTR@>"780P5>BT(cAKF*9pA_4g7<@(1?#E+aGC!L>6LZ]Ks%BLu&p#1brD)jr.,!pW;e+`OQIsWFbrCQg-1X.Xs%Gnn@j),JgfefkRLk5C3*5T3O^+tTI>W.nS2LC!u)c-9<`iQEK8OIg`U5ok;XS8dj=87*1t$OqH2GCbtKklnqUcph&1i>iqJX2j*'%WNaksSINkl,1?*X=PM<q?/C""_+:>6GL\04$<Ti+&"i%Tp2^\);C`0i8f]!9/oJrH;J*m/ca`]D0&Vb%N:5nma<ik7W\50CpQmI5%L,sej/55JXZ?0kg4#FO,7R.6jh"`09mM]5qEdO<aKd.N(YDCFhq.hHSAO^ma1\U[Q*7s#38&)]=,jFY/C]*i#Yq(%s:qSNn]/Zd[%?Q@@NmoHAgLV"H1`0VhF'CT#5m*]Ba\+3ZpZhGW\]?.*$>+/$NTE3*5e<)kZU"-c3j1El`0l(egj1R*V*cej(1<6D?s236#O>hHr%*.0Cb)DB*S00/"ge/.cqhn?Ti1\1;<]biH6s7ea7c6J:ih9k[:o[?GOheg*Y'"=tSH.ILUYPr0;\lYMQs1OccTu#R9,BJ/BA-FcL%ocC;i`PH]CputT>oulrTIUIEPrG^6!pU[NQN:+u'VscPSG;OO(otp[sl?t"/IXRD%_;,hN1umF_F4[IJ2nZd#8:1='N9^T'?/ZX3%J*QXg*rIVOl0QodRE?-!'H=#fWdOGuXVY":W"nC?N&:see<,I.?TFfc62pSo'tf#`ETMPViUT20QLM!\nRoZQWk9Q`kjaESO(D*7%5DYbS%c^JA7kU!8%gkfKQT3X6;:9)H7XGsiS@3je_`K9@E$qBfS$N4:F'8s._9UFr4U#I/UL='S7O6W#+5QppkC#5AR.&!6l%/=>%1.=eAq8BZId_m;dP/bn5G6P)QC%KRNBuq)K7p7CeRPN;>GS_j:an"D/@eh2k/If)rIT7VPeW85H]uf*1OEQ\G%i(lGbK98A8jTLf%0M'sJ(hp))1e2j7oI5c#C=2%n_#u3E-;j-V2FH1R71.mrM+X92'mh4'8AQCY1Lk?"5t\ctD-tVMFe_P6Ofs>`j)<pB>V3Rrg0Gfo%FLlD=o&0AoAY\'tq>TDT=UXH"Cb7k(c?-(ESdp&Kq8rPl83crO!<;L-1IgB*XRW.Q>K#RFT_NLrWR<^b56Pt;/9n5HVqNj\O.PNd%89aAXNsJHUZ;Y\NU!FW#o_HR0O*AL^To?dj965sC*^n=1:]'b@!]5cI&;o/aArCQW#I9;G^F^e<</k\6^JY`M]5m<@O\B'!h/<,k%_Oq2l7*;[o*q4_s4'GZ>:rW1W>n-`pL7)iAa7umQQkM@/&Z$^$1,qr4nH\##ak'oKMQ!2f-l2Dqe`D+Sj,[De9Q&4l1V-IAlCYtr%mNMRC4n;&eW/P*Um(RJMDZ#*QU:``R">[F>6U^<uhjR^Aa0/GaUV:Q_/.5k[k/-P*gCSR_=k'A4pX--S.<6_U9J'B\\om'_Do?oW%^./l/hO4!&\M`7b<m9![Sn;rC2a,-H_GlL[m_.3D38A:>j/kig?fr^Q7+@TTV96(,PSn4In`>(*8Ir8s625\*-XBeu=+gjj@Uupl%[F/^A[HQ"0V7KOU['LTXoul<?<Z_tq1*_J;[GLA:?E%L0djs<1mZk$pD$HolBjsel9Irm-Kb%rMN3%aP3N%22n?LPG<tA6<o^[pn%,3P0!A'AT>qd_TXhoJ+t<(V,G!a$WDC]g%Z.&;!S*,N(.9_<Y_3iN&3coZ$F_iidfj@1J+)(Z!6LH&?,fN9]Yd0$0&"A_TNT^X+.%6(GkOOH%i--#G+NOfq@7<(@ajjRfV^A]ufkInEu`G;>Q[)L,]e+jmA;AUfkAh2n;-mq.loeun6dJNm3,#UU563hK7oMqsQIWiDpB%LO6r/rCJV#pR[=d*tdCR=YgH^(KjC/lG-l3<9UUGdNO!FLLqgn7,>=6Ju1/kBOp"e*_W,41P4pt3r@qrPGbFZ,g!XulZu`'CUtL'%]>3":*EI8rf#09s1R[.5PDWGN#EELMm>`18>-s8L->'\S6"BJHc&ai&/VC&;2tr=I>&g,UkZMHJ=:UT`CM_&fAQ/?WiEgN.NI?Md%4qca=/,No?Fd]FL&1EamgsqNlS@KBkLlqJpgp%sp+l8$hjU-3([?99%Jk9=TF2]Ppl&1O0Z3p,DKFgr$OHalg^^_N6hf:6=XAaJ&%&1L(<Ss7Q?MTS/ta#8jtac`Nkin!H>q+0O7nlp6OgWM6.6XZ),3%$5hV%(Y(M1VBSm(ei2LO18?[PRuiN2]eEqg;0D!;5f*ds0cW%IqS#895BhTCbhPg.)(;8I"oY)=6KFIfD-5r+/)".fi4deaS]M<lSOOA^X&lTqOhOi4rrrZOC-X?ERV-^N08]onK!uS<L\r.dtLQ5%_2cnZ9,gb&qWuXa?GXlA,Z_GYj<l$P;e,+-Y@L1u7qkL.X:'o&Ugu+ms':fKc-mpDK\(*f""_4W,]p:H/T6d.(gTtOq9O]2D3C*e%gS'P%N?"L!9pRDXPkpBmAW/'B0UDId-92XDHk#(q=h[?UaXXp%aY[[:C"SkJBjKt\hNcYIhr2$&9T*DB^,au3GEP0[kV6G.>3?3-%GW2a<Vno;i(>ELH9],2&?Rkn4E!n[%hmi/]Z<k(Y2EH/-kDn9[OMb8M/%S;j.g%K-+=t,"DEGj?-OUrq;k8au$f#/LRtkN]QM=tD%WQsZ9B_QG<?9QlAp!-b,[$$B,nBU>5OF.T'qRj*`C,]K'^`msoKufX(^(l/q]@u<I[UZl0Nj=O4c!ngoXmrNKUCAJ-TLN&ta)H4Q%5RcaCT<hVPjA"QK3:Ej+I03m2'uGqW;9eq[Srr>KI7O[rp9hbff9(1hcIRggT[dl+a*`lmb_^R\fOUi$rH,Q/icEeIq$en/h<#Kt%/45#2@h0>lrhEi&[dV$O!&J!SOlf9*.nBZ!g"fRVTFdfGYcI3L)-O<uFT66"Me83c^i4J+BQs>VHc9s\9pa.G<,Zam_;aK/c"p[$%#4.!uNM&.%LW2N8ls#@CGYeC1p$4MYg"lF2A'`]c]kJU+In:[jVid+,1[pm%=TiOS,E$^%eBBhKS*tgQ/+]\%2s,)Jm%D.[K7H)m%ZPJSXOkY[1r&P#`BBLiX(lG"7\@V7F(65rfR(D@5WsKWqL06aA\M,Go0!qtD__1r%7S$m8nQ`S.`!6n*RL)ZrA*[bp"O'X9BK?rE%+q"NikF>0GNDT(WpK?iko9>R"/G?<+J$4DIc@n@)@Lks-]b(s6HS$4AZ_@%s-s;qg_'QG2CoEg2@7tiAR0uG7.skX3g5Z<LIl*T%%Q+9f+GtQbE@Hn4C]&$,u;%5%\<a',e+BVb+;;1M]-(BjDfht?[Sh:'Z?^Fcs['a(tNSSbJP#tB+M!36`Sm/=g,#s0kf_jpK`6,:@%:8]J]=@n>pgJBQZ`"Y+sQC=]"P%d,5FCK"2/V5gCSSRBXIT+"JhMd^XPRBq>q8XTCfZ<KH[fQX(X.NQpj0I(t%00Vb(?2_AZ]e0C%>8beJ,Y54QqlM.u',RDTN`^,371oV_<(342fHA<d/Sq+cnr,-^J/!ciC^N,:Vg^R_p\'Dc"i%e;:`3>WKp&-RUC'&;HTsB0eeN9W%'gl3VcrjGsOm$r^)ER0k3id#39krmn/*O@jK%no(=]`s1h#"(EZ`]tM<=<\M6YB[jkA]mfL<dA^%e&i<6OfT/4'_`kLDi5>$9E;F%DO28&lO#]#+'W)>VqmGN?=>`Lo!U.E^meC,jaK-4aXknF4.`S/\:**)g8L?9H$qdBXK<MHfb%s`du4!#gLMtJq&3VbA%pE.,<i51%frXTuo@kf#$eS"EB\3#1J-C/b+80*o=3fLf?[/-UfOh^40kWX@k*;!CdU3h9Xd70sG'(Wr3IA33)-!TCAoH"-"]QFW"X1Hq[Me/.%\=^/hZ?Og&QtWh/=h=%lY+)i<DVCYCRjA98q.80:YuL(%]PO@(P1CD\D7(*HCFp-./CnsoU$:8b"@1)Z$tS5P&=@VK(5c6f!UYc(%TSpo$.N`N]XOb4_obId4d-K&k_f00P"k+[ENClm`3^1/%N9au#_.YE)jcAY)BBp4dJ^lSK[q&H'[,$Vi:XZn[hl$kjmo;'D"++?V%]+^[`nQEW<_"Kt(DTR!UZ$O`]P-ctt:!507/kegAE2AOLn;&La4n/$hfc%WTdCML1)q=D;Xku!T\3V.mg6rk"@F3NnMSSN;rCE6[%nmPjmZ3`5PXKj(k?IhLr)fa)L.:hI6MAC&5NbK0Altg7.dipm*q.!V5&H21R!_-&;:%OYdol>@o@0StO32Vt%%@V[GdI,!,Oc:L'%@40]38aT[aHRA3;@.MQpj'=o8)4"^\U5iQFOZ)0T\l<Rj&R&HX0opV(9AJ+ard&aT0/;b1hNSnXpF<7SLR%%#[XR=pr3d8cIO+MG%Dhk`LjS?Be=Agka=mI;4qM[@)>HEKMP,Dhn+D5))bU]EH7UR`r%$BVZS$nFW0iL7f]QViU]$/I[=@8<Y53Z-gZm$Vmf\$mgFd6sD%,jFTVTq#tpN/Rp3dEQ8XWsUq8)4>WZdqof<=cfG/GK1SL1"TuIU.;3IR[DAq7coZ4*:1C4mD;=^7UG+Z'/ke%G0.g=cPiH,T&%"j%OHEC`GM"Q9gH6]j:bA(2h0+FTHE:-s;R`^QgE\"RP33(iXP7H-ZT&3[-=KQ1mHp(X/QW;(dl4H&qo8"_bL=TtC(ek\B^6Z@Foi,9%KraPfWIqfpZu]80,MOY748!I)8PV4Z9ImQ[0!$WHdqrAEWtnrA=1?jh7`-7H'taA9XR#/93R4p.Gl7gY>[1q@Ot*jbgY8``0HYU_%gXab0YP!o,1=8,5^>EuRol+G+baPp6cLl/2]RObhH8sqjd/0u$gM)GCm<Z9"4&krR%u5#mc5O3q*mX87TVhSg\#kG7mtR!ks7TY-%BCObT!4M':3#ccBfL%flC0]7mqY"/)B+Tuh/F,PJA_RAL?+lV5/O6c=7-\)5D!kN]fb:p%94C!=^Y?H7*fQ3*SWIXG=R?O*]tt.r%FM[PqeB%V+L9kZT4b9mW2]M4:?Z4?[//)LhrQ_/*>H4C5;BD(,=Vp(2PYaRBa10Q50,7@9$chZF]`d]Y>]WU*R&Lu>?^b2`PNof#%`:#jf@<9#H[fKtu<bc;$HGsiH:d[)SUkChDl\<20?V`V0S!N:sCB15[`QYp&TrC>[]WDcl(sqBKi7_@9g+&ar<MVhFUE]BmGE3K<%#h],+;I=nI:m"?l`:m,kg,c_P>!oPrOc&)`A2dN]@^b,CZBcEHn7g@/<;WkM<enW5qtdOK=M-J5dnN=$7\-nF\>"^ln!\g3Qe)jC%iCrXk?;'7m+'Z@P8))-;9&\"6A\Y'\468&2QbmST=)M4LVgAZrqs5CRKepq&m(F+Y/3d`&5""q>*E/VXJ$MN%PBMSsAoE@Sqd[ma%]hf.FcD:*;ot(HG,`i%op-n%(pb;*Gp*IVG/M:_;d0nohXX+sFXU@te\!!LbA$JndX<Yia7&[Dd#1J3l!P0GP`YjZ?jSIg;1>1":%:R6JCmd%F),$uqIhG2s()uL66E#8)-M[06cG>[PL!qjRtj<KaOhb#cUdSg\u?\C&laWBri-cG7U<Bg68T\/Ys9O3P["ZprT;(?`N%]PlBNkpoI7=>jH0DOM<P4doEB_9%)37>2aG<ndakiXcUMIPiX!>>nrhNLD)GA$o$n_P,\3ZW\oP[_bd@lrK$#.\tc20RVBWN)X0N%"p\ZKbpr'h5)Tc["/-Gf77mlO9[*\hSB'fQ?1B"K`GY-F`GS0PF/5Y%_^>WPb'AC&lbR/U%-aktH`npnVFZgi.i.RVmAM(g(D]R!%`7+(=rmQ\*G0pAfCIe"chidj*V`>\-"6mq%W(`b\ccqj6&QPPNO26KQYhF05G0@#EK10U9qm:-,]T!@qp.B[,F`5g_jj5[H=,F-I%\M>P4Y\$,!of`mHHJR=IE^o65)89$\Vj$1"begKpoPEi.aGIf/Xa,u;G$gm'+`_Alp$LuT3RdtqSGQo>YO5SWet+a,S*;i>;JP'b%[f-#Ap@W"&mX=n#gKj1e5drAp]6Q9i[X"7bWp,K%!$r#^YA-+n=ut^<_sC8qB9X&dd$GcRl&9BAG,TfD?l@^@Vu>2sF?6koCTI2/%9kOTDm2JAMY,3u^lKuj;RoIiSXja62aurbR):d1"<^udZ9kT]'dCpE7+4YI&\TT9Fh,cJ)`I"c]=A<F-9;gT-\rUSeUIcDcra)Yi%N(DC3fm*7+3hu4d\2SG(D,et%NM#0IW1BsQ<^EiN;g=483cj2!T@J$&EGXrU\lDSr0"$+/dr!:5c)U#e+tUdkX6GQCi7dJ0<mqoe%E9t9,c=jUrAIn^aeT=9gFSb3DpM)aanhKOSa?HWgN,%VLo?6RPF@OL$S<gRLC-!<!>^NEH1TI:X30/"P!:\4UcYrl_4(#)(`l5/b%+Qh,Bh;E)ZH\G8(XTe5Ip3g8<&P8;F`E)0P=aCnXppBa*>E+`e>gh5\TA+<9m"k_W:^Rn1X.G<-=s_:V.Bms+gd^jF6k\2/EGhPC%hCbFZ2H!X[(^iP#ltW`$P"Q`+)6>u^0!nQ/_)?(eba`D`1I()@K:4[XA+$_m\[(C]Dgop$\V7SuYs*!uQog3u/pi:o[b_=.]g#X^%k\eEN>q?T.FtIU:EQjuEN8hh=a8MB;'J0g+ZW!o(YWCoAWdWW4+0]H[.!g%Q3&Kpl7dmmV<q]R,EL+>D<W'FWM\>;Yg:MDXca7.s%0*[S8H1.\O+l/UI$J*C57GQ5(LI/S[H[d'E.LaQ\ES.Bc"3)V[ZAGYlRekK+ZCMZ;Y`2ni-`W/"-T^:36^b(N5e1'CMZX^d]:nNe%gC70?kAI60c.u332E'/VG*Qu?jeHbWV%='SoQB(%pL\BQS+8C5&r*`n#%AuAgMKt?]RFK0#.D7Mf&?gUI:98UMIMk5FH95"B5.6]%"U&4e`C:o?\^(f%(gB)><HFKU/&-F[*@kuspM/YTJ@F[in"</%oS59*M8W-_:u?-N\m(\h\$m"Z@BSBi`TI-;[#e]0h4O`"3bW2T%jl;2I=*LCCqNg-C<i[sFc0@;`cEUPu7Idh"d[u`5iB]Re"gK[jfPlN\HnYLl+bSs%D.ST!2;IGL4/K[>pl)hee8XN&]C!qHhW0>O%$Z@#WEOV"O7m=/TPOd;'O6r/%p/75fG/i@X]eXuCpI\_SSV&7J52gD(H*>'7*7js"md.[<*&ae_V6EVJY$iBbg+TOE*PASTKlu$$%XDJub%9!HhJl#2'iuSPC?[e!7gGaQ,'nN]*2Tt;)&I?Z'$>T["[*cuV(0_<ir4R(7XYm,&6CO2p4`"*TDP5BUmAfB*04^`1O#uO4%<9Lu`^K<tc#1t>5HCsG2/aY*t[Z"ps,0XBGXr8,*_#899bucHtI'f09[St-:51@L=gW,RUk\7M^8Np'teSl[lhO>JHN>t;`OW(Z4%`am7I/;-AO`t5Hh_JA9HRuUq+e1no=/iKhObs-ZF^8\s<Sb;%QmA:V,CVh:-.lN&jqD0&!9HXEc_rTl:50V1KNO=ZPQ=gTnIb\F[%Ni,!D<R9t_>1<$O;nAuAWu>&.H`;hj*\tS[Q'q:PZe65`-7*tt1UcOeo1q]Z_*8ZI3Nelc>SQbf:8*c1<+$YXI4@rRm\,q/0tX5C%L[At?HoA![F1@o'mFgKl]:3n:/P;IX\A1]!g8kQ5roJ?:>SFM>eeW(ifDa#*KPn^B.4$hA2b$=YDK65V\k5YWoY]s]]22+R<*LY,%S#6@0<UN2'cs?#.X*S5QqfgsU/PV]d5A7qY4N&tui69;6Flo3s$r;)YT!kQC<gA.Z7[&JTfD\J_%9'(Ce_XBZ$u+#nWH@Q4o'5Ab%Peg>hlFCGW1g/BL?DpA?K9<0Gj?p#;+p%J.=G3)K)1COg-`6:L^"*haQ`;Wn0jfpI';rre_SGE#'N\BH=3c9#bS0/uAim&1P6(5t%3Sc,r`tQ)^a/nFcB3r3Q^t?_iR$T)sg*MST5ZeT*d8h*j_BuKsHeMZrbaWLOdcOqSA<L[Kr>%4/6YCKrb;6odegcRZ0`@Ig\$&D.%[mO*L#AZu(-9C,@G&Io+ad11o,\]]r5[S=`h>T#YS56RC"Z4O=Dl><)qm:BsT%1NZ>&tFMX=R[:K<"MuN@VR+RB*fkh;q:f*%ZPW%gg8hU=+nuY;`3!-E=]*4W,"&ukJuG:H['HR)KVZ"lOD`e]k(eY^N[&pO-e3[%A;O'Z*dF:!&NN/ALB^>gGI>j-Mjaqej7itcZUm6%Rp#/07^eEh[[@O>9_ZbneH@tSf4gUpC&YCgUQce]R+8GsprsA=%0WO#DdC`e,GpTJ[q%3RDH9;o>c^.G`HEEXS,PPUb33_JA$sU-%dpur7P#gmU4Jt?kpDhiT`ml?:lr2W3'MrT6%8/^(n$t2,"l*hi1j'S*e,.MKK],+rS+h+.(9p/l[^t#kf\45m2rWECo6otLP1_5'%UAO"RbS8]%\aZVCW9DD_<If7.!;/Fb[jVfo&UI&feM%*1[d;XI%3UW/p/QY>nM@3H<:*N<U'f8YL1=e#Cs+:nSZ%oFR&g*lbslB5%'D2XO[]KV\%#IC^i(Auo.6D]5;,7oODc$[O:6IM:U0FfHoW7[Wk<3[0.,RKAZ>G"<TD#XnJ*KioUTD?3&*7#F,259kjWcLcB0Uc!%4d6J\,]7c,hA1n;).he#IjgrNq8dnEPgAdnPrfu.Vo^Cg;:X<W#uT;u[Ru0H:A*A^]:n.f^V*TemHr_+]:J8cm@(bnBoCfUL?JD9%B8$b/XL:1A:FDF=;uO.Q2jF;H5O5D4BdCFO\UGkM,bF:6p26g'ch4UjaZH-\B>$)hQ+>W5>X'0m>^JH^O&U.fV/tboA]JljXLkoe%IcYb9qH9HU\((d-#3YhcGK>#alK7:+)%Ml'>KsW:f?\c`RE<(6[G8#kIUlW0V"4A*3nM](U;O#oHT9X'qGb3=h`tb!Y+Kj8CU+=o%j)b0XG"jE`qX&YOh]?Ohm@W]W%0_gl*mXGb?;OMdkhbQ/5O60hK8S0\cLiu":m"NGe"+dgosoOPgYgSZqFURK[Ot>fch4V&Ae*YP%[I(MRL?g\%$ULM_h9Yc#hJfU!8DX8M5>D+-b,Kh?n%%0C>X*!.8ggq3HENm:Y2+XSn)IY;ldar'cK![</KWX;pi`if0L"$*o4ecq%F8`2,Ls:.uDK`1T[3nabhKM39ch^VUrD]VqgRmGDn)mq?lh+lg/qRrdos6j4DhmrZ2V=g6FWTGc0@Q%Zp"RZ8Hu!5+)fKXs4kFV9%U\JpHB")j[<f/IcVu"LM6T^n*-]=>MWIET$V/>Y_R*+'9kPA>l3A8,qhVZMeIf$'j?%9#L]t2g$ch3KqfK:+$]6!p/gN-qFY2Arl%nFEQ-Re)ZlX%F>_4B\6?BCV:oNR%2QZ"'LIYVM,RH*3e47]2NAd['(mR?bh3eoAo_bu<>3:FgWQf5J"*Enb[61kof-<52^^&$!tK%Z^(lPbp;bhF8`0\6[9tta)h3\$Y#A=H+.knXAALFnAhsuf?_SG,!O47cLnO0_sDQLT6;LQVtsOsf5>Q1TCq9LVM`jr\UN+nKBOc#%;It)aHDnh781*rFlAcD2H_mH,WLjHapJn1u]S^F'cINs'[:P7W3u/4\C0,>62/;S#WDd-U0Zs]Qi%b>4"=gBGG3a>`5t.0aqs7Ou%64qOT3*K#s8WBbAfo2>?/q8@o'+)4ua3f[c3#>?nk$R;6ag1"WpQ@!*g%3V?Ja7^BF)f'6jIl=780?A(%XIfp\6ek#^8<'/4&N3\%^9^&[C-VIaEV3>rePiHJQh'TnSXrkGlX)T'iE[mQ\\*DFq7Q1bKn/X()?7DleH.+je%en"0lts[T%PZ@j>r\#-4r1ZoQB/?Wcme4%WPG>hqg10"K'p7kr+pPBY.=J6V+VVg^E*SS3jBYN:hNp'BKQQ"l#:Z3Q*.=)B!]<VBX[i]HKLgW<?"!e&h>Q?^W"!&o'.*I`.cCk%W8]u;5+D:"%RDVKH\M_r*#DjeR[l,,-\8<*VqbuV3<GA6,O!8LhAS1c8B:"&G=T_MT&mtK/(_[=-",5(daR;JprIsOI]OP9:PO.=%X^8U.I+6J<A#\M36pN@77Dnaq%'e@CD^6)!@=B>hLKq1%/!=Eki4MKWbOnQ0:Be0&I(4s#ga]fI@_O_'FA80Oe9j5c4Ur_s'.-b-%aT(,[+q$UW8B';FI$#l@d'_&Tguhu'MCU&<XobTtl'[Vo]'U8>0+Q18VbFfB-k`r-X")fNK,;7I"+8J/'YNQ!F1V.4c8aU55q>:>%i/ESbTAL=tH2It'n)\GKMR7h"0ZP9ONee6/N@)lua\VQqmN@J)9"+]FK7b<s&s)kX:W0Nn"T;"!n5&u5VV>I"+c#$$&B%ldIu>@Z%1*=BFn$tc5^?,4%PH&DQkcUij%8u3sq1`7)UYp%52dkgQlII!3Q#DB,2u9GEndS36,BS&,-/H*%iL\Jol9S(W(;PnMDUQ2i(@K8Q%67OskBpsWh&TLF!?VsY(1nr0M.K_mQ!k\EnQ=8YR8<`b3L:;9[KN.Qd&J>j4S.BZS-B1'C!l2@?n8%(K:AGh.'Z"saSnT1A:m%Ud%Lg8M\U?HJ>M!m+56s=1q,:m8sHq-bc):mW_@*8504/))'e09`C-8DGY_H`(,7E^`77Z?7cgcIcs<"S<8iB.d`4..D#GHiZYII2?;%2Yis0/r*YqhrZ`4N@*19=*]&c:rJ:^/\=5Ff,oUeJ2)HI'Kj2:,2E\-FA<LSk<%:8n_<Pn_;C>"o?6;UXR&X.f6Uelq-ZBbe]OIY%h(#h![F/%AZ-oD]W74!PbFidAMd0dV4i=kW03bi"6abO:RO_"g`J=XBa>!L12j!F<nDTnc@6eRLs,3+$(ks4(U7X)[\/P_gmiT`g%aqo%>F.Ds`__psER-5p`-Q:l'W5gT.LhV=WYsA.<Sm;_q`"STcmq5$JHSm]K9]kMDqUmPKK'^=3-m8'cgn9:kY6\gF:DlQV.oQhs%oMu#KafgN!F$sNHJ?=hJ7FQHnU:naA8#U[EE^m,qQG"pf5(:!onee9MYt6D3K>G+:#9G,H,\aR(G=7ec]LarorG14mRZZ>j>SZ1p%#`K&_8m4s:$ki$dC>F^dRV@sYicZ<^-gK/gn[3uNGCUaH>sRFs:!GTti)9^`%Z6_1"eNL;7qX+:_8eJjhGc;2bgQ:?_*Rdr,e=A]%'>N8'6Lp%H8AVD.TR$k5LcV]W=!&N"S.&lbeZbu/,Z>DcA&Xdu;"XPDR7;hM#Jo1.?P[!9Y4R.0>^N$Vj)]GWK7tLjR7,rh(Q*MN%4WnYm@/;gN@u!tfau^eT#!@DT9l7SV8++`j_sPc5pfl0^&Pg1-?B4,'N^;B.-2m]R`*.=H/k_Pj0"GH_k@;V4_P^)*%`QnG""2!u%/%+\n:PZk.bPNcpK2R.-++2sShZR1&QoAcDeJ":GA*sU1pj$.oX%(>-U1V:5q-%B^m`cOKKaIbA=gY<$J$!0GiMl]$Yok#AWdq<c%K)\AM6K"s74&KpJ`93m,k7&Z$?Jkhd!Yl8^R=JcYJi(VVs+k^2/8:So&94X:qp@9X'F>Fbq<#$#"E42$p;KE0HsRO(h&4h"OWZ[>%Q6:Q55Ze(19@ESu,hmoI$\P9>i6"PW&A_Ya&^k@S<Zo8&]7Bu*I9?^cfsMc`:8Gi&ODH+?o]B&NHS8XN\#"8k!;o:d0ZS!^f\OCI%K-h`-N^b^58d!Xm45C1s(l`4s`p4??[*GgsX4>$lKdoVr!t]V4&d3'(Pu^giOAW)ji_WLUq*CuXd'Sc,Q$2X(SXT!F5B8hS5f@qD%PVI/M[)&,cq=r[/Yt0,[_24P?Y$/gr5u>1l/!dH](.LYa"(P&X-t?;X_JH:C14YI$7c"c2S`-rIOdX9C)@lhHX_2/aCSJ<aLL9o^%BA:1?egV^1PhsiVIlQOWi_%N]SFXLk?O?_L.3D8ZkoWRoi4e!"ro'(P`mP.I9DO[9p>'INmkoqC$q4C:]ag(ioStQ7j)G#CkoF&M%7t.3C;e8s;4cWK56KPT=,q4E)$\u.708VrB.Q0RBKmkp'mh,.hObG`Q6W>L:/UMHeF7pC[T`Ciip>I`]bshCTqIiX@U.XNPYG1.n%E'.Am!Uqjc*Z7'm_IOb>+IEXHb7Hft.:/r'+-lN_kh5o77EWN(+)p78N7>/7:JRUs,.k]94jT](,a'ZGZ9[Bc3aIA#9`Hrd?XtJt%HDX<V8JYL30DXK.ae'^3nB:e%&JM&&<$qX/Fg,[3mS(VuX>=n/*;4!rZU''pFp8s7NX0i(ds'j?7%!XnNS_Dcr1pY=ou7APg)8l7%L%FnHSF:SIh4>:p<[.O:N1sZa4VF*'U1S1(-ZC&-T)VKLI`dGTV_.n3C1^Im&og>(Mj@.I*U))5Fp509)40gW.HLnc%FD5<c`eq(%9\3Rdb=CD(U+R<725VlId<m^<9KXUj:RTRb0OZ&t<&^IE'S>)'4`,8Vl.&5*P+$$Ijig(oQor@UMmJ`t$GVl?0;7=/>@$j$VG*>b%8;I,H_@lMfq"=UL$JrN4&b-Bm/oR\2!<'N[NtYTNMq1_.O5F3V_(b0^NGi-.JPJ0.&[biH0"j\+M;rb^Yhh5$o[_FRKda7iZmi"d%rp_#T(a7:Qa>lgh`QE4QZg>YL-%tXii)#a<=?p:&%7CA24Snh>+Ueuf%a,B_&tJ7B?T.%H1k=k;]kQ_#g94B`eSL]!+Y:bf`cG2*%9"0JXlGi/\/LTAQ;T]GSl4GP")KR>D:mo$V2=?V=;V6jDG_^CN</l\<W,ta"`\nAk8rXVMk8f0a'if-';BgWp+TP5gU9<+n6aG/K%C[FMiC=P"UKFg8kdEc#(.b8>+d=n3R">%ufEL;]WmjROdk,!,]OpF^34qWo8YJVP"/Ft7&2rA9,.j80\LWRH08gNrR_TEbtVVbdV%/-RtN,=_/Bmd21S;(A]\4&$O$]Ao*9_A?FEEXcpaJ@16U5Ps?",a4(`o/Mhu=JE*GIAk2q>n+pYej>BrG_E6U@Nu_CpOE"[\(8AY%G+O6GFe!*"=(C?aU1LR[9l0\!bN%;./a+'/[Z]@BD5]TuHI.(Cm?'-pJp"[*4&uI>0=uhMZ\F%b+)Ni-3]<HT\""c7ihQHtEm%Su%Vf(kIP?Z=q`3ip>-`tsl("p[3lq*Gm*[pEl?deY&UZ,K_?;n?g=AoL)f+^9fMLJF>[IDIQ!&YbsS:^I$_QbjT10mhGbqbtc-,`tm%PXle*h"`1$!misY!Pg.9L^F8:4I0Yl8PW5KR#rQEM@?e7YR"-rJ:M18HqN#YJ#-r*=_)J7%Og0]']^HHd5\hdCGEfr;I5W)Pk&0Q%pg`VXZJ@JG'XQWD!ecs.`^47"nqRsk/[O8D"-o#`gb)#\:Lt<SWEFc'?k<^e!lU:k$+`'<s!4KT'6;KNk+1<M&dr.\K`s`dO6UR3%q8]B)P%o%bS>C_T&ek1\D9?4V0=$P[9bZ?\MiF$OoQ"o:Xt>ll+,;q^n^7rt96a,H:5f04gaaM]Hes`IX8p%+iFr9_kmk<Ja>%#%%)I]`YlGZ8u#%<:)OPSBd!-DCY#m)20Z"Z-*2X0VWNOs;NF>_Is;As(_W*L/a+\;6QH$@YR8.bTu!T4+e9+\(VIlA8QmXVZm:'\Yu%B[FS1+D?B34SiYhgsMg<UX@4h.0-*g6TV1NnAZ*';O2,WmKW5olq4+=*7fb0(9"XB[$pPP8*;]50L$tNo89qL*("]@=4IpD<^*db%n4bG#gp&C/6f"nki0QE]k<4s6A3uMlb_e-Z7:@P]/+mBq7E2bSSC062a(2,[9FmkFP`+nXNH.R_,T5?W(IL2[V<u^(>3&R[d=-0*%VXa%&XVssbN,0S(kD0T72C$\ActR_PNUJ,"H?HVU,NDKnESAUsS+J^i:n-\AdX`JU%_cVj8MT_r=H8OeTdn+#."3+uLf[4;1r[.:%EpP/CL@MK<qF5gOX<PYfWm,1\cRXG_Pd[(D+.luF=s5F[-q*,];S<-^k+R!EBu$X\O]oi*qFX#$UDi?p(*M,M!6C8qjC]\%)q0DE%bb5F7+CB8f?K!<gH0%c&=5$BNa;DuK**6Pg-\,r0,e-<)"u:TqPGkg8FpgNQe?I^+!-%X$$qud7VPT(Z[b?pf,U?\='/pMCmG[CO%fQJKkmG-K*Y]'S7jq&n_i:n8#R.:R&5\M&c[P5G%g^-`P6Bou%guaCN^7VHK5-'(mgf69=6OVTlA_gQWnr0b'AE;gQ*Zg?(2hlQU%4]TqDnO;iD=*f9ep::%jBMa*AemNp(5qCBA%m-'jH-Ngs,[QItHL9[MPuinc6K/'b9``JU6UVRa#6_[;$3A`\/`e9#E#$:obLf/r%J!\>!imQE+$1olk/8gn$%pk8bM8/KSacOTC,:kKm@1U4B8mL"q.(7(<'a+n(46e,k($)jam&?.ANA,bD3Ihi=ets"E*3<pPde,#l%oLR$*,Lt8V,XHku8,Sm/U7WC01fp^'`T^H[hnltK/++ilI-Wt+JjC2?6jZGV"mI+F2O63sg"(G5qAJFN#@g'7jp/^D&UQ@hLW07X%EWO^&c*OVLs(!-@H==AC]f>G[QPpi]2nDoU/XB=K&:`%#qL`dqoqs`icqa-RL&Q^#2W^a&Um$YUd>p7lXgT6Vgt#'oSCOm^r>sp0%$\$H*$mt#cm#Nq3QQ@f\GNZUpm3HQ+;;2b^(K!Q5UXnXp&(W\r&V]Z`b/p@W+9-L8d@Y1Z'i$K*4HXY^iFFK37p/Lor\'dphbiQH%b<^tQU'L^k*uF.a2nJXj1Zl>l5/1"@0#5,BcuB1AiJaY$0V+jRk6P@%_FZYN;Qa$I2&)c1.2lL0c.,mYWA#()=2a7$.jAdZbeu1T%6.LiX)B$DPLD`"8`/rUS("HW#;)cl=\/#NDj$9U?R[sjPh+iV^1;T(Ya5BQFS><Mn&qhR,hsgj;\*DZs*J1l!#]F70JISMjn_"&!%RVT(F_hk0K!X\8?<AF]^OU,T1!]q-o)=bOV8u,h.('F+5"Up*q-stB[(Xu/I5U0ds#q?pk0r*di!R8#cQq<0o8<QJ"fCWSZl?4Aa%OU2LY*61jTIkX:?8=qV01tPc"&C`:A(mbFZ'4r+U?rWA9jU+_,6+Vu/.&jahJ6u-^`:-6N(o#HWd^%BGf@Uf5Jgo+H>U;]ZN?gJ.%'A.:r\uBWm-MC!A`[2";KSET.In`:_TP>_Q)jqg>M"6Os`XcacYqQ<",t8qP?!/I?:q%+3ND)%1@5\TX6;J9"=0@A(8`qgH1tVAa%#jQRMg;jhS&t;GaPU,kK'uZ>i38c?H]]R?d"bP/tKJbN:c;LB^6r-EaY?["-"s6!bD78SqSdn'B:4tP]_*L]q'9g\<EfCY?Ij-1u%SpY+7%RJoGKJkU%^kabl7V0cB>bblJO!l>RhZ'M@?$7gAE@o![n:0q9G7>2YOR+\QTO=NnBV6B"Y%]+!4c2BRgtsc[8?T@2VK6[O%BA?0k_JL<2M.Vo!MW."-(GD-'7=1YFqC(`D\I.'N"HgI>MXRc.#FA=XA"Ru"+n=oS[7@Y=;ZGn(G<<e#Cg9<km<s^PKQO\1Y"QDm%@bUq2^Gi.J+`BOsct.!bDgI46b^Q$ZPh6J^^W.tW@8BWNV2P%2ht1p,!,jrP.BtI2hFB4?h],ln'^^:fD',H(h2TAt+Au\[\:<Z\%*g)J:91cQgZj$uc0ur`pHt\A<S1&%)nJ$7lJ!$bNZl-6aKT+[nj<h,8ZN'(9[lhK54BtJpm<u_5@h!-ts#MGSYo2!ik1DUW`SS74%8f940^?MJB*rBfscpXN>g[AB[;XDZMV3Fs1#<cl`b,J,<WMu9BlBI>OOZ+)Ccu#b`%pIk3S>YfF<i/di+)M4(aHM/_<-L-jGH44B%CSg/eN10OdSe%/sce^=OUM`9^j,?:+e=_Xq*C!HN<p\)SV3KKY8%kF68BOP)RTO=dpFgsD,P(!X;E?;n_]G*j-S*a27&Z@-a#$kf%"FKZY.30/r62Rp&g+ROD'3cUXDf/j';XDZMV3KBekF5dE:U"4'+s938rG9)qLV,XX8=+Z"T_6ZdXKC!SJJB["B4s=Hp>k3G\k;pL%fZ0TD9_B<+TrrjA)Qq_^QV/_WQ2"c@:!9s%VDq9qeb(_`E$B3Q/u><E5A33I[,:^p+@9)A]s^$e=h'&/Q1e:[pBZGV/5WDOURHZ3%dPWDk]&#(dK&/]Z?jVruTN)@(mJ(QL<$u-"7P:NjmQU&MD$%(0Y6GW.Z17-p'9P3iQdS0<+15EAE#*-:JjDUZ?<qhSm)dAGFO8a^%IFK6MW7QVe8R?5Ne]0Tf<tIZ5+1JrH<"Hs:a9qUmId&qf@N>]?&=(Vr7u\TNd@jJP>G2ofdh_hR@W*SGTe+RGa1[ud0ir&=JjDmb%Sp_\[m*3eOPgJ6A^!(AF]RQEo,EXSP!W/F9:IX,f>bjGZq&6Z4f#KXICdCBf[U6QP"m!Y=V,X/&O4m@@j5!Tc!+Ka3!6^n4\7/5d%/u>U_-QVqY@`GTJZ3>lTC`N<nW7[T+9.?RWO*fR6%mu*I,?/4NL$sJJ]m7,P&dnQ;mBf%55Km\(Cl5?&:,=Yf2\VP+/ZF8[HUnh2%3oqJ3ZCEq+gka2;-P%#,egVum]A5;/Y#G))5Yj9B?#*?>n,*fuF_X)4m4N*r>bG()#0kd;oPmdqh>a=9d+uaUfFOZPq]g2lqh5QE%?iqH&V1ckfC-/PX$WLiV67#qR[iG#8c,)n!.-fjDe)%T"PnjennBGY5F,KX<>Y50"IG@3D*>b[%JjCD8Nd\B8m*3YKPYfrO]t!HL%$"Y%$:l+L?XtqO#k2T@^:tFO+Vq#d<)GP%&._ODa1i5gh2]nA_/l:->]qj1uJJq7!L.Z8%gDDF2k2c[#!_%Oi_]&Q^hr\Aj[R9O;%d9VMj3OtCBKZ5n9,@9/Sm;%:ZFCaFa7o?NM-^R_cnil?4%C5pbf0^b/NU9e2L4TlE\<N01qk+0Q5L.cX';=93DZ[($.JDoa;G-6A%K-&GH3E*72Q?rDPX"-n4hL&R#8'QJ76^f1]'e=mg'!H1V;`m2>^IYT+R<75!lj<C/>Q_pCT&7;*[7N)]iDL:<m).u3fP'HtWI[`B%cI^RY'mh`V$0@[\qn%V=q7omt%V2;W^8B2XfUIdl-td;]K-&J=3)Pkd7bt^Nh;a$F.u:.#&)0k>j$ZV1)"mIs\#qD6f(!].&JatI%#AJd[;Oo.tMKoNI9TV1@QdV_95%rcsO;$1.7&Z?:0Q20fPD;fqW2L6\:BT\-'^47\[lV1]]j5n]m*3YKPgSLRRpOMKBnuRA=p0!j%dJ%^+DYhC4,?GFF4.gHF:@mNE__T2%!OMS2^3oBJXQ/8;U1imLm\$HMELO-8&mNT>'#MD:?+Il0N*N/HMk=p68IOT9l/Qe^9eTpQ%m]\Vp(FcJkcb&QkQE?E114i=s^OL9R&Oco;?_iUg5/Yr]dofGUdKiksrU4+%jk!p:4t`\dTm$tC#d^<))?UDL@(+S3`B3G2bGCFB%VU;W7c!T=V?-3g:j&kpdRr!kn\[dq[>5WcsbL(d+P-dAM?a$.qFP*(<9.?jX5MHYMV#;u.#=<RHL(1]2hJ?FhR4A-HLFl2]eliP>%Y_*:0D44mg]_T'&G>`u6p(.GLjd`OpJ/q-r"uUL16(V=d6BuD9^1fe_OS8")V8U76`8BF,:TtW_QdS<LT5XQSm:Ws>g>do^?jm!d%%XW89.:k@0H++fL;#=\HIUX$R_%mLb*VO++;T`\Co1^lB:72RWJ69WKhMMi:+E(R=dVVgrL-:3'ZJXeB+LY`0fL"Y@fTVLlkpfZ;%@3<asA$+j%87W#B)J)+HHbYf$)Z75'4UdEr;m?I]bdiDEcTmSPJP/S#:q[&BLF(67aa"D55Iks,P<jsd)7VqsD10-45Ko,]7Z5q1%Cd4S+mGVHGfSbe`kd%nJ2gp@nB"uWd/$U,3Ih+]T_qr%28pS9S3p`^-VtSkM!/YMo`d9,n*VSXV;T]*rkFdTBNO3'TjA2R<f@n,i%ggP+b/u@?sIgp]0X5s5Wrin`;\pJIW9X-MqQW!\8IC("!8c*LB8Al9[!.-e<FNBr(Mf]+@fVjQMm#i4I%\("\j"T"l:JNO=>Hr;\%qZqt12QpU>&A.,fm+]f,b'8]TH+B.p>5WcsbMn.:@jqQ/<h`C=,?9*,#+SpbRI,EW4fg[2GnpFh*E^[tT^*ZVCg9`"m<lW^4+t9F%0UDgF*QpE2H&$N)>Y9+Tlo",PN0<o#>R88+*6-5FW,7*C]c"AFnpp7GfLn"n@_WJ-k%sX%Dn;0BDb_p]gp)8;H3g8kp;ILlna`hP%`T*G?98P,Vcsb[A:6uST*Kej'O$b##hQQ]iM2h,_g_i;`ej=7j`2N;L@8lSJl1e/>(&R-tq'G4uJiQVC_NI("S?1@nNCt]:m$tt"%JdM<sWfFkE[GFmV47(5:-'[*BkF5f3pU8uA^(s89!pmsr%XIYcJM,^R$sSdlD8/ba7#\-a*oK*GaiC6"-Nr;1O0D40YOc9qN6:T,%h?G"ok2fL`"%U[G04C;c8%XjW`+\3r_qUj%hV;@.8]1S4QSW7c:%Q;:l;(VPLV:7/P`k2/5qao/frmb0$-)#B))gXfHZO6W,n:OI%?G^5%^D:Y-;/tW_+sUDHdZlZQNdD%qAQY3Y,dd;Xk\L#0OXC[+;T5&5e9:%K93qD7M$";]:kq1O\<P:rmEtL%gtiS'jG+6,Y/B,0%?:*mNI@fio3Jt[g@ccN,%Te8mHS]XJA[_C0VO+eCk["9,Zu34FgGgYQk2dfCaVd/)+YH3ppAhXAL8I/;fTVLlkml"d5p*G&.-3#n%_4^iF,9?L?j&/L>=%5?KGuELM=@nq3/qBB+-.ma79.@?7]&R,F4PB-LR`lNUk52[TlB!qX([5ZQCrSVkj+@4fp3+9Fo]'Da_k*B'%8r$'#E?F/Jd(KZ<gb@XrZbtY4>Y9k=O)ZhbO1Dnn+?5\>mp[OGHZO3V,n<YE*o(()E81LM[>27;cc:7uQP.QBkDn7j$Y>_dV\<9S%enCWTD%BUIA)e2r13:PG3`sg,=`As:[N6F\Ai8t;2]ERs$I3>F*n!rsic$9tNWEK2_G7?P-^W8P=>IcXdSdX8-:T]EVjO6:X&b+k%H+B.P[lrbXgfCuFi!'>)0B:[i;6`&-QVug^39hZhQMO%$<@l:hoT*oKXruH'4GRdObu2:pYW-F7bt=)#s%>ql]FPi<SlSM_@)-_3%"+RTdHa7W?h1ja&fSA35opZ,:o,YL+3pb,3V3EiU+U1*2BsY`j,8-nMj4-":,&](dV2HSgW:dMuY./Kc%&Z\gIalCS$WiE(#_ZX0%/#Go<LnJbb=U^[*?0@Oe2;R`SCml\P>jD]NF"1F.47(f%V3EJ5c`i`m;ds9ni9h&W_B&@4j\j72(EE,+-;#;Z5]ClWVs"V9o5Kg%%QA&3%Bq!NP!]FK[V#,@k4o)UPDLmlgp6!A:("Nq*$gnnWak_(f`SS746Fl(cFP'6S3-XB;8o0&A^ps(m<:%lS-'[*BkF5f?pZqph%SCl]MFAPg#c-7Q!g#D1a?C%*K.>7k,ia1/aARgS[!=p!F<o!J1=tZ=.@FHC.^bTE7oMJShkMl=mrVXG1;GNY[qW!l;bKk\83DVm>%]=&0<O$skq<94qoohXYMM=`Vh&<hb@e$eq?e!qj;#1s"C%q:GX/GiPfP"!N0nafI.8%2aWit:+ZFqp),ShDBNU%^`T9Qu3p`]_.W%H/8V@RSK\]a2=`A\Bc7?:t)%&efup%h'*E56f)WaUuMk$p+UR=jB<f59:Bi?,:;',P=t.8W;+7oep]dEoDT9ijdRNW!=-BQIb8r[%UD]E`A+o4Y$SIuu*k/n^&Mj@b)lp!I5eD9u^<-9SBl>hF--h=b2CRrMK',0G>2N8lq;(Lk[eIE^Yd!>QPaGak)ZQrn.HQt-#eJph%;EMn<^Oro;0=/4N:h4>cE&4aqo%<U<6gOMn^]1^g5+G_+B)lOXXGUAEs4@L/1/3HCV+:6'FD9_"l'C+EKX+Jc#j%LYLJVlLQ2BkP%E]/#]4%EF%*t4`GW^='k?7+d*L8CL4GR-=)S9%")h+=jS\qLf`Pl$^"OAN*T=4nZ(f"nEb`Z3k,*`M4j^-SW((),_3-4cWSHeuaP%1"epDF!d)XY%H"Ve?A_^EX4pSjGa%=<rIJD>B1$q9[p%H65%C'+o@S/kI.YsEmXOQ]3gCW2?qV;P.O3GZHBq[aWgbV)7K,)Go?GT%]?1_t-MQ63mi,i99n`C%43m;^$-,NV^T+=Uf]gjgI;BnVd*$n,m41s_WT+s[cWI1,&>RN=*ospu%2`Mo:AEWu+a\[l*KGajF0+BY%q\BFEg=.n(WDbM*,8F5PgjPINSg9\pb`7ljD/.J]9W^3QBk#,M#OH;G9Q&F2pPX[IPUbi_akZ%ODgh"ojr#UD.d+r1;P$j<ak90D%n1X>C*anP):Z!PD76HX%YY=+l/.g3aL4.B1GJ,]<2Z2_3#-Y<Vcg>^QrS;Buh>0+i?K;N]7C<g1P?jIoaO_lrNF*O;ld^G)<_-Bt%c>_01])XPO=$p;/Sc^$)B4X,&mh37Qq6Yj'#q#4l^dl,T)^55_CFs-:lob#cjYI?HSjYu\%_7,P35F%$GCSh+eCqV_r,df"qUhHs%I?>B._O-[=#(@$<bPN#9;V9HUGoBf6@S\5g<B91fhd_>=S^`*/<m%WhhL)3^!u=;@YV*u/LkY5MXl>7M/](7#mdF^ZF2a"B&&GI[%`n\?fp-ch;?)DS50f1MXaqPdGYV3sL-bn^&Bn(KERJ4AUf+34MR?!e=@?20,F)oJ2hI;-i4A4D3@IjudUb\K$Y7Q.9R&mD%2]Lr,%)oIAa[24#fYkj\Hm2WM0$RTY)`66FdoYr/95ac+)r-kEb0a<*A+ci/Jhs_3TO"^lcZ<oNl\\BTb9e`2>mr&?HIDD3hn3=eLo?PP>%HE())Pdu4L\=O<YVq7"6YWouMQL&MXVqne8DI7"d-4Q@m(h_EMNTG-\p3[nL%_%M/o.)V73-"73)"-k,iT'kbT!i4enf-V$ZWO4A%+!99S$AKMBms)WaH"1l]CVPnU]qmVajthd-bFMb>P5Fp>)na8uP8e<7FaSE.17)RpnU`^+?o$:XDK\dF2muS]YSQ8"$,N!?8Lr5H%?qeDplTF;6D_f1Qg#88Xos=hucEa>64L"8c6\+<Cgr,\@0ZaB7^CEEoN#c:T.6/W.NZdoc8"AKh7bAm]c@XeC3.@(q2kb3g&.It6%@rCcO,7M,5XM+*bMN`3d[WHo==W*$Eoar!bK+TH8&(Y'3Sjfr[ZK,k9M.B+Epru<64D.%]2VqYQeEJc#rC%9^pe_W-:Ip'\(GTQ/%8Fh5;hhA*B,1=Z'#0)7NFMZm52!+n<Q3!ks@+Jf^Fs9^_=Vj8N`?W6'`]P4o=/YdSH%0o!4f(D"?.6qu&BZ78'&O09$._W!.VeaI%WcY5F7+V^8%-1'D'anEj"C>Jh8M$2+g(g4-k3O!@UA"AYO7L^D*l.XY6cKCI0-'I*6Ub.qV(_C<i#-GqiW)*%YaDP.\B0X^Cg#5)%8RGT9i%[9%!rf)nAAe6t&^bcuEcRJ;3M0)B<F@nd`/"f6_$C]mA,E\&8ek3kGJbR?/#"eU'gu)_\\XboYYuod#4'bV'##J4A;5aB%G5jVbk`D9]P7ben\QXnT!pL_49#QC9D`jW/]6q[%p`Er*htgPd5GJ1-.A<Mos1_t2jWAIT]Y>%(+L5?C1e!*]TS2k?lq=SuEdu.6%hI)".KSBB9@2mLk-#K7hpBcEpn^<d@]Z1;ATQFs(U34,t1k8Wq&!)N!)=nEp^Ce$@/1&1/OKu\`$t!.F?])Z8rZ*B&qZtA?O8.K=%N%-].,70>R`W2nk,C#%W-AHjD2$1Kih6+$'!rEU(5/E>MI$5/NM:o+Xq'?0]=hf7@b5aP3Q,]:*06iNi[])8=9/&rQ?-+9d&o]38%%$+n9r&rnmLA@)Qrp\!.@D15'SK!PN`+VX9L6Hk?&LPeg^LsJ\IV!o8&@d+oh_A*bqa?sPHjd;5h]g==3\%r+]smtQc&:u?M.FOp%D5S7nUR?`ONHeV#WP^b</g[5,F4A#AM9YC^VBu;%d>=\h>(I011NEf`7P"/9Q^Lc(^E'Ncqn$k8;aIZI2j[?Y\:YXmZK0;*9/&*U%FHnBaV:^<f9.=km2squ_*,8UP"c8`)qfho+B&O)[\1nr1R<DB`T_QS[^a_X8-RKj@9%$b]ZdH.!MMNW\3Q`Z@4i-!G?V60Bd;^gR%j(-*-?qBT]Z4']f]t(\<&nu!u]sp"RkW"DqKCCWm*V/@Q+rtg)GO&B]8p(>IWD@+<-paFe>Y9\aQ/hT$*+jXW@LG*E/bO2(St'%X%=.i_*qac(3kcD_$).k<G`<Nt[8kI9PfLnG6]5,?qhQm\kLV8!.m>[.n0Bn<mZDJ>?hq[Gh2-$st;Mf86/#O]#Y)r%hGZrgp]aKQY%Ae@l:;r>$Te*<nq"-]qc=*k.[ar[dbh74`C;VBB$&#ga!Z@'gu?=8HN_V3Jo//(-]8a-@*`WbsE,L9Qlj%<qdqaG=_>fOh.-'l`A%=:0ajs58<YWOP";^aoQQ==?jAA.diE^NndB]TFC1;c\3"+e5!"<g!OXV-(P\5NDrc0uES(QPH-S:r.I$K-sSK!0R!tEItY:@?Pc8%*$r@JDXLY)MOQ\ie.IF?"SX-7gqiBe:ld;We(?)s5@AN7)K5cWh[&#elurubr]&a^048h+)0/TR1;:!\`-8#.H/f(pR5WBN(U1i&%d5g9"H_.kkDs"a1M0\,MiL)T"-FOMF2fdep&oTMAoG[EskD"t_BP1L52dW3jit^+#)nsE"du2*p![VQ:b*ePlVBHS2Q\e(In0TAR%0@@EHPU'Qb=_^PA0+!Bo8Rl)r*[=@a\!AQKA\EcWD96fs^qLNCL#.o\G`Od-ERV\%Efa?j+."ch.Q0[:s-CfIjs`U2"59(0OH(#K%e0Pqb[E^l7.#'qX.Zot.e/S+54AL-"_%7qu@bC5GB&j:Cq24XLCK@JKD?]&(Bi^qmY`=K3M/YsImNB1k3.V3"P1r$o(Bq&U,F;<r%H)_t\Oq&43Q@`Q@)V8t0([TDkV3DO$j'L07@`//J?uXl!=co`%hV;@.M'U(#?7MjKL^CoUEDYDjalAkQX8O_q?g0CaVqNRRH&]Sc%C&-F.DlZfa5tTp6Vh:0r/=1rSdXT;)n3=cJm`.0m8[U[TIdF5d8a./6DSbE$8)3#s7[Q.t<%f[H19/Vu9%T/$5\*`OpqStM0QB.P%=],Se(p2DsQng=i@+2T$oYU(m3o4-lh)k%^l^V8p9RA3*Y%.bg"Qth98L@THOq_qk>(:5mAKF^bO;hfU"8EsHE`HANU_NC*>0i\8%C%]LUEb<App`Eq-#IVj>lj$ZSXhV5r*YZ;)@f*u#GVKi4O"a-]>Naq[3ln]aV\/PdE=-/K"$:*??Xe[/PCDB'g2e0%G?e8X[c_qZ%\8aZ)Z0[*J?V5V+R<."RQFG:d-72[[GR`hlRnG2m??b2JnhY<tk!NClf**$s',gFk.:%0>4PEJ%BkFI60I2FU93Sk@Ha7T>?%qJ]%p5sMrVW/C"mNH^E)n09p?EVjP,[EifWg]ccJ:/lTEe+1)cbLeJ=3Zn,.[`DX8gcqL>l@#bn.m7Mo'fYGoSD/Yk>=%66PgatGZ0QH%M0BeFh1SCM#\LrVl"Vl>Y_e4(*:e^U(h)Fk;);_aWG1gm1MB*QTF3Z!DN20J2]6%Zpfu<jXLEkfW>2=@4g6TY?r@qbK/XZVP'aI2%b;XI^>0lV:ESsk>#Y\Gi:A>SLXNF`CMnQ!9oY<&:@'G.4217%j6P!Xd'2%?:*;>VN;C:'5%&V%5DSR:dk2oQ6(g4nmUu-m7#`Q+I%SZ4d4c-&Pe"d3BJ6i((.YYGjqN@Gs.47()2miLfJ\ubhRZ6nu=cEZ6_-:S0J'K+\]JUJt*E?6G;qUTq2(h&3p2q<#ePgTstSM6ls%K4'p#6Z2B?,A`LkT=^I_eW!a1+(XUF_-k>)o"t,<@9!dbko4=cN)T+8O$[5]K!FIZR%&>]2^38+217Y5q6RhS.YR!%hZC]DqKJIJ%C`Hi\6sKW_Sl83kD&6YaT>c&3Ylo[P`BSrrX<'1c+WWEM6t?XZ]A`XrrSs*$.nC4_4`:(C8G3NDb#Orj"RA&BD)&o)\XD#jhr$Eb%>@Jkk)-aiK&0j'_`<-SbK(1XY#C0mN6UmHQe_.-3HTr*G=7^T8MC/^bRtDkCI$5-hXs)>)7o*ZqYBcTbjfek<hspdH8!jG0e]\KY%nmf^[33uB_qbi@W\/-CG^XO7uQ[;;(1"sGg4HO=71NjV(=*ko9Rf`(q4*AFS5"<I#p^,K`'C2k]&!p+an73I3E_pZ3`=GQfI,9iL%!SEm2hd3m1+'qLgn(gA=s45%]mj$YPd]H+8,[_hhP66)C5Ms,9:."QQiju;TI@c[*'C7sA,Mup_FZU5:V/b=g&#ZR7@c^f`n.Hs>%DX2%D,=\:&)P*U#?uCV8\B5kOOT3@rY2Jr-6]jh'09gB(]Emjgidq#g0Zgq2dg+6Ga^$$m'S1ZEP7!+UDXn&l^q(/AJ%b$nb!>gg%D@a+,UL'Bul-Mgn0;XWc[V*3$k&J9`=@@R<<0gJDahX`paF65=+\hJSNTA#sZ"osXjIBUR?7r(lp%GnV4Ir_ETjZZ+o;\P&hRm*Q%Z42-=;!-G)[PVG$-dc;g(RSai[C6OSLT&joQ\*#e'^OWNbtYjk)pu>Pmh_cbB[-F.DLheO0ctCe[hrP"6'O;UVupfu[n/-9@08fp%NUJjC>E#e(n\k))9'gl-;14^1:1Ck&)=Wg7<!05&Du5muc.Z#mBNHn`/k:du_9dtoTTBf^m)Qf4a>-*VJD'g.?d*T#@W--:;PM.V%\%RGS:DlWT_Jl,ng%]1>$DJ5mK6G^hleM<m^^qr$Za*\o4[^NOG(/(@#<4.&3h'7%cN*J>m*3W%H3lmT7D%S.cUCKcbMk2L$qq"Z%eU;j!>/(<hM&7N@APijr_-;jP?*n;\O)!J,B+s+"cRm5\.J)\3I4s7)4*dIW@>=(,2(d@W/hY5[b6>Bt@D##(M`nLUFUu--c(P[O%NCl],Q$l2]EEd"U@]BKn'jE+-"mc'"PR`i"j$)IAD9>bhBHFXnG%!g"s7%ZW([7Zrc`m'uLE'1R^hi;t:7VP:47()0V=0($cQ$?W%1NlF\s&XR&;eAWq]Y#!=dqdg09#YngW-f,#aU?9.JiE0_gId`/oJI)L;Mnd7e1MX1+X?Tu,Y#IZa]"E[ZC^77?Vkr:0]"LD\D`p9%YTh,F*MqIeh5DBnf8f,cK)PT%n4cB>e2NODL'[*k/1D2CQRl77EW:b4^<$YE3`>uOcY\$7(/mjM[e1aB0ake_V*mC?`l#7:>R<!-%>),q<iE$hsA)lj0VYYBQ2;WX["c_.cYM;@VqnI`=b29Gj\=;cL%5=@u3>@ADHJ`YpHIt&5pp>Xq#+=&6BqO[1r1*6Uh@K4jDq3Ru%mf2X.GUN5MQF/?Cg4&/ms0Oc>@qqmiRo_e&fqYB47/X;43(R.-/_fOmMl+J8;(1Bd4R+)II`ZL3MZ`6LA*X`fc%ks0,/kbAgFSgM%nh-%$QWqXY*)Z=uN9K-/7L%o`6d(U'h>7:cUcs.7*gr4S+$d(G53M!*YQ5hiT3JB9UC>O4DdfsUAh?L#A';!YDa)%V._1D3`#XRr%,RM+[7Z3mWH>+gf/Xo-I,!hrtfN7+chbC@7-e<(/qmDY1D6ol/a9Wd,rQ@?E!*^?S+(ZS<RH$0nOVh1T[Z4OFo,a7>aCSk0esMX/%S0dURkPqp%1@:,C<q/?H31G+/qN,0165_A(^?HqAmFnbed3Ag%I?-e+*VSX7qMbZ8lpH!3a2H$qLI[j[>=t\.0OdmGa?#,^YT8J\%7:HU8[.sHoQcS7AdQmUL7Vk7u^lOf1Q-TOrmQQ]Q4_i*Ng(^bT@g%<bCU%/KHEl$uLR%Yu8)(T8)6ML1Wf'j(dc[+N@p[8q"^<^$%aK8i5+4b)'(RBTS%K5,Kfk*4*qfh4dD;c7`fQ?+gT92rV1%m<_86nPBj0%LU?LF(/^J/6"0Pc8I7G`DoT<Vs3g-cbR)4hFrrA&,3%=A$W\o*$W]"Udq9b=F@p?Rbj?=dj$)HN(I;-$rpF*:A9]LCc('O=\qd&8*#<eu'K>lgn.[:WT=XrPX9?&(;MADTN"m8-/UalX#I6%T1Ir,]n'k?2]O^CqWnN.+rJM[PLU.i11@kN-,L9SLBW'n@gN7LIm)-2igf=gfKD6YRp44e7lHE<<[5^e52W^eiWtCL'g#M**h7D@%Ea\kAdJZ?"a"k8,i.*WY1<5J[?LV&@JsBRRp.JI0'oVeISnL\Sd`<)OpUMjNE;sH?Ac,qUF'q(/P3!Iq5(=;7e"W]j95:_YHc)p!%@#t#NE0c<c!?D4p)Z*B9mi@.+-0kPontKC,h.:oq!P<jKrcM8&66>&4NSL^pZ0@[fOAL71?+VCiAP1dIfQLX0Y>P:r_qlA<mFOP(%[Ni9(Q?BK-^VoKj\b%d"pB6Cq(@jHmK(_-@Q9lCiID4qh[b@[(dNOi.CM5+:p>k<2JUDmEaE%#Y@O2)fJ"'22<d>u=#;Ii0GEYpX%4Y/]WJ8S)f_mkJ0^tQs85\pcSI$r"7Z[_<,#-t=iFVI>`@.pq6R8k)W"fqFnl0-T)f)3O)=bmX_2=.!U#&Cu6m8'r_0._HRqkG9P%-Ed&8?h7Fql0bt!fa!o;OD"0BMa>0kEjt\%BO2ZkS-UR;a)/jDDa2J!6juY+>"4,:M01pcm>&Cu.V]Y?b=hTIk!*:n]\9fHkELJa%4!Dr'DNUr6TSgPU=0%b+BD$9'j2O#P6*",Fq;"nS:KqtN:g99gnBi0#rOXW64-7s9[a]MWT]%3)<M>9phRIDEaF\4KJg#Z`R?Y`>%"4gbF)QYu.*!-]:$1.ZYIW+$-JbO#B.H*$u=:hjN;u%6@"5iY%DVidCYS.?JX(@2,DQfeePE"l5!kLX0?&%(0^Ps1cPp/'tLrBOa%22\)U8MDWY'\gMHHtDfVK&M))r-$_V([F"kkAmFs@Y'eeU#L:'n[BFE\KrU)_pa3a$H:B+KII9TXD-]9r65uo]EI!a7DWnt4aFU8%4kaq\!lhbo_cjQHrhgEZe:m<%SGqH8hdOq3MX?d1,u+KYep['>/&+"sC6[ee_k(+8YPuGpM3$0&(9!V_MA74h65J2^TkV:7V52c"%r%&-_8[M<OJ(&t0e;P'>?uamG]8A_=\9gC-kqZ>]TQKN%ArW_>1fNlVbCepp@kWWq]o!s'Ml(Wg?2]h"VKi+:@5dU/I%NDWK&KH)%QXYPXgNob@FCuY9^?[#Fh>"BcOGM"sO$#G-IT%,Rim_^E&Fj-m_W;gATjSF(mE`CNV1*.-EacB$H2Pe-aEnJCMe@YBT8p"d6jtii%#/Y.(.@.5g]_f(H!VbBN;`'9e-%_I<c,=g!0W7>(S<`UY':30/NLf#2aQg\O*!f]<GZiK#1oiD96N;;3@`?^.HI/+:dAViH%u<T0%KRe;)a*&/m#DOKi&?d)i4V[ao$6@P?NVgf.=,^Dt%$<ueFa.IS`SS6q\TEQTZ!=m<&9Z58?pfm(3%S79f[RqiOXM1GI+(C4Cgs=s%0o"-1f'HDG'RMWV[9lEH0('iVM=Gm`46=_UnJ)J8(9F2.i4ATB$sJ_k,\HrF9s\!bRj"GVXo+&Z^0@kFHe,]%%ia*0AgBM)=mmdk%MBnkbYD4%G7&"8_:*A)Y6>4_hbu^=E7qTQAK$jR0MEMieg2A2p!c1t^G_j!>'OW?)bk*97Q"2ER.hb5G@`&g>36)MU5QPKr=tou2%?;ij*T)E#U5-k"BltXR0AGSj%<P(Xkr^^Ib#L!ZFbAqD68t90oD.h-Yr_P<"W2j^JNaQcp/ud9g*o<t!b]Hrf.lS)oZ,RV8eo884%Q7`[^6P$FQ8Anu+_[]$%Q[E1m8YP*dhpW`e2Qe,Uf19(C1[@Gp2_r$7(,fD2!255+OFp7]ZnEk"Kb>h+7m2*bi/1`7+=d[?b6BKj%k2U3k4XEDik6K4hP*HR?7=>DMghjLD8Z#V^JFoL$KtuPb&#nVDEMm2(fNSeoQVE@N3OtqJDh[/:V0sj&^FTDU>RQ]E0Zru"60i"W%'tQ)#N*>,F>QBWm#D.J+iDZs.&([A#SBh_5hY#nKbjaLS_MW.oMg#d"BTEip,k;SRY@^XY!Hgf,mQjV*?0WI:p?_cFeQUOJa?$oV%&BYos*!B`P(Vq#qML#(f2%S&FH_56Q8?E?M!D)0P"k@3"HZS2S>]g+Tb-CrK*<%`7E`nBR(op]i02ZL1Z"UllZkp5RdQd%ToW0r3%nSR](C"@Kfau4gYb0+G/*OA4l<MPKS1ADX"=uB&^oLbN8W'+^<D&2mKg'&udMJrKp<Ip+o,orh1iLUP0<=U9]77BIj]jIm&*PQo!%c5FpW;eG6T;O/\-DUqFEi>"Le##cr3F*N2B_H<uWQSN;q=l(`Bl)0PZj2;#Tq04ot6noucZM'AVri<2;k2m<b(9*bHD$UM<C'S1W%=>7iE!"K_%kVGP#)Yj;lKgWRc6EZ"MLJotaXH^"a>RmP\$R^4sjY%LMV$k<nF^X1HZ=U-I?+*e1+iY=qRSl(B,$(6,%V-heAcO(G%2iKa1oKu/B=TJeB@T!8AHO9g+2))nWfD[A^^9-2U1>hW1nLGc:#Em&];,1#h#=lNc/NTh,<X2V(o(V!^%VYuce9ZZ],8`>@Z>Zp@%X6bOUp5Nd<pB1(qedPcgXO"(Lk/<WL4Pdtu7dR'a1VtF)O5q:HSDVC^/31IhI[bQ4A1"NnQK/W)M/`H[=[qi@]4FiSI^`Z9]5M&f%5Vi];4o^7>KWMbJ?Q9r/-&XW8B(.-;*-5Wq*b'0<qHLZ^1AKE-M2A=CM>]Tp8IAqFGbbCmSD-Hir$'oM#<DA=%Pc'ucLe'#Grq+>%Q%`$;@oa"K3G",7kS7[@hO(1:iNM;$RL*(PUUVH:"ibrJ*CcE.m$L\+@Mp',2]AZ5RGn77IY#`AagYYYee+bsb3dfZHA#P)R2MVs%UkmFd1$/\:'F'qj$Y!jF>*52<PGTVAR/UR?=A%Okc?RDRL8*>kgQf<O1O%-!1;SS$!cZ?khID4Qq"Te!pWRtG,F^^R=6Fd^o/\,R%3cj)R5M[1*]XPrbamA68/kPr>?jnM,Ee?:g@2]HaUng[oYGG9YI%_GW"sg=Z2;S'hhN/h.J2K-fkBr6LR]p@-f"su9ah4dp)!*\a%",YuDaNhjcAdst5QcLd-)(pJ3`_>GXA69@`*KDh55=:/jV"-ok60.V_Jjc:W55%9#cf]Y_51^Kj#HU%R(GE'W6CACD$!Yl`&.SeL%/c/kef`4+,m..WK&!$JKQk)r5d\Y;2o!1$Siu=134-HYH,3"T-hQX6m"pI8ti@R&2a>rua]$,s)-.EUOnqKP8aN4VplH,D,]Yt-i%ogJALanlk1.,oZ;]N8!>e`ZfR(E/Ei[u$'g,oqr\iuX;3NB%i40gd/6TaCGRjjN3q1KH.BJ&-:V.Cin_&s8Sd,ZufT,Y44g];4kP%UXH)r4HrLi877UU'`8:ri5Cgm+mWi3#,c@=Bnhc%M78t+H)F2ql]5^^F2O/sd@8%^;d#>!c,;"tafAei,G)m]8S+$_--]q_pDQ&6%,UkB$L+HC39Yo)2>bq?>R_A@5[)GSO_qX$t?*e27'c@u:DNVaYk1P8_SWcalWI^!_NEes,$<_:<N?RTs(fq.[:WPZUc?IQ??sV(7%b]eT%Kp"nk'.FQhKZWJU;Du#,0d``f1>0Tslb#cj!9B%Djm/!=]Yb#=</cVP7t*ITMV#Lb`8CfOaD\S?IC5Glpq48D;kb^Uk&T(l%LI\!!W')o<i&<b@LZTP>S9aj>5OQ(!F*t+EZ)qjhXS5%0h#^[fYWpC]Hu="0#rS7k[nr_K-5Q+P*j<+32`6FM!.q1f^Ui)rKInEP%!*%@oB@upHd/sYm'!*5TH-9T3`L^=>9"1Y.2XVe"mPi]]1)s6G!;:$bl8n_9H+0?,1APVeJbQ8MfLA,Y?uHN-V5tP*rU-@>2g.P(%#bskuoG(Bmc,HNDn6-n+E+GW!$kY2'lIdh#apIe(j_@)e&V@kJe/b54N'c>F1dcja"Hus>N0.$II7Op*Df!2!c>7t\-20@_FABka%$\43b(V!<)rq?5I40o7[8'V=/$)L"<T``+a):Y8!P_%#UO"m6RZGu8Y'oK/Q>"7:A(FLc=3;0,7.at'Z9*tA:L[D6)6SP7QlH.-&%oT`LZA)\,qD!^af#DLXOjX?4J0^*VA-h:lcJnC>Rj@VKGl@QN7MgP*sZPk365o;&!AsArtrl@MtU.?%XC)hd]bXb#.0hV/_LcuI<%c,?HC9R/AZ`M6ci;?-`+:5Ui4Z9.Etaeb6#LG\9>UN$"!"CkR/R;VYS]m7/Q&jCU$?Hs,W3afajeO-kJp?(N&Hc_rW5qbmbL>`lu%@17KIc^]rG]t([!e@7u^O(HHVR2R4W%*?1YGo;u8N8\=FV-mtDPTul,&H"9L"Y5XRB#H%9oeuW@aFKV8FAP0A4[9&k;i+ljAXG9N%;R%SsQdX-7<#G=+1/<oc)SjLpU!u9cMS4;GKX*?GACsQ(8DrK!"CZ:QNCf3j(RNK[>G#?ibra7#R/mkU*"dT2&_MJ[p4'L>l3L^K%EFr?/$F.B+_oV(o)aqLX7"+[9Jt\6*i\Ip.%!EN^EjQqN+>$)"I()LiQO\B6E%0n++T#g+)';coX%dD"<7-kkQ&<6m\Wi6hiM0`1%(g$ZP`,LEHn`_XR;NNgj([75JOGnOBF`V'k,LSa-cQ[OrfSbSZkq_P;CO+$ASMSh98/M"Aj!NEjs1_QJ[4pqs;3)d\m=LsmOFNbB%HI%PBnG7Y,Kg>(MkTH"T`0fMX89?2_W=-QgM7h]Dq32:<cDuOO=B!lQp1E>_8t:aY]jufFMA*$u3*n0?TpUGF\[dq;kMgJ7/hQbV%"]>o@>7`h&jNY_6\r,Fl60f,EgO2.k9Lr&:Q\JsF4t`[AJF0S%N0DjH#E/\f`Nt'daHI8J2><r\:)X&uHK@2!:q7[8<udbD=dY5F%,(*=nCjA#Qp^+NJm5&QC&)Z^&4YFrh;"H6@fUI^j..>/>n$Wf2.Z=I>lBHHVh]m%L0%/\m2!eX<'I`!fM+Quc<-T.)EcNTL,DV&&%6o_9f%MN>M)#fiRJ=!>*,o+L005F$*;fsJ-#j!YeQRMRik#0?m!V`?qMFSaEqDo5.2RhE(4n@aQ,.+8,A4?uT`23S4C,+g)nJMF'%N%/FGF*CaY+D'Pd%XGP'I?]\NVW(@0#D#%_!/eI8\Wi8tK4-FY14nu(T*W,P*dg."p?(<Hap%=.YI66iG!R8u@M1qc"9==m)7bDU%>Prlt9;KK\$u$IiS+@%R?@][K\b[A/_dV%^g8FW(!R%gbSiZq7-Qe[Q+Z*uerfPl:AtGlU1#a4qG'g=R_uen'_TsV>(o=EdI'm@*%(G@QgQ3:]fH:IXP=L;FG.Zk4KWePq44YO]nNY,Lk:""K`fUJ4#.<-q(mNn'_bWM4(>F>h+auMq-^s/^?4T,_9ao!G'rspZEUG)iP%O>ePRdP7fGY_SOt5nXG'iE>XAPZN`)\[Y2LPM`&#RUZfpJ`NdVlWXYcm/Kt`9I)E-4)O*NdQd;i`?,E[A>&$DBXn*uZ>[l1`<:#i%3J+k*!l/3Vp5Ic;j<kQ`A4D7s#mifQ1lh5)P<MT=SX*@0?E_8<rElA,VEXI71]3a8"9_)'"2%!V]fETO6m?:nXquri2,1lN5'mo_%:Fr:0V@4^t&oC9!3MBp3iirB?7\onpZ(8^C'4T)fHZF-uWeVUojDB34kW@4s1JL9omjkh47CDh5o")`5O%K4k\npj,9ck7*\=opW%?r4.<8Ti+DPDaO]gG/+>c6/&I-\;\0p<2sY'^Wr^eP]jE<%1a9b]06$B]0h;M+m5#N)?Tr7^r+ooHAoQKp'P&7_PVW^mItC%"=]Y%+Tg`La[Ne"80,&YL*6lu,fY'\A@k_*`Pj-Fg"tn]5191p;-AK*qnb+$E2?r\?9CB+^K[*K.IrE$m&QuB0ZSp5;D&R:5N)1]@G1W0%<DeD^Q/)X-X;NS";CW<S"C.\c%X[ef.4);A%!tR6\tXA-@*D`gh\$lIF7joNEr'c/.H.ZN?mphb>[AHEk2oQ6AmZDKP-.)$dj,LB%_2N)"'ROn23@<2%Ate"!dj^B^+0ag02Gtgl!61DpP#>C:oUo*7Pd&8jHcb!5$U_.TERf>X]af>ZEfgilA)eUcA9NNPR+TUojL",p%fTVLlkd%nJ2gp?nJ!h0Z9akp!_M_f??EPAi/SGr&.@[@CSBoF@P#mUP,jI&t^Th/Bpa?pF98Yd(6V?BY+1_CHCVdMFo='=bH+EcX%E`NWran7m9gORqp`)SYsi"^T[Es^q:T8$c-g[rs5*@%u1eCoq$):gi7hYgeJ2kpT>X53F3(<23i>/'f'[*;UU-QAE#SQIkh5#UlD%<6^4R;3$!F-o0`AC5FZmn6Bba4`]4?cCS@d'87Sa$GJY*;?ULAM^[Y^A5\k)0=fU-CVaDTlF6lgk2oQ6<"gAJOs,2KI__?NB$\Cb%MS6R2P]B6.UL>fa&*_psYiblq@V?9F7u+dg\O_Pm5Mu*rC8\d=@-/iq6>R1EM'-_30%-H$cSn!D)c?>FJadX@.8Dqbai2dcB!cPG%@f9*GXO1>bf_sPL4MdJ-;M\C`:(lhf5,)WEi^e_ffl>d6mR)F26uml!3Po&S&n0ct,)"JT)F*6p-$\St1OgBWNiHK*%PFSoTC^`Z%8GXa6TZFt1E;5Q'!tHr#5-mfjH3gQk/(tPt'\L6s`>KGH%XW8;$0B82a0:ma6Hf\@cOaSm]$+U2@;g&SdX*Y1c-g]0Ik0s:rm@GC%DTV:4c!K\WDRl64B$I3slT(INCE.nUf`a;_:!\a]"Af0c.4sl2hR<fmUU1/Iko$%V^j8UG.iSD%TM2G^/>b0ch?[4RC#5AbjK+)7%S$0VR9$<X6F``Z9mqjD[,JHtY1*tLMRR+nOAl9u,;r2/cT#3g>WZkdtl,r5Uf^0XC>pX&k4f&l=ni1\g-Iu+!^jLE(-J"6PA[_u$%gnY)(;ju05\@@,GZ(BAf.]5e+M=m+@HYn,rs)+[:[f.cYlR=Dg`:9KoXJ`G0OKJQ>_"r>'X&;IPgB?)+Rc.]>gB?)+g55Cak7=eg%dX89r#A%@6M9lcq(oTsV8IPf[:h"s\P8FpA!f938Po-/.M8<qO.PXIcM*Xb!(n_S"!Qn/H<0,?=H,2F@H'*1t/P&<E&Mt[^pr4d6%P)b]WF=J`&0'*58-mt1T]Y?ub-'F9DJoiIeP)^0,F=JGsNq.aC.Na7;Uk;W-'^:^$PRXEefoU<?%&?hDOE@mWeW^I;=%WXZW)Q;K%aop.l9Lq3:"Oa8;#We(QS<YQ7P)dt@F=I`_Nj=1W.LVE"P(7X($"e8A[FL@="ljmGmDZ9kKBl--;A&0WDABf)2b=6Bl-(U$(!EBt%da;3sBNlCN"/9n'KrLUW5Y"6,/H!7gQ@Oud7sBH^N[gWc`^5SWbMI2N%Rd9I>h/Wr*AOBQcAq+5HnuQd8chD[/>q2YFaOLmPj@:$%9IYfIV7C7]O#DhDV.Bth*gFU-niha&!Dt8%ko?("ndD:%8nj\ZV?\D%V6n*7CHj;#.A_`,DiZf5.HNJbK2N=\8eWHHK9DU">2Jf;%CBDo:D^MX8Is&SlE`mf`;G(CjC"8BTN\1p?.`Z>5$)WsaP55A3M(,8I\X_Ag,:,(@]XRoQCfO):\t6#.^u"f<Qr:*+:Ou,09IU>p%(+IEtMHN>lgQ[tdQr<@YLXmt%0pNM,V+[q]e<UHR,.0^*Un^R#9faCh#8mt3+rst3B[QoY3ll!]&Q(U1B[@@UkZg`D.\;nPA2M&*%5,8%IaD=`d;7]+YR6Sc"6TXh.k-NL3A0r$'V+\?m3[.1_;OMVpPV-N&l%g`n8n??^&N\!CN]7WI95.'\,"e3-Quk`\/gW7:LaZQO%@F>`b\s1(-,GK94Kh7QU63@P<fhFm!;Z;i>Lsij3,um,Z:!-d?&Q--(]VHdHF=DE*7muT>lB70`cp?f7N=o+"PdmM6U3,KGOT\Om%Pd[A4U3%i"8Ol0Mr`K#WFNC@:H:[S8h/7TI+5+QOVq\se(uB/IJ,WY-N_6&g+qkDpCNuVF;^9@Ref"G:C8AI+g*%d""VV88bu1FN%>"F0tKD)KLRluXWD?uS19[5<sD)&7N#q"5uZh^15\EbLT)ajs*'JC23d>]F<)2>!pNn>n;*m7jP/5ItW-l1+-fUOL@Go#Hf6;uQ<%,?2K476WjI[irM8@/eeY$1]PGTlJ8=h)A]Q*I1XGN5e7YQ/C+_r?t^b&@G<ZpW>i6&D:a[k3fi+ISGoe#H0Kjh_WK%MUcODK]i+o%_*k1<NMh-Jcuu3BmP#R9Ena)IJ<+0O/5J&cD3BX,cSU*?Vd=Fqp8f0[XKmkH.3/+=7E27Gp_lZh@$Y7'ji%BjG38U>_e0kjj,mAG%>7Ab(>]TrHUEDO2Engcu*ifVL>H8f!T&KE3<"Z`D3^^tU$n+S"E1F!`qS=Bm^EoVr&FNg$MK//jO_%;k^u[4O&1rk47`keKcu!c<%':41m](dlQ]Z60[MP.ksps1X>+\MOY@h\oUk[5"oqrn\"JFguU?kb+-"9QAV?<pGE#_3D;!!jS\/he@kL"9PA1O"CQYl$RVFQ>;(%UD^qK=@q7;9thbR3ilq?S&\u*":0UEA"F2ClNI=9@1WG$%hWu"WItaT"G$;t7);F6?kV47%@K;8Mp&N=N:To"J6@P0kZ_K:57hY,%G*n1a4pdMCKDU,*nF/-40,eF4$t@!Rb?\;Sa@FZe=@_NLjO2IdkO?!Oq@\QJK]D&^Om\H[H>!u1J05C)jrbET?V#bYMeE0e>VZG>%Ke!nuCKLa3%p<Ad@)7GnG(ErhQsVe5CDmLJ9E]o8E(<;5_hf([+L&XsB6K"PkV*8DM_TEfe(aZHA%@!<3Qjd=nA+.(V$!SK]'&Wc%N6?]V1XLaUJ=)4E[:FLd7=\if[,!LE_Lj93N1JFF<"TY'b?qMZrcon]/B+O--j$L@DW?&;#Z-I(^ac"&a[M'e@O_F1-%K?RG%'$S%;$<9Zh818flfNgPs'(j[/4@VN/KKS9rY@4.`@KQQ]BM#,JNO`OLd^%TF;VGbF+6)F1X12,-4&3uM+]m/`r'oqbRnikS0EL)_./T&%NCVn4d`HSJY+R=)HQNOakqQF0RE)m!7qNmb7hNI)D22e(TDU*hNRVE`EQs44?,?*\=jET#1<>u6K#+)F=,WMi5JNE15V^!.V5Eh-%Kjmpr/3K_W[<U=0?jT=G6#[DB6]XaXq)^)r\Zh>-7=ff+LN,1gTfl&gfad%Wg@h/;_Y]21<S#N?A2[[lk8#>uR=;R?eF(q5GWU/?%H']G9QSW,c5!?o.[*Mmk&bSdXN9b.a2>:iLEYI8%`jkB&G`$M+m;_8oG%NE>/;Ub(R+l&<"]Ak7h)nAo&c/7.=-&WDaDBB4BbcT5%m[1<HjIGZ5*JR4-qr5FI*+D!gX6<Zl0&VSSV\j(';6m2EdTUc1G9f9=+.A93a<nN]SNrW&B85f$'WX"hbU1`M00M#Qdj(B4a-h=e%<>:LpbeLJ)GqEVjB-.`24f`)?]W&@XF&+O9]eaJH/J!?PE5a6Cc*K-_/`nT`N3gm22g@3j"2h#RL[X$2qB;#p$A*_N7QokK.E6p#%O7ZhS.R?a-$/8j^1`BXZM2C`+%174cdgqu$OrLWBG7iBd,^:$^@Ct\Oj`9iQERhmp5tVh'dpbeTrV+jt5)LBW\tMeBK^#8aY-/e2%.Ycr*JO/0I`?u":6-q"q7!$@.+jW]7`<a@fD[He[h#tWm?s6mT>sUF60U?"6XeZTZP'k2a2B=WAKeVdG#U@f6?18QX`teg$f6$%:%K'Ulo:1UUQk)'7T,m\%H.JXQT,b\CnnUjs2!=o6@+^;ofgMR=g)SoPu`C.#bH,^$6]&EN8`fFf2OsWEFat%DHTL[YFX#QEO.Zo<C%A`o0ap.Df(`Lq/%kq>E'IX^od,c.%aKB8ApT`sK>[Y'FC%*oM.M_*+1DE86O@8W!$ZBk.-K[M37-uF-dG6tiI;Kisj[$:c-&p0ss%4g@Q_E,E0DY`C!\No:U`BKFEh#5uFJ*PqQifWN/Y;oD0t"a^j-#/N8B8h/I$G*<ERDIR3#(I(M@Qr(A_S_/_=JOrm?`EnQU1bAu7%F%I*nJa1uuS;__T#kZSUf^6m>(L/a_>d,?.;mHEGIGACOg[X?H:)X]c4/*?31l1YR&_2u7M10aZSsX<LH_UK7pZ'*SVoOHG%`L[t%4iWbt9d)`T;DFk]=%jVT&>=u.VN+D*To=>qN`%R)XREVq9ITXoS.nT3K_!2d8"gVj-r5n!'KRA4g8Bm2,b8C2):qS'V-lX#^>DC7%Te,ZA;+rBRnt%Xn#j9OJO`SldO#M1',@up4$7;!MarVqIUFqkM<Ga,*LQ3L"lla,S8!N:]&E0l=9$LOMKj[2G_).")"jn)Z6TPgQ%Cc_9SPb8(%<9HVLIX6rNnXM!X?-Xod3IB&9PX-[Qcn,cbs&"aGrQK>flkYIu[lA.19q`7p.(>G2-ZherW%4Hd8l"f(MK/ZCCo>UM%e;=8gceP'Q%(gSc>U6F"`ekF7LI#4P@_r^[%aCZaTGu\Tj%:aW%3VBX=<Z[#8Wc??_k^i5(.C8b"=84.CUm2eEXp>c0[ZDZU[oBb%>+>s^%-Kr-K,ekcd+^SiHCK3/G^5J%"9fB3Yh839<Crm%fjTtU<c2&><I#9YeI!g^>)GrT`I_brNhIM<(tN#uWb]m9e8<$pE*M_l%i#)8%3fFe5B5#pOFpKG7%]eg[Kh%NtTu/k1/=TlpaHEs65!?p=A+q@Q4Nr]$ItI&C-Pkpu3&l$t7s]`HNV&&JQ>aM(=c7K=,l+sA%14GOTd>RcD0hmFCBU7,j3PuC\#R$1`grF[^2s_R)`P4$.qKQS.AmgNJ<h$(j_G]Mor@#+s7pK!'/oV1#,5/jYDERB;oWcQ:\VDQt%(;ldf(^pbj#-?>g.L0<`0R;b9chjdOXdE(LT">WTV9A2a[AY=N9k0*B@^E>L#*bq.(E`na:aq)eC/YNk7PS.+&"u:p3'equbFSl`%Zc">ULV%XBpOs*M=:h%F0_W'fj4(-/?#SAcLfN9)go8K\Eh*m&.SnACYs`aP8'AX$*jn%+`EP$qpKc6q.[5MkASTiN]3s(aOd.3&%k7Q0KYPE@L!g)3*(#qt^cf:>;1ut]HPcs?4-'`=/Muk8q]PM7GqC'Kr0g?a5baNU.8/L8`ZXbX]Wu]231qgOu[.r*['\;O1V<^B$%Y(Q,c;R*aXm4]q]`S@YgV4n^boQ=Lo?)rg$V5C.l="7H/IVeWKl3`>sH;#`&(.;J,JaP4jcm=+R\i'_U2@kTk=,f9EWj*9Dmu*0T%HAl4ON\"gj++uoc`\3oY?TO(%E>/q_/cEL1(KNSF8KtJNUGu"-i0`5Ge>[:tQh)BB'U+kHT(7^DjjT>n<?$'J`Q4X]IsEVM.VXJ<%;(CEA<@YttjO='#m[41kHYd[<0Y+Y*KI\l"^^Q4'Tao!%O;73oVM.o%ThNFPUH56=HlQBl_%,:0%/<LD0YHGD`u+B8Z*#KZr95p?%I86bfo;d'P_f+!9%-XV0)#0N%?pHr66&E$:ekm8g=qjY6gp?K,P\@m$M6?(QAm[0kXX_?+c#a2SZ0X0'V3R[5HD"D_=V41<.trt_%^F2V^9JjoWSmbfcOpFEYdk;,04?l!KYq]<'0=,r0B4-Mg]P"WKGhR8,I%S'`npJLWhL[J,h&XGpMHpdR@Ch6IAbnn=7H_'LU8X%X%?^hPcTVQ5QZ6K`mLG>BHWVkucO,V7W#;I5/`Aeu5C>V*0El"E2>9R\pMp3)V`?=/U\qb"qB>L*OS\$Ykn]97PhI1T\*YP9d-pcG6%^(4K?$7=B;28-n(<VY$Q**;kG1FIhQGXV>kdQ\/#*hOM6E3-$i/#?W?Gs:M`IX6sP&5&t]FES6i0!27Enl4*X7hEC/8N$F!iMaZ(%2XYXFF+-H8mP%Ciqs5,h9)t_pcnH#1UD6T?6]7psbIgZ1o:i#nY*=O#ZDJ7`^b"8Lr8ol%n.R.O%\oi!WJR8+jj>69YI.p;'CJkX%;')1lH/nkIODuIRN3_0ZcM<;!8V_;XXSZKQ5!:6@VoGm(Jp!;A"(`5s``ZidBMCgc:pi?CCLTqb!8gZdI`kGjq*'&aCp\`*[_&-@%DsoB_"Ueo2fo1<'*QArt^U=fq.)Eh=ALJ0]k?:]@CLN,d1jB:T3\6)%CtEbGlnH*EQ5MRL,!b3Ho#PfK]cfl<AkT`Zh'b@DM^k:_%b`N)E[KU0tOtFB'-b,+X(cR.#"JL(-G*q?^R=*f;e#16*!41n$=I'pl@QK&/eiVgrd:(IM.S(pe<Q2HNG6h<":W<)le&+trVdfRq%HWWk`Nu)^;Ct1J%1Y!BsK1Bnr[MmVW-QN5G5fEY'dq]Ksn`_cRl-R[;&N_&=fUO@Dq?`'rLZ)HmqNd,;2V0l'EaN(34,c9$mXYC\%Fr#aojG8G[3EYAM'b!JbLZ)hkR(-:%*gQNi7g;e3=I7>\4Kl6<(aKB.)BDJrFXi6*8Htdq'9q%FR,m%*rF[_<I;AtB8QI's;GoOu%T_dj;df3B<`BJoGbp`Ar-8gu6Z?$><iHuM)CA(M8g_*;$TuHuDfj#ha<a_D/a,111$A<e^8UU!cR0/?/ZO8#\'C2&k1JUWKlnu[N%c";r#;.*\&BZuc?,Z%Go#o&@Z@)hi_H)DKHhR8Sm_I.Cb/;W$!^"j$+kUmGOmV[#]Dis3#E2XTU%_(qq[EFAb3`M'3LYJ4j_[7e/%m!o[2H6YX=I$c5HE0'>^Z:ani?kWI,Om\-\IgRO]T5fX)2b=9b'he[3j!*B`V%Cd!(kPmR:V`-IcM>\'>Rqj_X0<#P-,NL6rQO%n%$g*=US1@+bjkJ<l`YBuCr.mkuk$,PKO"41_EJ6p<jkI1Pc@!UX?L32c;4054fIesE6V6[.'QK^r1"\:78aXe<7C*0Xbg0\F1,IQ]%YTU7F;->h"3Tn^;fgS3\%ca'Dk@>BtI>;gfT:,7ZJpW/YE0#fodMr#XiPR9h5#$cT4eHe%1!]TR,IK'%SF_VXc=\E%3>(=C-miB3%EH!>Tb'6q&(oB2ccF_#>!^VKPk/NeNXKF+1`2YH32-d;8h>`[h].!j2c3"Z2MU>WLOea?,[tlbXCPj'YF$0gN"VDfF]55XmS'eT.%,aL@DAM():U1o01gp`TnOb&IrT,qJrh40%1-gN01Q<u_j8P]lSoS91Lh@*Ig8a"H/&qsLE25ULq$H<Y&3Ao8q99Ib5N.@G9<>J/l%5<[#c21'#j;-[MN1BSF;SFg4U(6SO5#UMVZNY>M2a14T+/@.?YR)F!I&JhuO*2d0Wa&sT?G/kr3=:eJ.NNd&mTQo<=Q50Lt4):i.%X83_P:mu);5!:6rOTD;H8c7%IN$YaMdN)r=G`4ju4R#%B![AhO]YM*jMLcGI8MSMf[:E0g"#$;a?XU"('Of$A.)p7/pQi,$Vc#Wr%*[-\gbN5p``7&<<ksb]H(e$\n"O4,-70#%W!H&Q=g4g-#R7EMg/V9+liR9$1V_+=(V'U0?UF("8f8rO^5S9Y+70)=<1Mt%-a!;!L%F0\c8]fV0mFN(Sl0VsCE'#'d5=d[Q%Yoq1V=I&)E_32@9!Lb*SNgjJt2if67;XoU"o7:2L]"G+`cQH9,4i=F'?!\:["G/oa=OO4Y%q@)J\BE`Ral@Q=;U`cD;@e57(V.-,1iA1!9;KLjD4d64rcnqbrpA:c.3+<aj)AU3d.*=Y]7kJ`^F__0@e4VTb773a%X'hHDRqH87%W=0?#(HF9-_Tir09Yr`db`!\'S&Bn,o<CjZB#V(1q]q0,cQ>8i_SMPF;G[pgM`t\>ZgaC4'bmFGY\.,T<-VGs_ICie/=u2/O'T&H%rToCMa!8XhQng#j[04H.iA,RU'0Rb`6k;d7AQbrX-q:`g#*(";"?oJ#C*mLper]<W88N%<A6C<,'U.2!9ZjY;:(U>qOl<(65pdbO%;Lm:b8u$n`,m?"qMUU%[bT:mF%k8mNbf;L!d,/7O\hir_b`ig!ETk]tR:f,"`Ahr\3Jr-V+%7G5206(I<%8"YU,5?c1BUPZM^=+2%KGOE?=O"c23B3BHbf/[c+=Kl;BGP32CP`Xr<sXE2(QkIH!Ib_3O%@]t*Vnq3#$kc`BNGO?0[)`!N1uR!7kkSnL`(mepnO5?(\X9P%1*#`^I$W.%e=+(4B0LJc?Q7?_M?$_6%`>E\9o)>tJ@hQdl_@!br6NDL'IcsIF;SKnk0TLWMFXoo$=t)6IY)5UigcA$]T;G6^;)Mi%[9u0RZu<bi42WP(0rtG=U5+Mki_a2d(0muJp7,S)[MkLun/E$/R)d`<SBs;j!`;=!QAb_Pj#AS-B6M'fYJV4CJlkl2"a&B>I[$2t%*@>d"/Mi<pXU"uTM/C]_bHs'1S!\qGYNb_ka6c-IDujNF?21CHHAli?&Lg=R'1(\B1/;q(0jhop/r11s.0ta/+@)I\cAHDU@-qTk%kh^sn*]Ff<`UgBOB;TX-B?:]p3b]j-J14>L\Hk#42ghf2_GW)meKRD'@mm\5&ceCEU6uaj6TB/n&8bPnjABEXX#mk0/9=9+f1=.Z%l4$?TLJc:I9ZXNUl(Q!S\ht/,0RH3CEJ7H'\2&e20ud$5B!c/<Qm2*01-\EsBNek?Zt4!<g'*Q>P<_`b\*f<!^7EUBIB6Inl$VR4%gYgfnZY5-aiupt#_C_e*330L3cVdp0=Y\(jc!=T=h^\uqhNeYSoGI!MMT\0SZUjp#@SD9VB6G%)n5Y-oL&b*I8Tu#j0*4Nl'K*j]%aJ2+.]?(<&\:Lm2$Lau)P5rtRa\jSU'pBcjoP:SU%Qc3hnhDH"RI>caB)FoYBLPOe%\r$8:f0]iF;P0<6:I/;0VLmD(02_[N&*Q4%7O9]Z+C/$2@jgH49<>$bO4H]`4iZ7lB6polV.)b/3jf(qFVpAO"HP%/?pa*aX\&gdW$Fl+Y'\-tmSCsZ!m5..(T0qs$)J>0-kC?i%RQ3+mSRi?].0]#ck7#fP8miZN3k$U#_Vd#>7'[T%"P-FN!ZsNsM!F]lq9rh?R3$6<.@<pU?&MMd7`sDj[KmlcTurlW8gg!&VQZCc%$7;#'qe[#\b4J_99#609_ap%j0VM1l0;T@V-o6ra.0UC-$m\hF_'EQ5I_V"S?#]&oN>*&Kp&.@;$"\CsO^^YFJYYmeQr#!><%%n`%9#Qo#V-lW8L52O%$:`/q'lfpH9IQ8%)_!+uCN@`9:/"aaRPAMK=WVMGPk?+/l&nS-[6LJS8$S*Fa9YqB"P-GA%r(o<9I\0WP/)Zl%PRAdV`mQ<U=LtT5ePWI[WU,k'&f?kp+dJV(;?DKV5,>J_mQJtsr;/dO1]0m#$,fPfG,5mH_D'H2>ppF$9)!"#3ZpbSY*IKV3_Vk/%e"9np"ma$$_7>5kp2B/Zd*\Np&Q;tkTr(GM=AP>+m7NdK8'+S+BQbCCd@CP#'hZ;q'"YYN$7;!kDj7M:MD99jX*c-g$7:uV\Hh6i%GY=siaaM1=.E32`7[sg^@&.>Ol'qoPJ;?C-&Z64,$T]CN*Ahu1,<@C=n.*,P-^,$MZACa#_3InPU"oDqEA$N1S;W7dMFE>K5%oIo%HAEjR*gPrV(c@f!PC`tcr!oH$N'XfUZRmAW<\Xg+1=S.5BGFqe/Yc#X3_YLK_i-HaYcV@IJ!tXiPYs3/4F'-ji))g0;a"d%9#2eB%LS:S%'Qb1%dh-=E!PXFG^c-j>Bqu;ngHIqu,sY]iDArj=Q)J-1.(g.,>2a`N=;=]"5%5F@X;JXCh+J/'SW=tRb=b&Sa\:Dsl1^,Z%e&jp"`>ENE+OfUDGSC6@j%GdETYp!aT2&i$H2]2r]7$5J2lG?2_^$uqF`SmY+Jsu;:gQ^[X#l7MjQS!<kncC>rq2($V/`fY(^N-7%iYSK-m4aBAc,;7S6X^\hi2"D\=^En/6nnn,bc.()['*qt/!s6oQY9`8)XSJ`VMkT^,#R8,25R]a0F_7.6?]S^$R5:_$T*j!fbR,0%7l@*o,u_S*.PDX?ne,`\?kC9odD/j_L0Q,REM^\uNqO=0dH9OlK]V2j_f@?i<5O"B;.;dh#N'O@kqIro9ca.^%Rt7N*=O76E+/D'%Z$b)\2Iuk?O<D?P(\T5mYWk^@.87Mt`h5*lR:<A`0TMM)Sg%!10F8GQ0N4YI,#mmg%e%kVdW9]KNFEMqMBGiPqC9KnArnIKN"4lW%B:(,8Etsnc>_JM3M<lqA</-f]l2^.I%`1mc*1iOP_^!Nm8`Vs,!^Q@%/aGYVI\iKI@.Ip76R80ZYJKoA?W/\.9n\Sq)'^&\\jj#Z%Sm56<Qio+?mO\J.MFhXIr6/))7&]Z+9R9`5HHlpQrZZa>(YLS>$T%<'(.<EKL6&El`4><(M'2P3,2C#DbkWHn%M\5\-"!AEMGXL$%gefE,@[u(O[6VZs5K9<nj$'-sFr4R0!tqHo6\dDOH;C+/fGUJ%86>aJ2/\_akV.jf4R!gTn]+#ISdb?\f_7ljEP8X`4dS5C0!CXq%'rK!!,*Q#^0cJQtb;9Wu#el1AO"Y:V&A#8ea0rEA]62u>d`'h?#2#R1Bg0"/!q!@D*>+$HTMXYQTd89aJT:/aL+d\)0pi6#)E3JU%%V(_2$8l]0Sl2Wt[W;]3%6g+!`fQc?eVG]%HtJX,<,:9nQk^"'FT;#3I!jFAI&PG[rn\Y>ob60UGCtgO+Sg^gTlDS$@gB)nZ?+n\%.0-:`K6g@hEC2.Z@&jJIV?:e3T,qLE]r9Ah_,Wl7$&k@;F82%-[V-]&,rq;G28M8YdRp7!$5MUF@]`,0W<ahg.T3;ZcEJ<9!IRbJ%&XCZFiVZ>q8Ok.q"J;M<Ya/5k-7'Dij;S+]*L;8/BeTk[dj#Ko-Y45/oL:Bfri%r=5pU"^Ka7i$)9o3a7e7[65(<":"dJ]mQAd)`%,pQQmOYp_cPH[4"CLm(A@M0Op2&h[^9+XQsZ=5%')2W&Q,:YT,(8A\l?nbl;/)uqPC"tJD2HBrUFVmJO:pj0[.hlK@7FZ1UE.&?e%l8,;-Yf'ru7UKG#D6-l"7hL'2,He2H1U\KLa$sTFop<JS.Se2"<[Vl-7&CBabE0;m0[C5m8@J-pAk>e71^4@g)_8Al%V*2QLok1W%:I-8_D.TM6%\$p*UG4"Z=<t8k,VgtslQi?\(d5hM=-plo4%,h,4L-S,9g4GFrOn#f.s*3f_XEGn3[m"f(d7'p='&L*9JM!/`75Ti%5!)HTfeT_5YRDC(X[Rt*NY9j9(ahO7lq1;1;hU>V!Hqf'o[>&_ed/H0I7_I387qPCV`FA/0rI1OlQh-Q0b+Eq3#5a4FVol9"WSi@%7PP,%6kRHSMC/rq$aYM]"Q_&OYT*f"X\^?+9Zfq=TUc5T.)nP?TUf%u,pq^l?+!up/s+C!Yc-QkC.ZHg=OM36fKhqC?%V'qCY!hW%;C$JpiH6ZX`"$9o5(qOid/?"ai>WA:[mKg&KI[MjFXq7K.E7X-(d"]ZWu.ZOU?kpV.-N?W[>;.nTiD,E:;n'^20>Z)OfFG@<I8*e%*kT37`7QZ_FjOPW6P3h;5i_&^.@00)o`@hhM!,EgA[`e]U``Q10k9PcQGZ[\K7Q;"KdH5EBaHm)g.D6J`?^a&<Tth(HpoIWOBG3@%lj=Lr=Uoj_Z,7uUHV>2oN%2I^72B#L#d[_N%#A@4&<"!?;S=/7Ea9g7DW,K:(l&3EG$3/cdpif:6E$GCHi`OW^:]K$ecI28FcfZD%2(jh)GPeK#(tF1%4X/9mWE+?K)':_j%)I+c/Z_KEcET*onYl8bdAR>ZRutmg_`1m,[[S/p:/#0Q&SsBN@82Ms^LFDfWt>un_T!"m%P8H6p,fVF1m\j_CU.PW"mZ9l4_`5Sn\P"59&["#]ge$!8YonpC4,K@-Orjk$Fq\BU'pHEt,_Y4OX;JBYM7BUsau_/F`>NU7\q#Ym%=MZ6M,S?FeTQ)&]$2bu6s*7R]PXmCFkWb$KNQg,0@1oc1PoFF4m4a8mTQ9'9nVP>9gXVIG>dkZpq@I(4*u&XXYTLjJO,WXh*i+G/%/k?54)^VRT0a9mFi17p'[!ufR$c;:U)r4rN8;>mhZG+3n$\50;M9Jdig<?$UM,Fo/M3_<CeFHJrgu/+>1O;bLM-eB84/o0X(g>.^%4-g$^9ER-sm]J8+.M5-T+m)PC<XL1-.l6<_b>ATnjX;qINYQ+.'AYrh2J/VH+qio_<?)US-^_j<H-@;p"pr.c#=R?]*C[f?P%)Gd%8_#3-(jL\#4&igi7,I%h.Wg(A$%`So>Mu1&@6"p%V@bh.4,a9Y16%5!;N-g$AK!A-Ko!aV7*OK2fEEH3+R#E01Mm)C8.!H2j.3_K%'GKmig2<c=;f#:?EULa5B">rl]\UdHVc\E3Lprik2bA\=2Mei3=hdulaooZ;br?>Y(hXrMm:Jgi'%7+Z/(lm,+(d_-dim"S7LmrY%P=h,YB/^u>DMM)R,1peU:eW&ON/:rSM'['Tj#=?$]8;*nn]3A=@(V9-MII3!QbdhYAIpS]5mXog\D8[TD]%GV'2-sjiRC6!h:0L%%9tIYSc>I)nVdfJ=LpWXRQ<#_h3^h[r\8LXe8cqK89e81q9T..beD8%cF!=l()09FKk1!NJUX##WGF%tT+peF88A\3"%7PXe0dlN1%NFi7<*J"LjK+,1EUH4"g"I!6(\7RK`4[R^&is3e94%&TA'%:%F)/Nr!IR;$K&O"oe4t3.]E!BpYSR#!`7\a@]Kc+]NUH_!>W"G73%B4ko'6H+!#Z>?;lZfJQp(cU$)ZC?o!jIK`*aLh7Uc3tn%`Yi?#[mVXU.$t]S%"6jV<-O/'\p;<J)4#kN0aPYrp#EgbY926>s6I_=%,F%d(c'.<=leMKeP24uaX^AA0mD&\ms8=\Pr3r<[kC<Ld>937qDUH,km_cirbA>:,m^YjS9/0@\f7r7^!WDh3mH_gms5Ull%qBRm%<PNh5mru..@aB75H#(^]aN[<A?E^]'@Hr<K2K+/WhT5YVj4IS"PHCHAmbcjKCu:P5Sb?5o%C9+&U:Au_ci$3M`+<f,0i*g3No.CX%%GV<[h3&MX/:26d2P&s-+nn[DWHJpqHOoIU3TFb'R02$N2QFBaT6:H%ch#jOg[BcD6gFUo`jTT\pIAp6`I#/Qg[m)pEjM<@c?mRU%QB?<^Fs?WA],fXLV7QDY[3>:/h6$^R=TY.hdur)4mqs"Ve(L+YldgkmHWbEXS;R@3<Y76>fu9AlV8&k%:$Bco/_[or+r_k5!Qu@a%CEM68\e^d'<h3f*pZR*19f,raO^$4KI,?<)\KRH1@/PH!9#SJC\[Q=I15"arr-.n_iGR'n&`*o(I?S-AfVmREb#F\H_fi+?1M2U=%mr\ToSp6,pcKDaO1,-nr=4c/0hiG`hds4E4diS*rg%R@9_7$JN::;#3F4kuIhPs:a,CC$XdO+V#h1K,(\**5J;pMrBm2MN%I[k7(%m)SH+Ip6,]pFs$OA4p>lIC\.mZG\]Y(OO]W:'F9!E\4[BpNg(l;,)uAGCQ[BkD#N_FrQph^(e3Zd=dDe['-?WrcI?ThV*)$Zd"5Q%51\<Fe5jJ.XoC[Acr(b88D#2X9+s;'9\44?__)ga:U"E<[Ol!1WK*2^C<1\gEt!80P//b@b2H:W/Cf2nmlEu3M,H:%KN>m01)XTY%]/Dn@GPBOeod'5W(dH&U(65-uTmWIs#O`L=n:1@LdeEe=Z2OSbrm.5:oDeV\d2bR)N_[Q*Rttlg?](u[]("%'T*FrN]=!42[_'YN%WD-rI4-&-P.E^u\;B]V[h*5fOri@m0qPe,`7:t<9UC2sDfnP`:=s1-fcTf+Db\kHr',)gS>OcH4@tIftqbgF+0.dq4EC+9HCWP0I%8t"LM)jb,7Tl&GqU)+/R6hVkQ;eQ7FTe04eZjg/^@j$K6EDUH(7;+V4kINolgT/h<4Xmbmle_Z>;B)!ZD>WELgD%m5OuElUm5:>B%#7.TjC*MPj1Q(RCdCQcg1rM9`&_j*RZ/'.AQR9d@C`>._C)!pi4=k=[:P%<d>0iZ>p[3M!djhcmQ&@ZN6Yb@dWFp>)Uis(,m(3Vl%2W(t\od7%_[bAZQbVnBCM_-EbD3Ai#^8fC8m+1Dsb%sF_&Mm?tgCi5d=[i&4@_q5m,28%oHW).eA2j+70dS"_R##Q7BA?,IVD9*X%#]2AX1g(-YD67Yl3P8D)8F:RB^\OD7-#%GMC+9.Cc)5=25F\Y7N%4Dc4c%`^eo`TSFs*CFn[=b;'OO1-Qe=TN@r?)Jd)lJBH[C<X%CQls(7PdH&Tei.9DZt:tZ&a'(?+Yt-WbSa%8/'8qY4'iCJ*_OM[-h+3m+">?\sS4^k.+q+rDjl>"&+&)p@qcupY9H:67WC$H,]U@%ge@(!p;pL=J,!Vqo?ijlA(<P$Mt(U^gceDY1Fkoq`4)gP\fX7Mh@Il=HVK4_2/G1Ho?[HfI_D;QgWu=5qQs$\+7mq;3IZH2i2*qs%5O9$i@M_pT%S^?C*R<8+FTX8'MCkg>]Aq\H^UVBLIt:d\f5k;91U<SIfVZPtk.Ql1M]\cJ7!qP[<"^Z"A8c*8$/Lae\%-@2qU9Y5%],'/WSlteGT_CjQp>MM:Ea9BipF'7[rk#u6fkTgPh#&)90M$NiB'CeMEfO&WGNZ7.#EI]t>M*IAe(3Gk\uQ;+3YS`ih;$O-_a%`K%T=_:Qf3b+:pW(%P?2V1hf.\b<q#,]5L67j<(p.V5*u=@pJGsr*enZ*s)6f%Eqq/91L(TflZu)t$hBQcMTOF[f@8+\M?-3Z/MsJQa%H(,algk$uNG,$rCqmdEu\G"`*S[m`uoBohNWKD?W]!";B[ct710<m1H>):>6`"#W0^5]CFV*>3g.A+DQPB1h!Rd0aRKhKamLI(:=%cag/!*WjpfDfboVN\jCfYDfT?2G:Nnf`BRQ9%-Hb!b^Cq8@C17JBtd:M's!>0/Xq3cIljh3ZVAVEh6bA[p@go]t//b>',c.Q*$5X%K$m&T)5ug4dUG6b0@X+$\bLi\eWFRO'<Cq1=c2kfoQ8Sf);BO`j#?YnMYu%WRqA"u:&Su;:*QqFF>Wad53#_"Mi2q(%blI$rbH>u%k#?H+P;[.,e`D$]W^i3-b0@([p!)$:(>'B<NRj1m4`$TUlYX,I[;#eBfFr.o[_qFgXh1Q;`jP1LL>:LFMo&]-?&A=^Zpd]hQL1H=%Si=!H)Xfh^Gbn&;:+k&=b_2@#'=CP[>"qpNhh8n]$B_jLpT6N]HWP%G:hsdN3FG4GHd92D*\qmiq]',6mqcUcZMTB\lo#3:k.e?a%dam\18;uB3bt;QJAbJBoq3_),DYJL'gIobUS)pO8f_iG52;a/_890!NX!"\8rcg*80A.pqXYk")CE-MPI@+9@*Lg3,D#`;E9t<tH%gZjXNldsGAr[e2X'CFR=`OWRi]/Qh<D"]kWS(TNDUo13'gi?uLg]Z@iGZ`C]eRuX4&rG[]Gpne(Ur="JcBF)Q]-XPB:QWS>m$8OA%[%4I)DMN;hX:b[(c0lG<\Q:h(3_cP.lZRM@jj[Vfg`n`WC2F\IO0];.m17ICkOk9K+<7HJ5F\W*$+MrsHQ"]eY0fpjf7)*Ge+Uo6%Q.&\+8RSi"Y&+jhfd7C.oA.u*QaAj"HX`MV9A4gVl)?#79A8dp[-f_o8OF87V8Y?,8@aG)DNc[DBPE4CfI!(<Z^\C4S$X,1'8Wqe%-7#'k3-?:R+V(c)UH]!%q:/W-W`dKuD6V&==h-,JYQdDCT!rrb+6M"KJ064.FC=iu>MJDJ)&7@FI1&e+jISC2qIQ6s34+Tq<dqgm%]<-h?=rU<+IF#=OH('T._DSkP<9D[cSIM"3RbK<be`sj($U,j.]!gJ^P%SbpId=3*+$L^R9+hR*6iUG"2X/tnI*;P<h:d'6k,+^(%WOVfF>[:$jIrJ[41>0/oM*79ITXeYVLMuV0HFbnU?!L0?rmj^OJ*l5Nn?aEiF4m,pkAp*lA/aj?@/j@KjQ>J8G3%e&?)LC/PB/6L%NfNM3#9.mT<Gh>Lo*qp0#rIFuF%_Y-1gesG4%/F!?=G&:\G`'T*CN5bR^\=BDY'6C.e!)!D5QYYe#g6f*iV1?]CRjTEDYFkGNd&?%0T[Lq';73U#L-?+VFC*UQsER'hpfBpII^M"pipRH=]1tTeS0*5%Ea(0XEN!3O5(F1h^tjhbsuY5MpM4:hS9\mMn;F0+!.PeVtlAA%Q%qm$eMlI#:NC\r*p_)!6H$$"[o<e<46'^e/aYF.nb9qVCYKdQ(+hT/L,cZrU,E7CYj9m"+(BGZD0H^:L`;0=IIpJg1KL(Z4>7kk%8)58+M]dR6O)nka0#DNa/2k;MY/3.146dp_cAn<BVV1.7V:jFpZ*MuP)mFb%HH*5=eGF+S8[M0bb&=W4[,[NZPs:^B%3UnrkpT/G%:\EE%]`fnPG'i]s]f*$jFA/0^J9LF('rRUt9pj][a&VdZ7h)H*/rC@L8u4Bc=?@A/UVaB"E\C5OU9'7\\Fn]\;c]>^ciimDL6?Vr%NclIBQpU4^2N^gVg8?+Ek/rgn[(.Wil`\=f-!0IZ?_-er5*0K9M]Z@$U7G5bZ#3a<9V#FD=e*h8Hd;.eDLo+<&JT:[5(rNV3)r$W%[eI+t%j4'9`D1D>A\1QSU#+(+n+$;$drrsg_9Cu?m3JR_NYO.5QE'4F6@Z^R)sBA[H,d!eopqDtebh*ih_E@Db#7+OjKM6Xd!%%Y%lZDo%5jCFcXecog6f0?;J(Af-e9@uPi-Fe8Wpg!eNTZ8\XD0Zr%.EiOi'$0@fG(RmT_5_]c0nUcWuSRU05FeV\SV7om=)iMLK`F[%BNBe`?ebm/n"q(=Z^^*"C#oQNIA8gQC(7=hCpR9rDMd*R9lXM]pF56]0XiR8]M5`+D0ApH@9`-7.8EpU?_1Ar5W<0>DXo\uMX??C%f[MBuZT*Z?-EQ;j[P_jcK__fFZ*H;m'TFKtb3X;g'KRb5^9;67BI8_eML=bC);F8;IAhF`cVSpgs1WR2.'Dt6*mg6=0f"4g7dE;#%`m6D&*r!+9.hC:!@V/bM2Hb<Urd;15>'ZFJCL4Jfj]PKa`Fg2lSqUZY,sSOp$fl4"ZWMK)90q7BQ"QfMm=#g$D_jVK72DKVd9>R.%//MW%ZLBD&kB*cWh'*eInOe9@?Lt50lF:u<@*!5UrMno7]][;Cq[kY2af;@YFrsRV5qE0:S85432TpZ"\M@pOEe`u%l&&C1)/11;%&"E#J`MY4jBVVJpQJ/5uG.5njG1g`&/p2=PBJu=a&79b,WAL*:o%Ud@`@oZ;/R"aIMqI%3)K.G-[E2;cE7iiaUUjsg7-hMfnn5C`%Q^47]GP.u,Igde#O5o$&Q%h,JGc53NZo78%X7)"lXOI%#>TAlW/bOh+q16Q"XmIF:l)"1>kE^2$1NY;<3.:.jSf-RhQ2b_,$aZAU%P.8i_Rj,gh6ao1,3-K3mkN]1Y,F+Mu5M?R>T</k^%3A!FHP3Ed:K2PZ8E3dp5J)^0nnrFlinD75f0cO;Dsa['7<E_=J!t@uFdgH`%f\,]>f@<"k/a7)>RopSa7AcT#C^KJ-;J5OWm;7CpG&f0!rQ%,DD,Sm\,SoR(_]6)<E]Nm@I-c<pA/^Cb/PB;GJ])Z=.rS=RoN_Q%%9N8cnU7OVD8GZ!5WS1,jlWh^n4QVt/?sT,P?[T<TgEGaeVEm8I>:PlT2p>Jd52582%tJ)`ZVA?!]i;Y\fk0.(L=N^Tm3^MJHY_;^%-`ZPQ"qh<Lm6mabl!kNJl1@DcO/@ua4VVUngZn&TP]QP>_nG4nj2\e\^pd8/hQc)n@@_caqd#)];*-8:BmeL]WG=b7%3(fDJi;/>%oV8ZVDBQ[:2I!+V=fC`H^N4n;f@^'#R]=oI023RZn7o>;d<:3Flq=Sc?B+mM!Op'MHa7#2&2b,B4!:nO';=7.noqF+!MLMBL=jn\%,(o=&@uK4CZ2'BJ70V4e$s@HM\,Fk(s+c\XM-l:IP/bT+9>M7t-DVZOURR<0QJ6O8hXs%=e%("qchB*m!tFKR7bq=U+/<^+lH`<D%N2+\UEn"I`ER^Hgrn<+0phcf!eP]<!pTEHuAH)9s(Fko$N<lieNVX_K#Dh-J'DlOsrM/Z<A9+te$98W8b:gE-3kF.e(c%Y!\Jl;k%\[iGE$WAbHbE-<uBe^.+H"YV`VmL]*k'mXdMmZ*UF]gm(_YlaerO-m0BX&NDVQndl22@%AS.@MJRcRA-h/<u*GC`n!N*Wg8WM$U<%*d08JrAD3R"ffi7W8I03S8G#aj#ZPh]NOt`8hG@!DL;ZZ8'?ih-IXo=C,q>CG"6ERmL5m?1kn^pj3"UZj#h5P1g6O=C2^CdCPH(]%RaspO11!ah)q)>IZ^Vl_oSD(,gKk;&aVTr9I1;W.L@kI32T$HA7<FDm*'-n8Yc[3l^rLM!b^KR2F8;:'7uJrAqipgfoj>[L.>QOg%B=FoqMjllsB!GtI<[-\rhi-h@G*oRF/KK1b[pn*4omiXQ-BnZe\kBDMFgeF+ZKnk:3ucK-7+h4iikofD44-IUo/8b%<-EYrmEIT-%l<uTq,M(q=q0)Z+YfUY%G0EV)Ssp>=2Ffh12IMEo/^<aa/Sh[I-hO7^lK;SCh"0,Yo>.QfeRArPh4$/;BGV)C9Y)O,Ci$SI1Wr>^%_;*fD<?h7,ice-T:LWM1`6pOHme#:6PW!Tanmle]\$'<H<(#BMXc5qor$,\-/9Qm."a7Yc\NdRa54(\o1kb"ZAV"0/EF_5,^\a(7%o@_l'KA//"``YqKe=7;VDJ%@'>AfE\KnqfJ=K;8LF?;&,j8HaPZ"BK=>:\@Qr;S<GXXWCL'=[SJ+j8;7VV0/:rJ8P_St5km^asBB%A?nY5/PZ5uTr0K%,ofg"j$2-0FR;iFG!rrHo+XekWEeofCeftu%_!cQ"7_fEpXGuo6cg<"flb)W1SO!&L%j-W]U^k,)!rKH%JisN%[qksqp[i)kZC*Sb\&1.oV/;]f&YeY:[N(aFn*D*/p?OW]gt/P%::%*M)\YkDiK>l/kN4"3Y5Z&T/3qI.mV'4I+FeX-U?9Ei.^P;Y%k-M[\>r\KWpLsAtjXb.F^Pue$O@qWkgP_F,C59;@V*O0lCpVXh>B`/+>PP$8<is!IKTJFSAU\>WR8'KG>H?RgRi,XmftG!Jn`msr%a<*Y%9l/^O.e7kl2..g3p+ag[@*V/Cr\9no^9*"IFRRTD3+=O]Dn=Wj`Z!lqml]_T=a\\W8?h5;2PmWk0&Ga^<p_e`#_g(jC-8k=%U(4fgW3N`f)<+c^J?sUS2<WQ!b\SY0cW)<NacPe&a("3%-L<;Zd-A?P/KV`iftsfV.sjf]+u'kXe!j<@XAA/cq9lVUjNVn]aY,33%QAXhsn*DKfbq69u(Mm_J!f'tns7en$/rtne[iT^Dfk.!JgDFu23TbUDe^,ol[^HD'k"]?$Y>%Ahh$pj('/05S`'6jMOpdO\db1V8%m]e?aa@>uqG$!%+SW4Q_\Xb*P#-luiA,QVV1djG$)cF5ps*1[E^X[49a`,t8(5:P\U"V)f.-/=>ORoBsa'Ys*"Dc-44([2FCsF1X%>T)GN\-dgC:5$d""cf`iVi+ah:7S)J0#%ASf"Q"O[NrEO$dLu,Q[VnrpWK=:875Q>`n93.di910@3<U5$Od!Jf,,_V1Y1E`/Qrk]%;L=q(F61W)N/W*;*,c$ar/$e4kfVlubd3TXMbfFFCI-*4a;raRJh0*"f:-ao9[u$nZM7&S((@MD6KACrHB'Pj+G>^qAFYR_=o;_]%M_F*`<u,H=NgsHen[V)7<u+:pnD&VWc*Z06B6]A<)YnO*\4YHhd[@]_6ugeG5&[oDZ<CNnV^RQb9]h]H;>ag''ZYjLKGR3qpq]j[%,`Xl.3$LuSF'<gI9B,`ZdH6_";-XjP>X9!PY"<iGV_N/[k7o94#o0=r(J4O@n<(Xdd&=Dc,k6dt8N^IF`"C3oo+$pCi\f\"Nfl@g%9j=bd'$"T"l3AqO,HS8d$K;?/UM]Q365pXQo-K2g'_<aO71dLb@<1lM`Gqbu>sT521@0Wf(<<CDhL:R*0BBDuOp'AV5o)s7i@n9I%AT?5'JkPs_ig`#Nb9LSn+r04m.uJD=@-0S(;#[o")FST=<.N6[MW+nPD.<]G*5Sdsp0U\p,$,JnR#Br0>MU_5;&l:3e#kkN`R3ro%NuCFVV8D"R'F1U2')`Qa(D:gnF\s.OZ$L:R'ZYl!D(hVCU-W3G]V7A0BpU:?'#cME7Ic;H.)%*J"A+!7Z;6O53-Z**9UEY:H<(MR%2n,ojocf0d14)YWNq*=G,DUc[7K+%6jBm*IU6s6(]+@t[52V%p4*TY3o\>.-hKJ?S(@#-%Na[dqJG,L:I)a=6(*NR!i;'V7UP.PD%9-UPc>,-16Vc1m[i!7HTT\:/-e]RA,e6d=7_UX2#W9dbdM:O4];l7&I'<N.225W3Ighe]p-!CPT.aa\<U7g%2/-JifO@T1rj^Ui0%dhms8XRs#mF`!GT"9V6e,!T2Y7mU[0<3hDu[=7;i16n(\,>5D`@dY\j7J-Z]PH<-;M_9)O]W(D*bko5J-mI-5LS/8JAth0K(:E./%MpOC.Vj2,#9Sq>Fqt##kPsO6G/8$\j.Fe4Nh(PL6g;t5(7Q$OQLD$^$845*kf#/3'=X'*XI^hUC<KrZK;jCc<+N5"r".#3cbr6)A%5tnXtfNtaJ/C>A<DPlRc?&Zjgpq)f)9sQ$ODT`]q=c65)/Pian*^=d9).8kG%4(*c.?KD;<@OCM!\Mf'qd*jbUfg99C>p$-HE8-p%MI]ITZt;uJ"/Qua7*O2(Pd9#RpRn]',$S]q-c-u5<0Ces?_3"uBDi_Y.`4492%uqPdSl<3_#t=B1R7jqREF]:"`=G@"$X;+4()(J%D+8F^%p74=QZ\8mN,!4<.V:e.oW-)OAip&[Qe*r"0P%Tq42DHY<D!Z"^Om*_0sC+tQ(lNH@CCeeB):-iJF(e;[2ln&Z5j(hC^5>b%2+lBWa!I,DLpdCZWK5o=m/UMaV"]&7!rTJE&ZpnpbqmMb"<H4t6el;=d<<;J2u9<*Geg9:k2u(p'[W]oen[BU5as\.=:[*gb*;:j%!g`fACVPXbV4dAp+71kMZ<7gbHGJ33;0(t'T;6#Ueq6UMf6Y6jF:'C-4CEa.BGFq%oun`9%]Z%94c\72\?2@6Pff71UGC:aQ1iS.%klAfGVZ5"d&<LBa#aea*pnhYL+g2IT?;F%qAj*r*T%h_tomfH;GJ85$I'5k&Y4Y&Fb<SO@eFTNMcYG[O^c5%df6Y67=2L&%%iFtB%f=9B67Q7caY5.#Inc)n>#:SEW7X$F\1=Kh^p\l4FVMe`JkrsHJVD%BGHu)S7c!RGa05^$?RS\<OcZu?6G-*E0P;B0E@<O`(rs'Lj%%u-I^e:`(PioWBr9gBPd*Q0:Z,KfLo@M8geT'B3<@ab]m@T1'9C]^?*(G7W9k89/,`$WL6Pni@,#$\N^"X8>`MWnBN$#;5QlS]HH%2?Y4&0I8XEXltor2BgMQ;Nu75$,oXq?!T'B4V=]56#].&,]c_JgpF0rgQe8"aE$I%jJKW/#c$1.m[UUjYmFb]8^cZCII=78C?!O\%7s7?ZKl8$3M#j>lodD[\Q&hj(>/unsJClWFe.duh2$M4"-GHGrm8.QWn'M\oV']S5)1Uh]0_;8RDc.8BQdphnd"G3'a,\NbR)uYr%'q0Y0f-n]uJ3;`D?A'ZnHL4"3idS<SKI3"k%J#X0EUH\7]$M$fp@Kc,,GsgA?4.R:=>.iX(^6e_a8C/3n^t`A]ga+mlK^;/+^g(6%KkCq6qYIqLYRnK(B",+@695-_<_0-N[-X0dOq+4?(m*$<=N)JAd]e)PXq=-XAM^&7;Np(6/1e`VN]8XN2q(GK<_3PDA$trLYt)UT%m\s:`S8TSNTT;#R)&<4WTIG3,d+XtgVcQP$d.s7(SC>aG2oXYSf8-"Q+Qh$+knXQReW+a0f%l>%X]N(;[cFMFkn]8j):3U2=!/8t%El;1hm?UuNN[g>/DW35J&kA%%T-Q$4jiFnrHA]GA(I[h2J5!]=MlOmYACC7`R;stgr*[]e7WZ(agLbF&;K1a<bu`L6QU(;0O7M#K%8%`CTFLhF4G`*k,n$e._NQp6Z]AbCRk42gB(<tH0H?"p%oe=%!/=N$:^#(#(LrGkuSJ*a=Vn]g^36u,)A.#bm&uN)^fNr$tJh8[Q%@(Bg+Q"iIn`N[3n^:M:f%2SVV7[[i_aL:l6jC3kc[_Pq$DD?6L0A5?$'FT2K,MNFHA6ZdIRB";SSmC?D(N<qib_eu-8%']EZ.t%+%XmBi<?9Me#(HGaH.'.a`oua_&`RndZZ7S"ag'OHhgJHS87aDp5hV,]LmH;Ce]?7Q&AUCBghQ$]0QgI[6lonh?WX-qBX5`IB/f3im%_\qlB&MUsLd!V7Yl#Ti);5$=k.aW@L't[mj=+DlLN&O1\RhPe!F&R1hg_`32'^3cB^pJGe>jS\1]No+*hE^h4q"fubmrkCap#k^/%l+t^#Fg8PapY!/a?euU-$Q\^^"f#$")c1Wu&"Z^.3ZU4%h%T!tefdTg"Hh%>aLrFt?<AM(e7;<MqY'`3I\f38hT"`9l\s.!7m[pD%N3_6f0q``T!g*NBR+]m<PUUKY'R"\6s6B3>^8%+]gie7rq>GpT<\oB9i2K*m#b&(P>=c&h"!G(*F$)]gOU&NEYrjMS#'bCG\!;QG%]:",P8#m!;;W)fj.SSR!Qm&'=:D93Uj9PR`Rd/q.<`Z.^@pAR&rcRBd?l_V"kWGXb=Z9CCIh-n[jEo;]/34U3?DA]0Cal1#`\b5?%6)k0!10Bh<V:dXPMCKL"&;\Jk]'HN*2F\'OF]baLn(*Akgfqu$GC:#_lD>;M_C@e#K!"W(\Y3+`F'MS<\ObIQQh6eV$S`0WULp)Q%3Xj8@a@/ZD?Ci(ZJYh?k;gJk+185SUS(`(s#TiR;`%qc"V:tS^1U=d^h)2JbDJclJT19I[.,5t5X\4lZ3c+.Hk`Y.rG6P."3l[%2%0i8Y+kd=_oo_ELQH`kjKM?:'"0LliE]?80B6r>(#TfYSQ8'U5HK2iZ4i<"KHjRj-Z'(*a@e;\`!;.+3$HmDQ3FBfkYoEC@&)Bb53%Jb0s7X["FKr(*QL'@Wb;.#Let.^TSOr4!XW/W+;OgelTG86ckJ@a=gbBa%P<$*4h0\I$BPaXE$UUF%M'?!4P06FD"5#br5<h:a"1%Zbqm@_DgqV,CJK0-+?Aq>7CNH8279+19Wsc-XAoh4F/I=b+i&G$VNC''ZeG1>tG]fg1m'R*p%"8*X>imN$FABCFZCJ>]I-g<l6mh%(Is&KRHbMW"*2?-J=/CN4a$FRU\MO#W:sb9`N1BqaY&ToinZ7LLcP6<1E7BS'MHCJQ8#=0RQTRXG(DLSK/eb%Dfl4^CIaTW]rj1a%5_mU[dEh"U08VWPCeSfir/ZR=o,=uZHCmJ+@AE[O4T^q4=.I%O3qi++I@*e+rh'2tU$?R2jn/L9n5W@H(u)utmAFIl_&`VMaa`kF%le'7IpH?7hq6.9gTJZN>s7W(WYHtZZX]]#_GMiCBNI\:e">!<^]$pL;]u+#8/R.-"bkkaqSQeK[MJkS7oEG-gUa(A-qt[&WkO@r%%rm87T]+YuA9!X^DG4IZYqnIOAL*eNW\"5gdT(ZN.m8"S!f:u7)pOAm-K/IK)!tdW>)1qecY>=O$\o0R00Te9CaB74hF@:jekg1P@%R/n(RQ=\FVK@j*ffQk5?+('LR=I/XrGJ2Ji.B>Yl*?CgB6g)S\6_E3NjG$WFH>Sr,+ceeq_,%HZd$'k]faW6GK5C(;)`9'+*!S7o%TF11MC^)s[1d,6*9'YV[%&Fh_JR',.7^SWeGR?$lB*i(f03Vi'*J/&N7NOG3pth8->Hm#rrB@8<F_&Z\`8cdfEu#<d_6@8Sf]5sV%*sgSFV_W"&Q,?J66OeT'p7+1Aa']c_i\6&IBS#qK+d/2L$%a&-E"blSB4<EAMIh4!aWQ0t?#Bja[`1!:I;"n9g<^`1\X:]/Kd?g?%F0K]r!(n+=rOtY_MQlbcQGWd@W&ahm9I$3e-gMVXK<21B3^FXQm[f'.EY"(48-@"#["h>%%APJ'<"s!"",X9;;-Q@^Z=YPFQ*DIM%T`Yh*G5u'UE^7G!b-4UnO<kD1&4+qmN9AW)2`k`7)jZ>bbTL6;fG_FqekXeX.uh0_Qo7\HC*PpPp@Gb:f9XO65\Yht<g@nK&XIl[%XDYu96<mff1jJSbZI4/f2<e*aqaRCS5)]OQQC^E(?_0-oXuIKM(-FbQA8H<b,3S-Si*08T&hOt)%LJo+Y2Llt1Cn/<_Hj=`SW17<%Lf!<Ra_HBiFQ#OkdT13Sh@f7]GtbE^aj:8rI758S3W'%08d3deL1Sog_:pnN4LkNp"A"4cHo5Ypen%dXk"XF)Po?Yefas-q@M\#i%A2fN^V&$'QL/Fm>f_),#S]*4c?s7&E23oZQ.ANBA1/<)c-rR;tUF`GO@6FeWY<Un5gq]!(qf;>MpiBAS9jmmErZY*apjP^8dCmRN%en'c[%l#7K=A]ss(CX`:l-lu\l8RLFjNHUHmh\2fVr-<%[n(D^r26i%o]'G_47)"PUQ8LT)<SgGf/Af4<S[cp$WlrLU(T"NO\72[%e6ipq'BR:\2TpLN@u__R]cnj:83u;uW"oe'!:XgO2&ico?t-hUOk@=0:u?mi#M"YF;e.2,IC+q-St)b-4Bc1mDX=/XKtt4I:dDb[%mU4lBFWm/Zl2/>=LdTdQR]&2_qcpQm!:j*?r:^j[>rdI)6RsRnLse6!c%-_t6</Z7kDCACF@W<$"V2kR((tl1nr(q*oj#nVMRZJq%Je0q;dBUAM4m`)U0EEdh`aSr%-V+l;B&QaH9275BZ\+!UGa11p/Y^RjRRUCQL-[fhr-1S*d1ed/@=\.hopd5g!o?0f?n]us++esI%&/JflK$>kD2+.'i_a=!mkRif+%-b0aMr6$$Tk9.Vp@CUDHL<f\6"CeSB/m?2`t3`VHn&M;^Y@F2_D[%"r.:%,oUK>:o)Qn%RudCe%OJ<Z7f_6+m1f"<nF3ee/Z7#FuL!Voa>C>98K#a19b$ieqQ'V0cJmAOQRChmUg4leBm9QKSAB-8e:,D'tGlWRkX)Zu@<V%B03qAEW%b_<hN33951Y(T0d;AF,TkAP!J7Ars<m+T3N7R912A!;+VY,U]L,pV>hCQ"WS>q;!EHDjiA(.jeThM8-7]h'\b6-Cn_10Xac%36&N%G7[FC-]KS]KE8q<!FFuGVZ"?7.t41Y!Q,-P2Mt"f%?mVpUdu'KEsH1U&&(X00X;(drSBC!_*CX<:W-1n4&X;>bX'c%0'X:0AL;>=%7'"2=-"5;FE>XCp$FcS78]^ugem[<=%U`O!*)-!5@$[qapUcAFkG8-&F8>uO5lIQC,iWisSt#g-;mf'8l[]\#/u'W?BnY3?<D'8Y%fB<`/=4\K0HOq^'H><Vu+4OSQ*hlS(GEQJLcOWc$,8lT+-W3i(gH8/dR1!#!41d$0FqJQ3QM!"l>4U_SGtKX6-,N_TpH]dm,VtNG%Z=nd=SMNdXB1`ei\b76*kH#L@0P:5t<,GQ8",g9(p0q4:A6,"p<3?'?7BC4pgq%fkZ(bW"b?$O=W['SZcBtJ^AR<ueEnOT)[b6'U%Z^[5lV<EYe&HFA.+b#gu&K50$@uP)'YGTp04X((hW:m^CFnleFOUP>Qn.S8Y51`'j+/ic'YXpPfjJ#9JT`A)ba=sj<_q,F0+L6gt%5>#*gWPllGPQ48kANb<s4/-RgBrO0$h33UcaNG-lr,^7i&Xa+$BTQ-;9n(7BeR`)5=9YMZ#]Kl!AnbV";`4f??.h:i!_s?of\+A?%'t5ZN?o4#S.uI7_KbV\S&Qp&^"=*HR8"hPUQDAjDpk8bH#g<=`+J"?a!>Wn=<;(ka&]3I4%5Z*I6/"#__qE(T3NN5J%J7OR]q*E1%0\r^S$[hok*Q*,A?>BX/EVP&1bP=HnSC_,ZUUF>6kY4%'c&*_9pIpZ;Yd&jEfPb_%1Xb)Z:iot0?&@\5G%.i;clc3h&CqI<kM'.\%64%lCG#FP:iOWhk)q#dXoG4<`!^bF-fZ,/N<D)9h"`@S`XJDJ2(d4b@;FRR80jdm=-FUKi%<,,h9i;S]V5hQE]-k"MVT3&Zg9Kp4%N!^[T091`sQ;2s9,:Fe(nHo`\=4ceCT,Nt_#i-2+GYX,.:fh3h@!&N+;,:?#Ms`",_1tJN0n*G_aFMYA`C]poQ(3i=ceTdCfrN+N%>u9HegZ!J7@SJkWT<LVh)clN@(9n>7$##\\cV9t![aVW:DO<K5k,9oU.'-rA+\Re`%\e$_7Kd-6@RQD34(RYPB2R2_=bTtJdW'(K%Zg6E?D!\i3Zb$L+-J8>I?st(7G?c`sQ(%mo"G)pk.Hd_i:L^W'+nJ@=A-!*urT[c26JV+.,bEL,);@"GQtNb4FZ@ga9?1oDc`773%JqT2t35Q/HB,2hDVqO/5eP6pdHR2"?Y9Ku5Ak*+XOI>T<.uU[DNeXakhh-[7=o0h@=G*,.:8`=+rrU"RaBD"VP>u\j-s)eE3"E"$%"-KI>4KAnD\"a.>ho>6XYie[bm`P/+_Bp9K]FH+fZDV""Zha(7Bc,))5aH;jWar+GUhl1Q`S_0LRamLW!uZ%CpPSAob;Q]qUP_E%%0b<"S0Gip\"-.VZk#-O:<e`97oTq^qE:Y?c_Vd+9C#Fr%!8uW7$'DI#d@l-nTbSBt-`9bXeQT&;,6F":)U'00Sf<o6"K@&o_jXDO%)E60Fq.8Vf(Ris<Z[<cRqqI8$h[1S?'/Mh3>LpUhA_a1L?[PoEf)nL_hC"rG?b=V2K4Q'=>02Zdr^fcf5Z[6fpMDEHdnh6a+rkl4%mKX<3qYNQC=4P/8eQd%IHA4O.+&hWO2jMo*4GQiB<TB*+BaO9slrF8=@E-Ung$7,o9JomEZKe*%nrro).sc[t!gSs$AR7(1?JnQ#%GsK:iHmjAd'!2oAL]bS%PhZGfBdagM>K+^hkOoTMT!.GeA83g"@56gTP]@:u*+$b\hcrnj*.Vl+)`)a:Wn.OW`hlq!9fK=m#cs\8%<g]6d!Q7V\,!'1[F&Z^uAqM.`D8hRX%QM-8=(@#/ZRCuh4TXdpYeJJ,KcI(PNH7LWanVD\b*aI1`*_2`"TjA/^,C\Qj=hr^]8$>?%d7dF8k[(&hiXU/BH'f()#bB</>Y86>TL+#j.n(\<"!Jn6F]LFH@&<XmYY$UDN0%9HKL'ST@#>AQBRdEbB2DP$$[rD6ppo33]o;5>%V(Q+].949UCnQ>^ol["pLpT:'":VT!)LPC<7.JHr/sO+_?en]Jk=!YII["BbajG-&g?&>^Meg@a)dB\h"9P\Vqcf./Bg;-dRRSMO%DVC*0%-62DmH]5JPKX4K4;RcKY?$VRQ.l\0]t\$lP*1"XG,]^o%(V4\fMNMW9?i<FnU<&C?_h,-S0u2QL>5BUS`Lk&Yt0e-Qoh<N%p%,iH.1mNG&@9ikFa(:sL)P3%BC7H>,6DUR+U`.FM9nWWN:t:2jr7Um+MONoaejhXj]<5PJD$),p#R^IlFq;DM>6p#Wnr?*GXDg_%nC9T8N>^AYrYWt+)&>>fJo]A<=E(:0"&jLnkZ[DVDGCFMf3LR0=`5=CheJ2-j/B!U\]1X`_`_D^:8g&mQom[kRi$\ada^V7\,ue1%4[gr17Cb*;.*."G9%)$?<XQIVZ0qNr]"E'kC%dNJ`+b4'LBu%TBN80X3/iI#gU-]H^>\4(>BqK3JTtX%?WQue\[P^USOC$q(XmcQ%0S&nCYt)a4.-<f;H*.#s"@>"%Qjfd;7:_+l)DokeB:A5%cL_>PF,8kl_-7AE+:AF1[GW45cpWC/f]<[R$[bO3@,qP-D+?uF$nDa]%i)[/T`r=ZH@%+@)i^r[l81%l-&2/M#EFMBbms*n@?D*2Gl)ARm`0*RFq`',gfN*qq`XFf]$GAEu1u8&5m5G2@1ipaCX=-"r"Drrl%arGD_f>qT?@p@^>6QaN@W5mQWZo*O?kGbUX4NR0+A/tVXT7gVDJ5ktc)6cHa0@+SMF&GhG`m&>j>nMF:Zadi1a*e.]2_;&7LLJ'Q%96q(aQ2XuoFa"ND785CF,U4;LZGD+aP-cYtPBF37@gBO==#0W-S/[TjhL,_60W`t,YUhBK^jC]O+REfseND`%eiPpQ\9=eo=);6;%,P(Hic#MeLIF5,^(e+s'iU]btI"0h^'>pGtdOHMFBA*AB,bV6>:r,I9qP[MIPg9G22.HIQm6^H%<R0V":L`oP"p&-X#9.;+)W<]%%)(!pNK0*N'=t[RE:L;c7jm!_TiuYaW7_-XKm7jeoGj/9.?CB9nR&Q+9'VfkKk#[IWd4YO*ZDr5rYbElTHkUicJ?:%u#)I[]g6Ti-%J@_r;FG('L3+gHY!r%51R@gtR"gfbI)gDU1bEKqmQoaeLk<=Uh6i%L(T&'pGNdI@X@WCQrjQU(XpEW.>$5.2_`OsO=(_uB:1.\&q%SSH__$V6C1ej9[rAHfKjZ^kp\Cs0ZUX)*YnZE+`o%iXOc%,tJ?>3J)rd,nn[hVB_KN$-6cIH6?'ED1(Hg@#I'V)4[?nVi,t3eh)4%g<%pk>Z2_3&34g2k-N"F0XUt`.nCGM`b5cnTHt0(2AL-QZQHC-VN:eGTY]l=o#Lt=^QXg'0,(%OJq@.k&b2:j!NKm3Y0`"_CnD7O%KNYIZ$\_`Cp1`3u0/b$:p?j-m0NuphX[4,l4DaWt6%'5/?t`'Y;>WpLB_&>n\GuW#`_9E67333!`NAB(Z)Y,jl#jTYI?hVNdQ4BZ%!Xo*k-<):,"-Iq]`H^Q"&$A5i=`5%V&\^(jQ^Es,K$ZD.O0N+I'&q>P-*cTj#-+ZRs-N$0:^d\*Q$-B\A.?l6Eq[L;ASL(p$8!+D%[("?RaSmQN?5[IM-cd]!Y^el10KD1tl'Yo,V4M.P!Yj^D_e4.(=lC`AZ?/ck"^O4IeHuZ)Pe!Hf/-9;qFMCp(#Yh"LO]_EU7Z(#G%[`4-Y7p"<3/10.0WQ%,ZTh%g0U:Ng4IEn\pX+DEI[2bm/6,-^qQ'.:NJ>T+H4;KX%<T&d[pl!gmJ2F`_Pg]Km9Sk3EQbj?'$,auV%TeCEn0gc3+@(,SehOkDI0T1)Ulf*Irb+IfJQnPsm>P9\!dr[L1?qg87mD_aZB$M`"-8"h^fGE-\YXcL3TO!:?5smhl1`*J'6`#P6%!THg7!aj5t&.[*q.,-Yk[`G>m=dpaT&P_$XZHq[R4f/k@(@--*bg@6SP_N0>NkSUi!5/.PN:+:CO1kmd-bYF.?Y"6"]n=\ITNWQu%(G4R%UMKjh_GOuE:Sfbnlh7>3_Q/iZ+sjt>G=J@[d2+HVou2j"^'MWh9HUDk<gO&C_T8HlaWq6DN%@*#JoQC7a#KEY0VZMqHZ%Y:%9@CF&N!QcZ^Kk8I5C6g:(tgE%94jO-80;t/,IM6EFh789C5`t@l60BtNqFI*K\NSZ7tC*01AG+N&JW.XeY>!R@[^GA-06j,UX^0_%O^<'l%CXXhortJ-1,utT(Te9u@<PkdUUnl/YLZ67lKBm),J2neD6($5"W2%@V)DZ@lAZU$`KB[d>F%<!Nqg;X7'j$UdS64OpT$8/%Q=l%k9.?sFoj>ZM'S@s=0PF`:lWN+H"qUkGb4GCm@PTms4sGr=NU78MLmTLL")HJ7%-@+36Q.*%A7P9(@Q(V(+ii5U"/FX#Fo,Vs%U@:qo2o>,^1S&X\"3ArZ,=L.],aQ_P)use%`SWFb'u!`%g?dr&;Mpl1fi*ME>)<baWHo<jYt\CH70$aW!+$-WAS3'Wal9Bc+Lc>d%c=a#%b8)/bZefjrm[&'3147*WG:q?OQcY?GFTuh"YFWXo"ukqt8d^5l$1CYL(g[bg3dOQR4f.N5[eEu38u0*l0,Q:(N6i]Z.[Id&%=U'3Y0pbLF_Puogb6mp(EJHI9@8?W9FCRb-Y]LYTHq$9&@MXTJ#i.X7AJMnID?+ao09\oPeg\h&&h6kHM]d"(]B`d*i+U"Pf\SmC%-^9B"0pSC#2X[)fq<i$=/%Q%_T]igAH,`:'m#O]]qL%qj1L%k]+8"]rK#et_`(%*fN4EX<-<2U/T'&kE!B$8-fbG35B*<lZ>$=S>%_?)^7\FR`X*YK\+ME/[]n,(3l(C'SD/"-[8\RA$SXU(sVDGF*1H%sl5Hm`cSB<T5tiJaqMJ6YhC@aFEp7F=';#a3#h!6i@:Tp"-5%<Bn$'X=PnV]?)U(87TS5d)>c8?lr)OfZ_lV)bQ'V'=sl7DJ,C<qk]_u:&RO;Y>so2(+'#Ts6>ndcJi$NUbiql=E)PZ>b.R+.$RVh%IBXP1Sb:5%A0QPEY.ClOOp$^O5bp1Plgan)PWo%+_m7L-r&r'IQ_ZO/5SX$M44brFi9R28USr"6D)"]#KXf@IUoG+[$"#+GruYm(%)WVnKm\e>8dhgftor35D([lPOJ:G^6b[n<#o>#U\!P4[SIhc7MP'PoJh<U*3hquYLGN9YX;A2QLEU(SG#E3TujOF2gIakE:?]GBD%,LbB=m<;Q*C'j8L=R@0tZIE;eo5U(URcuIb(p)ako]NPq_@?D;o>[B*j/VhQe$JU*d:5Vq%.69X,8$DSedWt9\l`3S1RtebNl*;s%>q]Z)lgs$4Gd@V%`RZT/-*qP(o/>O(E,$BhrI?%)BK@KKOPq7_EcA8P9V[Sl-uW,BidBJ4e#u6Q(8@>Dd3]GQ6g2D_K>1111??J7%q>&UbW256l)94lh\PB+4R,p0VhcB:jXL78tbT&W`.G3]EOj8MWA:$Dj?!I.?.2]_81<]j\'*`M3U(-XCr'^d_=)rH*_OSGZPGcVS%'.VJ(WE`8,i3p4e,AW;IBJnnmMh?-?5RcS36-L;eP19>rSf!2?YpgPrKP-2TWmc;_;#!LXmD7d+3"\1EnV48WWh,KW$\sn"Egkt(%J[lW:"4+-VB+=`_o03(Q5`o,.a6ToG(4RWXd<RWtd?jU@-6E`?3-hGkJn6#ZNRY4'`*a#mgN*hgApTA8"nKAiqZ]^?IJ3MrYot"t%OmPX3"5OnA)70BK1'")p=\4?J#bBm;%/C&N2apf?qh+)mR1nU/2NAJ\DitWfaEEW,9UCV':b#!"SfqRG26?rC[!eMN41j%f98uk=%[Y$T5:(EDPD!m7P"&bB,Oh8Io!$t&)ZIg+7L8i&V>UjF;%fG8]2OYKB+DJ&r76/U_7X:;Z-gchm.BM_h=lHkP<.jZ*CI\NdjYD0f%g'[_;+HjG;!Z("`4DWTi)d84ZoOQMQYZ-n:Eg[S*`B$+8)6P53cb;q8kfEkrAB_>/B8b7dK;1Rh9/S$Q7E8riQHM050=)3+.hmPE%ai(%8I]/2<cT*3=EQK&fVjbpP9Y%kg%M(+cbomXe$@$nB&Y/:L%G?pQY,H9K@/TLm:]iI%ZmJGgVo.Woq1Ic3V*Xk^pl*NlP_#*9%Q1.^P'mX1[;[nkk]\(L6A6T_A'L7>[Dfi%eX+EM$piaOr>k,Kf8b=-6C11/J)npaJrIK-EiXB&21%&?!fsI!oCuoI..:##:WX0cn%$c$E#W+#tcnC:*q8U2kS#/h(oU-lGf;H@LW8ih\W6b,MG1`0\Qb_[`TaNc3uFV*q36V3q)C<B/m6cUuIAN].g/Qar9h8Aj'FPpe9%\..n]"8&a6p[JnOEBnF[6<Ge2^W!.n+D>.LN83LI;':J4?-VG\kEdVR^_'oc]94uXUf6YL22`ef:?D#9j(u$@"(Z-Mb)0I!1g1kR%`B1&f)s*2Z6rFBgjQ/$TU9GVffM%tqa"YtS9P2c2%'jgK,2*o'U"rQRrV<`%OMYCUV'`KW#5'M`b'fHoYj_e@X->",9X^7tO'V5K%rHRqYT@;YPq<<KMJ^gk#8K*AFB9`jIPu3XqS!OPW/8*OYmn)n8-ouE91ZP-=p(R`T4%pkCC]n[;)8uBbHF^\XLr.fc%&tqWK/C1i%_][QH%1tU)G$s$]2td'/+8;L1r!82ljHhM-F,CM_'<R0om4Coo\/$*[qf*MR@fHN+W#/r:)*>Cd8l7f(78^Mh]8F>gacEjXG#E;c%[stA^&36`K$kW5j+a@j-[#=`k+HKRn+^b_\"$(InE$0Lr8?Vm3K-6rD&o/#4TUD\74'G1XO@\TI1ML]lP5m^Rn0:eto1j9_OC*77%0ib]cMoa#?as2p0!p3/RnRa:8;)e+DHG:9m:Sila^/#oV8gH_i2N,f_@A$e2_2'7a:PIuJRZci)g5R2o=jar"/1X[CMILOb0Q''^%n8e"ba[K[!r%E]elZ&F43aT%&o*YWDQSjTP`m[7m&I@tjEjYF6(T*>,arEio_LY)d[mCJ'9VBJdWSK,3VJm<o8-)$j)esq'>!N2\%<#Vf%k86S/pi]u^fiST`[k?/n=fP\<l`R,@FW#:$V(/f2m>s,sRu0a)p=7+Za?-D+BJO7JJW[6V9bAmgqOm2Uo&,$IQQ`uB;W,BS%=T]Cp=C?[ddG,Y_!]!:V&h3I3c'NpUAc8'\=.>P:a;2Cih`!R$aUnit_I?cfa7mkV^.16bQ:Y\V1C>je`JARebMetcRZs]<$FL4E%/'>-:Rl5,E*<_*^R0sN0[Pqd]]\$-YK@9.M.6YkUs4QKue!0nB1EaoM]4I+nbVD!K!$M`^>XZoC8GUFWPnQt?W$4X0b>Ro"GpJ9\%]]t.2DB`K;<im_l<a=p!.'4Uh)K4L^BMY-3UAuIYD69?a?N@1i'3F7Y97U7KL-m4u.+l\)a;m"-aQRWj6N8<0bUBp98`JHgVn][U%;!Uk:j=Wc>?.BF$2gKUI46Ym7m%[Z0L/*o+?)VK%#Tr(;[;)6p`MmecjI0"i)+^_GJJRH+YtaU2@L#[YlkosK>q)YdngLkPr9IJZ%:^9elP`Q&\2<P/G7WJI&oZ%=pRN5MN1:mVKms7oukTQQh1Y6#0\omXdqD_`g<9#]O#,"5;@5Z<leKKIEj]q/;"!98X0H<%#rD^r%%[!R>j=S^6S2[D8in2I@j=50J,Btb!Q^'rm#TnD*2=)0U$SBSiDC0DtP:*jd^A`JD>"ArRm`=S)oFRPWU'G."^pu\A,8Un$Z/6?mM%GL/*[O]XJblr05=dTBW`!\*IuqEW'm0=A=\FGbslIE!`R^hT'CRDrq.B^aIkC*l\Q0fFg@Ouci<OZuR:&$l'c%Y@+ebPZ&jA)7W$%UshUN-Sg2-g/!9mCrXtW*TAG0ZqB*^,/qO$e4RXVmV%H+Smn:%gb4<%Z,]uK_mB0VM@ib[;D%NDV5TK\O4/DTaFH"pi+3Uteqb<\%h&0^ZYF`k!Xbe8#@CflElXq`-?:k#ZeiNdo@9)R%ntaC:`N.*Ynu(_]PSa+9/2KcVUt1T=`pO0aLo0$]Pfk^4!RXMVef;>tMR!;.%UGI\7+Q6@q!QubQ0uYA)cY:UXcPAkYh%L5m"(LZOjI-l#jLdi&6"0RU1p7eQ/?)BU%>:I7mS4F-*lc2s5Fs26`dqc63jW)d6%14F%>KIRfe1q9M<+<?e(?"X*[s\e@'QjL)'JgL7#]FE(9`(2&NUC96F0\%e'q)X@2toSHE&Ai@b')sp:GF%eZaXfhpMIFjXfE=apc(Y5%S:qf6;2S%uHGZC%h6I)$NOS)?Q0Sh6V^IIejV)f8\:n6#>01-cq-)T-FtK*Uff*"YQ@<b*03EV1WKG&E/Bm3<q[Vq,oDKhKA?GSC%/E6a+GY7edXD%E`0LHCL?WNH6X`cp_c0ikJ>\8CeQnS4dbRV=)4)!Q]_mmt"_GIV*Z`4#d2O=q8aEXLgam1/EO^r>?UU%!-V*\9.%7^d2%i9!TTfuRoR+>F]gfuR2fP\MRH,9ea(7r6Z12R8e2a=M,Q8Tr(tP\'!n*$iuXp2ao9BkU><#WQeVR2qY!%5!LD/!WdqI25I%%2N6W9O@$4j3]Pet,^l'u'IacG9U5pcAgkqccq==lhUpP>#^E#<PD`EuB]kkB=i=kM_=)MVn8(1hhqLhA";uA<So*kSE2Cp@nbhNq%XG'@\c#DC[Dg4`_B-5ALhh01UFCX$&%CeX/WB^<k;:P,8MCTqk+N%@['\<@3YaC#P%q0=B2pl61\gUN1RtsZd9/]_#cTIW9P=\(c%=iCOoZO!!;aZ\@4BU9I\Hq%P@h!s.l2oD&/UWMn^;e4L]Z=*P"4T'6aiZQ_96j0U=imUWUVE$(]!,Yr"%GZ<Tl@^-m9D5i5jZ:`u%6+(;I-d*oSRc=N$^]McKAZ1>8DeBmrI3>$VOtO:S;V5AGR@l:JHtD*H2==lQ@^hYq.L2%hAu3Bh<r+_kkcSg_-K`WS]>Ns!kmpak%9(MQpF^6M>D0).;6!"<=8f=,h;11kJ[-E%]E_b0Q*4+V\60-t0KF!2?aZ7!$A/4bD^6:3Tq"JX.>+(V]^LpU8Hn(LJ!sY*JFb<H?%8b3DP:HmXJm3?_Ip*MmQc'UD=WN6#?7P;Sh_shP,h%6O(:?t9DIPO7h'eNQkis"7PO:6a-Ru/\:-k2Wuj.<s@V[<_neR5s_J$=D[%/(Xfro:R:F)\P/mNh/P%7J+qnduba=N_RjY*<fXk+rfs>:hYmV7IJJZ0H@G^3cdX<2ZuV,H*bt?=YF.&TO)*9"L;Hi7A@BLmn0S^%06O;=gmVi7SIo/"RImdT7%112!NXA8#]E%Ua6qpLi;2+*F.-"3Ngb1?=Uqb,Bj"IG/Vu&EU<+[^;,Yn`=NDc\#ES\$_u#+:]N`8>%M]"J!&T"sqmiCL8E8G^$jSn#4-D/hb31K[hbPQFKG'sfPIJZ(];fENdW=]G";pL9,"r5k=S6`\Hh7JU@%c93*'mr#amZ"8I3DoR.%Vq=%T*2d^a<I#@_:.(d8Us?e,LD=>?.=ON3h$t3Y4T_[_Z,UoUEYCYWX<.^!j&d6nL#M_jSB:Epm_qn2g.,b06soIH)PZh:gZ,%o%%Vu2ihUI_D](,M[7]><h-\YHfaHjIPDr,.`HlbfkJ^&BN)J_itFb1:$Q[)Y2`1H?91$sUD\4omHSJU@WaFeWS)r)5aHYp`/K3$R/%9i=n.nd'nO%lpE&\!^F!a(toQ6O^"PeVl5ajeS<j=J?RY._d?IMUf$?>A&c#gbq-N1*Z3H*D/?,G,`T]F=GM5IHg<Ogne=aJkP(:%9]m8JV.>X;28b"JBf1Z/\O\]@!Rq&)2`V=p5'=&pVon^J?2U\%\5T4FLMtFrF[GD=<9ci[jLeI=*Cr]7ECPW&'`CUICr@.j?X[n>%A3eF@`<QZ!W9'rV[oMUg_E,ZEUPsoE0gSr32V^^%!NIcG<II5sl@\$*Urk33Ph29*dMk5f_gIJXB"iUk;==;"?d=gLPrTiJ1PJCD%2QO]LRJ<N@D4Z84#Tm0L]O%LH8Ka7c.bd$t/Y,m5WbqO,(-B)/BQ,A2VD+9/KZfh;G4Wh;J)r4al2P-5htT'gX1nCD"nD;2%E)fX%"9'VGcq6@Sf&A;<EOp"iA6h*N<RlXO<-CJ3eeU=&-ui3`3Bb(s(E'[k^$e35C;3j+W0jncY-OlbIr6e#*QWhL%p'\p$@_phYUgmi%6Wc#?@NWPPn,cW%9+</MWXGBa#?.Q!T3%q:[j+OXfV"+*48@rhE7`<!Utgg2I*Y*cHKl,d7Pu^nauA]7Uqkp,T2PhI&B87eGfH%g%Dc#8`fu-`TMSrH[ntrThUbYbhK,4`4W^nXgl_YmA<R2i1XNY%+4f9'J8F/SG)A![L"D_D)c51#lr,0<]8hT[/1Q.*rO;NHXao_Co%>2;d(pbNYP8e2#-3'r;"Pg?5&)[MmgS$E.GpiT6t1*3c!L$XEYCo59=XNa?h#0*#?$GVj-#6(Mg0tLSWb:#hiO*>;X<0k0A0tLEu%bK_"nYEOd0)DGe-`J.o9;Dds6!bj9p0Rk6S_]BEEC6eQ:G9s#4O!WI^5$ft@WW=PYR`)bYQToQ[,Ac>N@+PP;2"f]/7fP2W$3"(V%.B8.'RJJO*Yi>,RZ=*V(6<\P@&T(95'a:o80TSAeN1%dgb?;Y[)6BVmg&o3,+OSWhd?/-UmUBH^Y$n`M.Qm4pfOhcuj%<fEC$CA<%N'o2p&hVSm<94>s_QXk?a6M"o>up*k?MmjbNU$S`DnD.@F^P@'VN`ErWlS_lIZLGDSrOBp;:\K/%AOO;lM.5B-F6_,O?](uE?b(B%Ue]JZ#<gD2j;9r7/$%I".<Uc$?:X1XIbPJdMG<GQ.>4QRZ8C4CYa?tq@9;OFg&sIJLbt;./*\\jUo>H<4m*Z'dI\b1"*U*nmt!o(%7TnK<>H*O3Z%"E>T!q7J*.aI6b*$[G)c4_pS7,%4<NDjKji&\VEA:,7O=&j(DoL7K''u&Z.[#s_0t'^04@?L=F9I=q=cOuGC%-4l%5'`bG/m*!'O2gSDXMYXSb7e8qW[5F#:t6A;o&CHpBt?@*;GqSD_Yuf4_JP)%$:Eum1gEG&=C4m5#!.=o,e,S*U*==k!Prhr\^p^?%Wh8I9.KDjW97[f.4TL5622&ahl9GC@U^>CB%]"!3-;t5CD"V7oDWMBqcO6rgg@4+mpCLFl"NhMl(B6UTB#'qL0WNn+_p\*CaFqeN%#X`+l*866bd$(7E#>oF@!\sHIc#s^eo+'F+^?M`]*G4C%LsNfQN^<#0a;ZNiq3g/)ITM0Y7'Rf3*3^7=:Amb#+a+//6>QYK'b>g`%@=YT#"qW-[rnq9tiIX_bor7QY4X`u+KS'"5k]LZ325,(8i#S7/@S`)K;.l20QPo]0Q9#\KXW7D&-+.E2)8n^N7%cEeZ.4&YY;U.r%g18(^Q5Nk)3/D^r3%%gHJKPSYZW88a*D8h814q?t.%WsO:%)L[.hL89a-n]<9[DC^X=t(p;DI1`&PEDf3EsQ.8M8S$3QW/4%mgZ$%BKh4PC4%ZZ\:LlW$Whk$K(3VLa(@[2Z5KlG"d%uD(s[p@8!*NIn5s:_qTG8f?WZ3?d)Hg6a7%'JDAf5sfJN]FVN3B=Oa7&X0s%q&%YMTDI8LG$7E6^K96&;g*+;S_-S6.6Xn(NsU!4P;Gb0do*:FY'\`fK&$RRqWYJ2$\Je3oI@6n9W*f`qsSQrUhig*gY?iOo(KkEK2M%^RWf^*S0c>`*j2YnRMYp7Qh;YZB(dQ5XM0dZBtUr6>:fVRK.I.fT`Ehe#Cm>KL)1i>Q'`k9\\;(25U0?/Y+!7</ZmRL$VGTPhn8d%k-8GWNCD$UnnU/j*T&0[7;E-j`)pXHcR^B;j!@]I.+'&kl/olf?1S=Y1E#Dp9t!kS`SV0@o4RY`Zt\lf'1QQ>1uUm%b>'6IrEn4q%(rA[=C*]XL3)u.9?8c`3(B[BTR3#[*f<@c`L,9BJ9sr@)@n@TTa"&JU#S:*nH%_9to9Er1]`DJ0?4'aSluYIKd:l9@UAfd`m@7N\%/d>pXB$qNF^%(3T6uFQ._umMce?$[J=nN=3PLG$6alRSD5nIHfW_,If+Qp6<N7g[/]rf%%Iub'a6l;cbo;l*%q]mM.Qt""XPVb+p%/VJsrHA\P;Y\srd+G8.T]4jl>c.OqN8g9n\\1)Ifi8l)*+ZEtt84^gcFZqE#Waq+hQU192&j\5t+H01\YGnN-8`$?JlOR*\=?tIc%nVVrPR,?K,F!+XSR2MtYZY7`UZLc)1BO&P/2'#dRVLUEg]I7nU<L2oq!Q_h=2K]E_1O;d@`dmQT5_^+P1=[EZ1<O((/-<=%E]1Bi%^HqjeU/5*)a@Qr$;fR)O%:ZS7/n-_JB@N($JE/!/0;YI<\P-@Q04E24f/`$6l;_In[V#2W&a8HEH2FBh/AGp3ecEf"c6KXdRMMM5%Hk0XCm8n,'C$9gXf_B%2m<0V\@JRiDL09fe2GG^p,;+r"Q<pel4c.LfU^Q>hbDH;X"sl/[+uX9W%p"([_m<C=k6467e,9'Q?^C0T%Q$mjhRK(L.P71R)O;6o':1@9.TY/7*44tL-Euo`7%64drU!DJA$i)V#?Y:/Pid:":MB;PFTrMClrO&?FD]AL8G(&k>m>n5I]to_D%&mk;:lAEH,`0n9UNhWk8!rLk@+[4i-\))78nq3H9;\_9AIU`l=1t)u?8&UG=`_rYqI/a9(-ZcLm;rQ4[k4QF.ma>nd"+:Q2-U3)J%r'%&1G&Bi"59k>bN7A$.)>:gQQXoQkDm;ZUXN63PMf5jn[9r+kQd4`CrO1$$rAU9G1fo6E>H64Nq>$"e8"OqHJK>Uo4\/\p*r!K0%O?[tkHs*OH6)l-]r6K:s._HJB5X+:ulAuI*OU5gE6!-qm:0#uu?jmPW`ZhQ/K5s7B,a<@RkdsbSJLqPalDdfa.ZH/"da6d]YfgOu%0>Q;C1O(&X$G#W0g5YiN[[49`F('R5k;rBKl*G6cHdLtObneS`_aBCRP\4"SBL_.P=ZQ+HUenLcgkpff&YINX>Oe'\->q?C#>FS&%q!i36Pp!YJZ3'"1>IO@/mLS]b1>uju]?9kpArD*V4jEajCh#9trG)&OW8fK<3h[[;/hGheJqI]]d9ct_L9LXUqeT,_\;g5/g?8>p%LD8$=S6X?USY47E?(*i^m<!X)`@:O4SPqK!>K_q>LN!lt%<qrU]luBVJ`k>T7QPY"g>DJ_*4^7`Hp(DYnR[dpIW>XS21TAHi4Bk*%l[a'`gDW'dp#+g2("L\97%`ZqEnbY4OZ\Wc2n9:"U7A`t(Y</s55'_:\dMp%[g;d&*GF,,S@=k#kl0".?94usZe<dBmsMT\B(qe'%$Dm89qsH%Yql\/O%J@\U8bIW$]VJ7-+\@b?&@KHk8T!XL)=W$.4ehY(\=[i6Q`R=GA)VX9_fbZ7QR=KX*d>'FnlAiiU'1Y9h"Rl$%Pam'NAPL^h%r:om.&ij3"b:-IZND#RHn[h@anlk.lha>1*q!j'B't&+WpVedb.HPJe9P-8kkD0MOgpsK.>h`gl.H(;#jT$WbQ.'o%G4LU^XZg\!FI$8+Nf?s.i$$/J)S!ntH.@GL,m@Ho+hYJ7dJ"o,e-JDI(kAd;Fm/.EkQ=)oq*sBj<(\Y0P/*KEmQfua%Y0_do-#A8%K)QARnROV+WQT]u%VP).=C*=06I.[N($M,lODBTS6`i+3C_rt6;-uan+=)XT38L3:d;`o`DNU@V<';qe7`+T92WFJ8L1Ofm=N;!8%(?'09je:QJ*/k%=]i=bc/4@!8;$3(^)%%8_^du#ljn8el1=!X`]?jB#^^&^`0-S&[1"9k^2Oa\Y<T9?A]c$mQ;uH0`J3=/m;K*.H%$Gni$?AnkoIJAmiE19)R!UMWm:m<SZk%<5oAfF-R#j;Gd,9TImY]j's(fke69f=*o$aD>!OunO<%!oQQ84!"N_upQ8N:KFs.sPY+%YSb/f3d'V=/S&dhqlqiQQp^*+/WBYE`=r;MXmSnLW84q-DmIYCG(G5(CsnS:,0W^B6Q*Hp."F'8qqs%,'eUe[&pBNs;Mm2ERM`<i%$loF;+%lUOe\Jlm&s:[;Hfg%t'%.ZHaYT>@N@4eTPDbSY3+W[Eo4X'AR6f$m&G%KXl$uELUJLU.->T*_krgl#0$DNC^dQVi3bt;D%Pd:b"9i;VJ;35mTMG3U9_"t=;'c^8X%N^Y\rB(PbnW-5p/B6rVb6hHCKMBrE[c3I(1Dj/(r(s?oL8o_iD!a\[)&]*7/hG>EWlE_t%7.h_9?ba9>,1"g$3I)!4V'8,h'+?KRcj(\j%ibl<U[^<Cq2IU[g`uD5Cj5/$%S"]p=E*!q@HA%72+5_557S"l]A0T$YX&iN](KI`%=k+'U=+Kg1&Yl'r@r_T'&LqYq>&sB`A'=]GSM^-EOQ'C0nN^k?U[kMQ6=`m?#^UcA00Y()qf)snCa[HK_DT#m_QV%#$8])/h4j0d%+P('NeT-M1dVj,>2p1u$%:+,*UBVh`7`_.$T<T'U-+e[b)[t^lZ_IS03q$aF6c^>]p9f!V:R@lK(Jp6q6:WAj$T8'YPa3AbF+Bn4%3n9su_94UZGW]B\?<\Tg3Duc_E1sF"d6m9>Y[AC:"uJnoF9*G543REd3+eIcA"]')]8l\[NF!\\TN,ed0RE)eHL[MD&_Ga=lLZD-%KRbo.ZqCas^-TC;qr@d-mK@jmD/tK4)+ZmQ?,B6M;#[:AL`:l]_@a"H\e+H$MM,T)%,tegX.KmMX2&f+H?mkmFSA`g%u240&>o.e%^./Yp:mEe5+\nuE#CtoOQ^)VEN4<!Gq-GF(ETdm.)dT:i+u#3rp]_2H0S8af&-F+,d,ABc'iY`#+m86ES-]OS`t$D["YgKD#%&?p%`Bl(%^1Ek1"_MStJCM$/5;7VA^'PqNQ8F2B58#V4P@YSj/h<XsJ=27e<&dhfnEVsB3#&GJLaqYj\?d"^2)"S&.-2L>iTu(2!hdiK%ls9q4BG_d_7O)D?R>"Es+/]eb*p=G[JYnSZVGS10:cB$EXqe#^^',*lBu;M^N!ucnP)a>N;@bAHUf>kH`5O_.Fs31ANTR,tLctID%R^cckL"';'m#XF\StjT(,EI@c2-G/h:o5o15TeJZOJ.(FaNAHG!apsE"B`0c!-A?e;\iqp.A18C.SI_r](S`*^kiDV;!An7GLZKq%jWqd;oP0F@.0'neQu/0r&BY'l0nHG=W*&U@5,dms&Ukq)9(=LCMZD\L`"1fJ$\)6dL(+.;5&cWlhEg'-KFd](c('1W73.SbKA\e]%756RP>VH:'%rN-[4+I8K2TVQ$B3"Nu,Ad#lkWG526QOUiKO"pEO1p053PR)<Y,m_[-\GDDZR5iFmdRm1j!$o9l%9*C=6EfO4L_HY%fNTc'Ok1gOi=0<.#&>pr7n<bj?&P;fAbYD>*\U@9/:t<0h$"'72G(?rI.t06=?E]W'KG5`/3WdR3Yr5)B#+3;4+"0KK+u;(j3HWb%^dZsOb_?f7'@p]/pTi`I_Y2ndG7-s*%>Ytl7b7A;cuq9<M7n9;Z-(EK<OHZ/,`aU6l2mV,d1.?G,.dkI:"[&6!-D2IhoIB_qZ='H%Tc<G@PNbJ!07g@5lm;?mm#1h4e<p`P3B0Jb?!&qVn*u1_?CNDfdt7DG6T/-!)rn5'=c78_j)7D1b;S.](7./cB_VaR^p&U.],/PG%I5g1?+\R79(,696/\gr5JJ)#>Xr0UU`,,os*6)E?BnMqsZLL3g9FSoj\9Y$O?O6L3,l]gM:^"ocd.eR$B`,a_*Ekc[5B%p[j(&Iu%U;>Aj#T[(p$IOq^])h83.75N5)Ghk!5HA])<u15iS`M1NCrtJ'14%AX;rcP&Jij')inH")#EU+9"_?$U;!fQjRNV&U^""$&q&4<0%TJ3J(F87]L\u)Iep-mdP*Om2B0HNQH7p?^-ifSAH$TD(\<sD>=B3P,,_\<0?^N0AXQ=RIq3[@;Jhm-(Jir%$+Rf%%*($B"eY&'bj%!0V_@!]At8B3CWfZa$^p-;Y9eJu`PcFipGh6l&U]+3XQ/!kR]/MJ%8UO9LkQGfKM*0<6[E#_AIAc%.-L=f,:\2(c.p*J1$dRU'2J%#0@kH<"%_ZT&1&e?ZmtZJ06U83=9Ti_$)&;V2ZQBX.fB8#s[MG'#FtOACE+W-u=g,q8kFJ0`RTiGpe(E!.>=naGMaa'*/6J$g*"P%1)3NE&S$@qG\ZC9gOe_O_8%9q(BN)!p29q2/e5J#n2HBMYMUt\H'ckhaSJ[t(c.#olV*.%*!-!tZnVn1]D3TV]'@6LFX*DjC:8\u%icE`dmP7hE!f?S*f$/qMLTg-Jleq?a]o:2m8Ts$L=D[cf$CUSb7CjB5:2D\[.I/)-NSIsZW5qu4Er_B/Z2?/HY;"U[1n@2O'V1#i%!q+r,4F;i,ZltNIL0aaNh$Ws6buqk]ca0$i/mn^]2HA*S<((&he)TD#s!'%#%!A?@053^[XeHTDZt,/s]WBU5(DTC\#om4B<lY+8%m)q\P!YFi*E)-J<[R8fOaKPd^W@.i??%eT,,Z%iZ%5ALr9H&>.>1R:Ee_MuL;1s\X/@7U'=J7'Rk?+!t,L"<apCsa45'U?eO<)-^%A2T;\j8_T(s8't`Hp''E+*(t:+^=,#1-1`F%bBqPFsGtO0&Kb:C@&<6:tPt?CUUQn*a:%%&`CWKY5mni)'M^[6^uN[W0Y!TaZFi8%+XRY-)`?]%s66c/>.b\qMnf'=0*-7Ji0W,[p4eJ-#HGoq4D,=IYehJ`RC*5*5tAgeOn;s^9G^(Ib?`M&^H'6]T,IX7/Gk7)#f^<>%/oqk.Ol6%H0gAfu9Rs)n#pVmV>,<;(nI!)AnF>lYg/]-s8Aig(.OmTH7C,$d('(G.X()=B4s2c@Q2sJUWt@Y)JjHl?ZAlG^n>r=$%#?tmq*fO558BsPd8LFb2/(sP.Ba?7,_.Ed`T&[jnnac8Fb%$4eLsTE7)-n%n7GKN\g+I/M!J%na?V.5-r!m^P82$6^Q6`Q9E<P0_%V%U"C.Y"E41WhK%"qWRdag)KLS#n;d"Blo8ZPA/I"\ZE2:)MRd9m2j<7-2RNAW\C8%n,G:Ylc8$,D7/X%7j=ndot%IF"ga*N["XH%Mr@<L.1nh.GQVZ7@E6K1[3<efLb&Q`UteOaoag!#U3rY)J>Oe$56@t$JW*XEC8@+HXk<jJOKh06<s[sX5hUre6clArfuT?ZLH^r^%\efLs8D2'RKno:s2Ngq^b9Y5"_I#r!;Kf<CN/+^lA9tUMfuQQ]]BVc:84811cfp`9"kUrT$sgH/c(='TV@mGb-ZtGq.@V%k;N$e,%:nVXsP=(bT6eQ\pH'VAe)cNmW.2t:P.g86lf&SCaCfh5s)`a/h>r\(.FYPIOPg-qNX[UB%FC(<Y'U4U,8]FM]ZB<2;`T]>]@Ng[t%g"9cD=q>0hG?qlk%qUAG(ae@/?**8gTkjr8ANLSS)emTUh%gO'^4DeThbZ3d,1GN(/OGL+'ni6d9s$Nlog0a@^Vs(@2"9t%'V,>E%*<'P.UghREeduH9mV9l:lpbjn7h/WMbR!a/!<?[UHP&[1i]b(!QX[dI1h-S2/&a.p%3\H;RJ9j=olfPO&7l*ZAi5;k0Z+;aC/'uu%E+[C>YlHR&,lAiZ1/#uC?>B1n.#&:aPf@u\fifTQQG)I=<f.=un]T:!CLQ1@$biAg$&H;QQr?i$]s=M8-X`/m4hV$!JTbab9MI^S%m'Bo0PBj/5HA7:Y=-GK^!TgK7@q&&Ab-da5]@M@\?NUlX'^<cq%$=TJ5kdRVmbU9c7dkt:Tt@5c.*u883_c]$a-3/i&;M;C6@WX6%0_EE"!`(uf?5ZN&46Sf8PmHj`\NbR8ndSR*qf`6_&:5sUosDY#Gf7c^pRYrbGF<*\ZFtfk:Uo-<fXhW8NZq+rPT1k?*UP)#_]&kY%'<Am^lTefhIm;/:DKoemd;ZR%+6X:Zpj:&hKYIQ56Z0Mb$Z1T45/IHZ5ka-N*n^GdGMiDh\,X2BpV6UGs7,mEs8D=\J+GVVrpY^C%oZ)IVmD&S`O8nP+[m,<<LHkh/s8;ThO8o!9s7FWer9)u:p[_b+s21IXqt!&Pe";*droa=W:]CLWq1oR]_]SmG5Q:Vjrs.3+>Li~>%AI9_PrivateDataEnd